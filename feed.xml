<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael Stapelbergs Website</title>
  <link href="https://michael.stapelberg.ch/feed.xml" rel="self"/>
  <link href="https://michael.stapelberg.ch/"/>
  <id>https://michael.stapelberg.ch/</id>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[MacBook Air M1: the best laptop?]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/"/>
    <id>https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/</id>
    <published>2021-11-28T16:50:00+01:00</published>
    <content type="html"><![CDATA[<p>You most likely have heard that Apple switched from Intel CPUs to their own,
ARM-based CPUs.</p>
<p>Various early reviews touted the new MacBooks, among the first devices with the
ARM-based M1 CPU, as the best computer ever. This got me curious: after years of
not using any Macs, would an M1 Mac blow my mind?</p>
<p>In this article, I share my thoughts about the MacBook Air M1, after a year of
occasional usage.</p>















<a href="https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/mba.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/mba_hu855bbe0a9c47ac557e5b09db74fa3b06_1092595_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/mba_hu855bbe0a9c47ac557e5b09db74fa3b06_1092595_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-11-28-macbook-air-m1/mba_hu855bbe0a9c47ac557e5b09db74fa3b06_1092595_600x0_resize_q75_box.jpg"
  alt="MacBook Air M1" title="MacBook Air M1"
  width="600"
  height="675"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="energy-efficiency">Energy efficiency</h2>
<p>The M1 CPU is remarkably energy-efficient. This has two notable effects:</p>
<ol>
<li>The device does not have a fan, and <strong>stays absolutely quiet</strong>. This is
pretty magical, and I now notice my ThinkPad‚Äôs fan immediately.</li>
<li>The <strong>battery lasts many hours</strong>, even with demanding use-cases like video
conferencing.</li>
</ol>
<p>When it comes to energy efficiency, Apple sets the bar. All other laptops should
be fanless, too! And the battery life really is incredible: taking notes in
Google Docs (via WiFi) while at a conference for many hours left me with well
over 80% of battery at the end of the day!</p>
<p>I briefly lent the computer to someone and got it back with a VPN client
installed. The battery life was considerably shortened by that VPN client and
recovered once I uninstalled it. So if you‚Äôre not seeing great battery life,
maybe a single program is ruining your experience.</p>
<p>The fast wakeup feature that was heavily stressed during the initial
introduction (to some ridicule) is actually pretty nice! I now notice having to
wait for my ThinkPad to wake up.</p>
<p>Battery life during standby is great, too. Anecdotally, when leaving my ThinkPad
lying around, it never survives until I plug it in again. The MacBook survives
every single time.</p>
<h2 id="chipset-advantage">Chipset advantage?</h2>
<p>Now, given that Apple controls the entire machine, does that mean they now offer
features that other computers cannot offer yet?</p>
<p>My personal bar for this question is whether a computer can be used with my
<a href="/posts/2017-12-11-dell-up3218k/">bandwidth-hungry 8K monitor</a>, and the
disappointing news is that the MacBook Air M1 cannot drive the 8K monitor with
its 7680x4320 pixels resolution (at 60 Hz, using 2 DisplayPort links), not even
with <a href="https://www.displaylink.com/products/find?vid_dp=1&amp;usbc=1">an external USB-C
dock</a>.</p>
<p>Maybe future hardware generations add support for 8K displays, but for my
day-to-day, Apple‚Äôs complete control doesn‚Äôt improve anything.</p>
<h2 id="built-in-peripherals">Built-in peripherals</h2>
<p>The screen is great! Everything looks sharp, colors are vibrant and brightness
is good.</p>
<p>As usual, the touchpad (which Apple calls ‚Äútrackpad‚Äù) is great, much better than
any touchpad I have ever used on a PC laptop. Apple trackpads have always had
this advantage since I know them, and I don‚Äôt know why PC touchpads don‚Äôt seem
to get any better? ü§î</p>
<p>Apple brought back their <a href="https://www.macrumors.com/guide/butterfly-keyboard-vs-scissor-keyboard/">scissor mechanism
keyboards</a>,
which is a very welcome change. I have witnessed so so many problems with the
old butterfly mechanism keyboards.</p>
<p>This first MacBook Air M1 model has no MagSafe. Apple added MagSafe in the
MacBook Pro M1 in late 2021. I hope they‚Äôll eventually expand MagSafe to all
notebooks.</p>
<h2 id="peripherals-not-enough-ports">Peripherals: not enough ports</h2>
<p>Staying in peripheral-land, let me first state that this MacBook‚Äôs <strong>2 USB-C
ports are not enough</strong>!</p>
<p>When working on the go, after plugging in power, I can plug in a wired ethernet
adapter (wireless can be spotty), but then won‚Äôt have any ports left for my
ergonomic keyboard and mouse.</p>
<p>For video conferencing, I can plug in power (to ensure I won‚Äôt run out of
battery), connect a table microphone, but won‚Äôt have any ports left for a decent
webcam. This is particularly annoying because this MacBook‚Äôs built-in webcam is
really bad, and the main reason why reviewers don‚Äôt give the MacBook a perfect
score (<a href="https://www.youtube.com/watch?v=OEaKQ0pxQsg">example review on
YouTube</a>).</p>
<p>So, in practice, you need to carry a USB-C dock, or at least a USB hub, with
your laptop when you anticipate possibly needing any peripherals. #donglelife</p>
<h2 id="not-enough-ram-for-local-software-development">Not enough RAM for local software development</h2>
<p>Hardware-wise, the biggest pain point for software developers is the small
amount of RAM: both the MacBook Air M1 and the MacBook Pro M1 (13&quot;) can be
configured with up to 16 GB of RAM. Only the newer MacBook Pro M1 14&quot; or 16&quot;
(introduced late 2021) support more RAM.</p>
<p>To be clear, 16 GB RAM is enough to do software development in general, but it
can quickly become limiting when you deal with larger programs or data sets.</p>
<p>In my ThinkPad, I have 64 GB of RAM, which allows for a lot more VMs, large
index data structures, or just plenty of page cache. With the ThinkPad, I don‚Äôt
have to worry about RAM.</p>
<p>Of course, there are strategies around this. Maybe your projects are large
enough to warrant maintaining a remote build cluster, and you can run your test
jobs in a staging environment. The MacBook makes for a fine thin client ‚Äî
provided your internet connection is fast and stable.</p>
<h2 id="operating-system-macos">Operating System: macOS</h2>
<p>I am talking about Operating Systems at a very high level in this section. Many
use-cases will work fine, regardless of the Operating System one uses. I can
typically get by with a browser and a terminal program.</p>
<p>So, this section isn‚Äôt a nuanced or fair review or critique of macOS or anything
like that, just a collection of a few random things I found notable while
playing with this device :)</p>
<p>My favorite way to install macOS is Internet Recovery. You can install a blank
disk in your Mac and start the macOS installer via the internet! The Mac will
even remember your WiFi password. The closest thing I know in the PC world is
<a href="https://netboot.xyz/">netboot.xyz</a>, and that needs to be installed in your
local network first.</p>
<p>Similarly, Apple‚Äôs integration when using multiple devices seems pretty
good. For example, the Mac will offer to switch to your iPhone‚Äôs mobile
connection when it loses network connectivity.</p>
<p>But, just like in all other operating systems, there is plenty in macOS to
improve.</p>
<p>For example, software updates on the Mac still take 30 minutes (!) or so, which
is entirely unacceptable for such a fast device! In particular, Apple seems to
be (partially?) using immutable file system snapshots to distribute their
software, so I don‚Äôt know why <a href="https://distr1.org/">distri can install and update so much
faster</a>.</p>
<p>Speaking of Operating System shortcomings, I have observed how <a href="https://en.wikipedia.org/wiki/Apple_File_System">APFS (the Apple
File System)</a> can get into a
state in which it cannot be repaired, which I found pretty concerning! Automated
and frequent backups of all on-device data is definitely a must.</p>
<p>Slow software updates are annoying, and having little confidence in the file
system makes me uneasy, but what‚Äôs really a dealbreaker is that my preferred
keyboard layout does not work well on macOS: see <a href="#neo">Appendix A: NEO keyboard
layout</a>.</p>
<h2 id="linux-">Linux? üêß</h2>
<p>So given my preference for Linux, could I just use Linux instead?</p>
<p>Unfortunately, while <a href="https://asahilinux.org">Asahi Linux</a> is making great
progress in bringing Linux to the M1 Macs, it seems like it‚Äôll still be many
months before I can install a Linux distribution and expect it to just work on
the M1 Mac.</p>
<p>Until then, check out the <a href="https://asahilinux.org/blog/">Asahi Linux Progress Report blog
posts</a>!</p>
<h2 id="intel-to-m1-architecture-transition">Intel to M1 architecture transition</h2>
<p>Apple developed the <a href="https://en.wikipedia.org/wiki/Rosetta_(software)#Rosetta_2">Rosetta 2 dynamic binary
translator</a> which
transparently handles non-M1 programs, and so far it seems to work fine! All the
things I tried just worked, and architecture never seemed to play a role during
my usage.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The MacBook Air M1 is indeed impressive! It‚Äôs light, silent, fast and the
battery life is amazing. If these points are the most important to you in a
laptop, and you‚Äôre already in the Mac ecosystem, I imagine you‚Äôll be very happy
with this laptop.</p>
<p>But is the M1 really so mind-blowing that you should switch to it no matter
what? No. As a long-time Linux user who is primarily developing software, I
prefer my <a href="/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/">ThinkPad X1
Extreme</a> with
its plentiful peripheral connections and lots of RAM.</p>
<p>I know it‚Äôs not an entirely fair comparison: I should probably compare the
ThinkPad to the newer MacBook <strong>Pro</strong> models (not MacBook Air). But I‚Äôm not a
professional laptop reviewer, I can only speak about these 2 laptops that I
found interesting enough to personally try.</p>
<h2 id="neo">Appendix A: NEO keyboard layout</h2>
<p>The macOS implementation of the <a href="https://neo-layout.org/">NEO keyboard layout</a>
has a number of significant incompatibilities/limitations: its layer 3 does not
work correctly. Layer 3 contains many important common characters, such as <code>/</code>
(<code>Mod3 + i</code>, i.e. Caps Lock + i) or <code>?</code> (<code>Mod3 + s</code>).</p>
<p>I installed the current <code>neo.keylayout</code> file (2019-08-16) as described on the
<a href="https://neo-layout.org/Download/">NEO download page</a>.</p>
<p>In order to make <code>/</code> and <code>?</code> work in Google Docs, I had to enable the additional
Karabiner rule <em>‚ÄúPrevent all layer 3 keys from being treated as option key
shortcut‚Äù</em> (see also: <a href="https://github.com/jgosmann/neo2-layout-osx/issues/6#issuecomment-604622834">this GitHub
issue</a>)</p>
<hr>
<p>I encountered the following issues, ordered by severity:</p>
<p><strong>Issue 1</strong>: I cannot use Emacs at all! I installed the emacsformacosx.com
version (also tried homebrew), but cannot enter keys such as <code>/</code> or <code>?</code>. Emacs
interprets these as <code>M-u</code> instead.</p>
<p>The Karabiner rule <em>‚ÄúPrevent all layer 3 keys from being treated as option key
shortcut‚Äù</em> that fixed this issue in Google Docs does not help for
Emacs. Removing it from Karabiner changes behavior, but Emacs still recognizes
<code>M-i</code> instead of <code>/</code>, so it‚Äôs broken with or without the rule.</p>
<p><strong>Issue 2</strong>: In the Terminal app, I cannot enable the <em>‚ÄúUse Option as Meta key‚Äù</em>
keyboard option, otherwise all layer 3 keys function as meta shortcuts (<code>M-i</code>)
instead of key symbols (<code>/</code>).</p>
<p>I commonly use the Meta key to jump around word-wise: <code>Alt+b</code> / <code>Alt+f</code> on a
PC. Since I can‚Äôt use Option + b / Option + f on a Mac, I need to use Option +
arrow keys instead, which works.</p>
<p>Since the Option key does not work as Meta key, I need to press (and release!)
the Escape key instead. This is pretty inconvenient in Emacs in a terminal.</p>
<p><strong>Issue 3</strong>: In Gmail in Chrome, the search keyboard shortcut (<code>/</code>) is not
recognized.</p>
<p>I <a href="https://git.neo-layout.org/neo/neo-layout/issues/590">reported this problem
upstream</a>, but there seems
to be no solution.</p>
<hr>
<p>I‚Äôm not sure why these programs don‚Äôt work well with NEO. I tried BBEdit for
comparison, and it had no trouble with (macOS-level) shortcuts such as
<code>command + /</code> and <code>option + command + /</code>.</p>
<p>On Linux, the NEO layout works so much better. I‚Äôm really not in the mood to
continuously fight with my operating system over keyboard input and shortcuts.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Silent HP Z440 workstation: replacing noisy fans]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/"/>
    <id>https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/</id>
    <published>2021-08-28T15:16:00+02:00</published>
    <content type="html"><![CDATA[<p>Since March 2020, I have been using my work computer at home: an <a href="https://support.hp.com/us-en/document/c04506309">HP Z440
workstation</a>.</p>
<p>When I originally took the machine home, I immediately noticed that it‚Äôs quite a
bit louder than my other PCs, but only now did I finally decide to investigate
what I could do about it.</p>
<h2 id="finding-all-the-fans">Finding all the fans</h2>
<p>I first identified all fans, both by opening the chassis and looking around, and
by looking at the <a href="http://h10032.www1.hp.com/ctg/Manual/c04823811">HP Z440 Maintenance and Service
Guide</a>, which contains this
description:</p>















<a href="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/chassis-components.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/chassis-components_hu36d388d2b36bd958f883a2df8c1aaea4_273387_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/chassis-components_hu36d388d2b36bd958f883a2df8c1aaea4_273387_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/chassis-components_hu36d388d2b36bd958f883a2df8c1aaea4_273387_600x0_resize_q75_box.jpg"
  alt="chassis components" title="chassis components"
  width="600"
  height="509"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Specifically, I identified the following fans:</p>
<ul>
<li>‚Äú1 Fan‚Äù, a 92mm rear fan, sucking air out of the back of the chassis.</li>
<li>‚Äú5 Memory fans‚Äù, two 60mm fans in a custom HP plastic enclosure that are
positioned directly above the DIMM slots to the left and right of the CPU.</li>
<li>‚Äú6 CPU Heat sink‚Äù, a 92mm fan on top of a heat sink</li>
<li>‚Äú11 Rear System Fan‚Äù, a 92mm front (!) fan, pulling air into the front of the
chassis.</li>
<li>My aftermarket nVidia GeForce GPU has 3 fans on a massive heat sink.</li>
<li>The power supply has a fan, too, which I will not touch.</li>
</ul>
<h2 id="memory-fans">Memory fans</h2>
<p>The Z440 comes with a custom HP plastic enclosure that is put over the CPU
cooler, fastened with two clips at opposite ends, and positions two small 60mm
fans above the DIMM banks.</p>
<p>This memory fan plastic enclosure is a pain to find anywhere. It looks like HP
is no longer producing it.</p>
<p>The enclosure plugs into the mainboard with a custom connector that is directly
wired up to the fans, meaning it‚Äôs a pain to replace the fans.</p>















<a href="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-21-memory-fans.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-21-memory-fans_hu47042a7738bec735fd93d948ca344866_2106605_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-21-memory-fans_hu47042a7738bec735fd93d948ca344866_2106605_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-21-memory-fans_hu47042a7738bec735fd93d948ca344866_2106605_600x0_resize_q75_box.jpg"
  alt="memory fans" title="memory fans"
  width="600"
  height="696"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Luckily, while <a href="https://www.workstation4u.de/de/ersatzteile/hp/hp-z440/1513/hp-z440-memory-cooling-solution-neu">shopping around for an
enclosure</a>
I could modify, I realized that memory fans are only required when installing
more than 4 DIMM modules!</p>
<p>My machine ‚Äúonly‚Äù has 64 GB of RAM, in 4 DIMM modules, and I don‚Äôt intend to
upgrade anytime soon, so I just unplugged the whole memory fan enclosure and
removed it from the chassis.</p>
<p>The UEFI firmware does not complain about the memory fans missing (contrary to
the rear fan!), and this simple change alone makes a noticeable difference in
noise levels.</p>
<h2 id="gpu-fans">GPU fans</h2>
<p>nVidia GPUs can be run at different ‚ÄúPowerMizer‚Äù performance levels:</p>















<a href="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/nvidia-powermizer.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/nvidia-powermizer_hueedf559e14cfb4ac2af7a6d6a30751ae_1050836_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/nvidia-powermizer_hueedf559e14cfb4ac2af7a6d6a30751ae_1050836_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/nvidia-powermizer_hueedf559e14cfb4ac2af7a6d6a30751ae_1050836_600x0_resize_q75_box.jpg"
  alt="nVidia PowerMizer" title="nVidia PowerMizer"
  width="600"
  height="359"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Many years ago, I ran into lag when using Chrome that went away as soon as I
switched my nVidia GPU‚Äôs Preferred Mode to ‚ÄúPrefer Maximum Performance‚Äù instead
of ‚ÄúAuto‚Äù or ‚ÄúAdaptive mode‚Äù.</p>
<p>It turns out that nowadays, that is no longer a problem, so running at Prefer
Maximum Performance is no longer necessary.</p>
<p>Worse, pinning the GPU at the highest Performance Level means that it produces
more heat, resulting in the fans having to spin up more often, and run for
longer durations.</p>
<p>But, even after switching to Auto, resulting in Adaptive mode being chosen, I
noticed that my GPU was stuck at a higher PowerMizer level than I thought it
should be.</p>
<p>An easy fix is to limit the GPU to a certain PowerMizer level, and ideally not
the lowest level (level 0). For me, one level after that (level 1) seems to
result in no slow-down during my typical usage.</p>
<p>I followed <a href="https://db.tannercrook.com/limiting-nvidia-gpu-in-linux/">this blog post to limit my GPU to PowerMizer level
1</a>, i.e. I added
<code>/etc/modprobe.d/nvidia-power-save.conf</code> with the following contents:</p>
<pre tabindex="0"><code>options nvidia NVreg_RegistryDwords=&quot;OverrideMaxPerf=0x2&quot;
</code></pre><p>‚Ä¶followed by a rebuild of my initramfs (<code>update-initramfs -u</code>) and a <code>reboot</code>.</p>
<p>This way, the fans don‚Äôt typically need to spin up as the GPU stays below its
temperature limit.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">For some reason, the above method worked fine on my Debian work machine, but not
on my Arch private machine‚Ä¶? I have not investigated why.</div>
  </div>
</aside>

<h2 id="rear-and-front-fans">Rear and front fans</h2>
<p>With the memory fans and GPU fans out of the way, two easy to check fans remain:
the rear fan and front fan. These are 92mm in size, the model number is Foxconn
PVA092G12S.</p>















<a href="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-20-rear-fan-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-20-rear-fan-featured_hubc92ae85c899c14de0806668526f039c_1572517_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-20-rear-fan-featured_hubc92ae85c899c14de0806668526f039c_1572517_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-20-rear-fan-featured_hubc92ae85c899c14de0806668526f039c_1572517_600x0_resize_q75_box.jpg"
  alt="rear fan" title="rear fan"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>I unplugged both of them to see what effect these fans have on the noise level,
and the difference was significant!</p>
<p>Unfortunately, unplugging isn‚Äôt enough: the UEFI firmware complains on boot when
the rear fan is not connected, requiring you to press <code>Enter</code> to boot. Also, the
machine seems to get a few degrees Celsius hotter inside without the front and
rear fans, so I don‚Äôt want to run the machine without these fans for an extended
period of time.</p>
<p>I ordered two <a href="https://noctua.at/en/nf-a9x14-pwm">Noctua NF-A9x14 PWM</a> fans (for
about 25 CHF each) to replace the stock front and rear fans.</p>
<p>Unfortunately, HP uses a custom 4-pin fan connector on its Z440 mainboard!
Luckily, modifying the connector of the Noctua Low-Noise Adapter cable to fit on
the custom 4-pin connector is as simple as using a knife to remove the
connector‚Äôs guard rails:</p>















<a href="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-24-fan-connector-mod.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-24-fan-connector-mod_hu855bbe0a9c47ac557e5b09db74fa3b06_976008_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-24-fan-connector-mod_hu855bbe0a9c47ac557e5b09db74fa3b06_976008_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-08-28-silent-hp-z440-workstation/2021-08-24-fan-connector-mod_hu855bbe0a9c47ac557e5b09db74fa3b06_976008_600x0_resize_q75_box.jpg"
  alt="fan connector mod" title="fan connector mod"
  width="600"
  height="557"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="cpu-fan">CPU fan</h2>
<p>For the CPU fan, HP again chose to use a <a href="https://h30434.www3.hp.com/t5/Business-PCs-Workstations-and-Point-of-Sale-Systems/Z620-Aftermarker-CPU-Cooler-CPU-Cooling-shroud-necessary-or/td-p/7842134">custom (6-pin)
connector</a>.</p>
<p>On the web, I read that the Z440 CPU fan is quite efficient and not worth
replacing. This matches my experience, so I kept the standard Z440 CPU cooler.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I was quite happy to discover that I could just unplug the memory fans, and
configure my GPU to make less noise. Together with replacing the front/rear fans
with Noctua ones, the machine is much quieter now than before!</p>
<p>One downside of workstation-class hardware is that manufacturers (at least HP)
like to build custom parts and solutions. Using their own fan connectors instead
of standard connectors is such a pain! I‚Äôll be sure to stick to standard PC
hardware :)</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[25 Gigabit Linux internet router PC build]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/"/>
    <id>https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/</id>
    <published>2021-07-10T13:43:00+02:00</published>
    <content type="html"><![CDATA[<p>init7 recently announced that with their <a href="https://www.init7.net/en/internet/fiber7/">FTTH fiber offering
Fiber7</a>, they will now sell and
connect you with 25 Gbit/s (Fiber7-X2) or 10 Gbit/s (Fiber7-X) fiber optics, if
you want more than 1 Gbit/s.</p>
<p>While this offer will only become available at my location late this year (<a href="https://twitter.com/init7/status/1403287499175235584">or
possibly later due to the supply chain
shortage</a>), I already
wanted to get the hardware on my end sorted out.</p>
<p>After my <a href="/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/">previous
disappointment</a>
with the MikroTik CCR2004, I decided to try a custom PC build.</p>
<p>An alternative to many specialized devices, including routers, is to use a PC
with an expansion card. An internet router‚Äôs job is to configure a network
connection and forward network packets. So, in our case, we‚Äôll build a PC and
install some network expansion cards!</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-router-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-router-featured_hu1fe795dd8828eccf339de1acf31abbd0_2106743_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-router-featured_hu1fe795dd8828eccf339de1acf31abbd0_2106743_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-router-featured_hu1fe795dd8828eccf339de1acf31abbd0_2106743_600x0_resize_q75_box.jpg"
  alt="router PC build" title="router PC build"
  width="600"
  height="607"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="goals">Goals</h2>
<p>For this PC internet router build, I had the following goals, highest priority
to lowest priority:</p>
<ol>
<li>Enough performance to saturate 25 Gbit/s, e.g. with two 10 Gbit/s downloads.</li>
<li>Silent: no loud fan noise.</li>
<li>Power-efficient: low power usage, as little heat as possible.</li>
<li>Low cost (well, for a high-end networking build‚Ä¶).</li>
</ol>
<h2 id="network-port-plan">Network Port Plan</h2>
<p>The simplest internet router has 2 network connections: one uplink to the
internet, and the local network. You can build a router without extra cards by
using a mainboard with 2 network ports.</p>
<p>Because there are no mainboards with SFP28 slots (for 25 Gbit/s SFP28 fiber
modules), we need at least 1 network card for our build. You might be able to
get by with a dual-port SFP28 network card if you have an SFP28-compatible
network switch already, or need just one fast connection.</p>
<p>I want to connect a few fast devices (directly and via fiber) to my router, so
I‚Äôm using 2 network cards: an SFP28 network card for the uplink, and a quad-port
10G SFP+ network card for the local network (LAN). This leaves us with the
following network ports and connections:</p>
<table>
<thead>
<tr>
<th>Network Card</th>
<th>max speed</th>
<th>cable</th>
<th>effective</th>
<th>Connection</th>
</tr>
</thead>
<tbody>
<tr>
<td>Intel XXV710</td>
<td>25 Gbit/s</td>
<td>fiber</td>
<td>25 Gbit/s</td>
<td>Fiber7-X2 uplink</td>
</tr>
<tr>
<td>Intel XXV710</td>
<td>25 Gbit/s</td>
<td>DAC</td>
<td>10 Gbit/s</td>
<td>workstation</td>
</tr>
<tr>
<td>Intel XL710</td>
<td>10 Gbit/s</td>
<td>RJ45</td>
<td>1 Gbit/s</td>
<td>rest (RJ45 Gigabit)</td>
</tr>
<tr>
<td>Intel XL710</td>
<td>10 Gbit/s</td>
<td>fiber</td>
<td>10 Gbit/s</td>
<td>MikroTik 1</td>
</tr>
<tr>
<td>Intel XL710</td>
<td>10 Gbit/s</td>
<td>fiber</td>
<td>10 Gbit/s</td>
<td>MikroTik 2</td>
</tr>
<tr>
<td>Intel XL710</td>
<td>10 Gbit/s</td>
<td>/</td>
<td>10 Gbit/s</td>
<td>(unused)</td>
</tr>
<tr>
<td>onboard</td>
<td>2.5 Gbit/s</td>
<td>RJ45</td>
<td>1 Gbit/s</td>
<td>(management)</td>
</tr>
</tbody>
</table>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-back-connectors.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-back-connectors_hu2cfa90931bbae9f0fd461262de6dceaf_1588951_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-back-connectors_hu2cfa90931bbae9f0fd461262de6dceaf_1588951_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-back-connectors_hu2cfa90931bbae9f0fd461262de6dceaf_1588951_600x0_resize_q75_box.jpg"
  alt="network connectors" title="network connectors"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="hardware-selection">Hardware selection</h2>
<p>Now that we have defined the goals and network needs, let‚Äôs select the actual
hardware!</p>
<h3 id="network-cards">Network Cards</h3>
<p>My favorite store for 10 Gbit/s+ network equipment is
<a href="https://www.fs.com/">FS.COM</a>. They offer Intel-based cards:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-03-network-cards.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-03-network-cards_hue8caea776ef0fb2df2e421fd4fc4446d_3100418_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-03-network-cards_hue8caea776ef0fb2df2e421fd4fc4446d_3100418_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-03-network-cards_hue8caea776ef0fb2df2e421fd4fc4446d_3100418_600x0_resize_q75_box.jpg"
  alt="Network cards" title="Network cards"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<ul>
<li>
<p>(347 CHF) PCIe 3.0 x8 Dual-Port 25G SFP28 Ethernet Network Card (Intel XXV710)<br>
<a href="https://www.fs.com/de/products/75603.html">FS.COM XXV710AM2-F2 #75603</a></p>
</li>
<li>
<p>(329 CHF) PCIe 3.0 x8 Quad-Port 10G SFP+ Ethernet Network Card (Intel XL710-BM1)<br>
<a href="https://www.fs.com/de/products/75602.html">FS.COM FTXL710BM1-F4 #75602</a></p>
</li>
</ul>
<p>Both cards work out of the box with the <a href="https://www.kernel.org/doc/Documentation/networking/i40e.txt"><code>i40e</code> Linux kernel
driver</a>, no
firmware blobs required.</p>
<p>For a good overview over the different available Intel cards, check out the
second page (‚ÄúProduct View‚Äù) in the card‚Äôs <a href="https://img-en.fs.com/file/user_manual/network-adapter-user-manual.pdf">User
Manual</a>.</p>
<h3 id="cpu-and-chipset">CPU and Chipset</h3>
<p>I read on many different sites that AMD‚Äôs current CPUs beat Intel‚Äôs CPUs in
terms of performance per watt. We can better achieve goals 2 and 3 (low noise
and low power usage) by using fewer watts, so we‚Äôll pick an AMD CPU and
mainboard for this build.</p>
<p>AMD‚Äôs current CPU generation is Zen 3, and <a href="https://en.wikipedia.org/wiki/List_of_AMD_Ryzen_processors#Zen_3_based">current Zen 3 based
CPUs</a>
can be divided into 65W <a href="https://en.wikipedia.org/wiki/Thermal_design_power">TDP (Thermal Design
Power)</a> and 105W TDP
models. Only one 65W model is available to customers right now: the Ryzen 5
5600X.</p>
<p>Mainboards are built for/with a certain so-called chipset. Zen 3 CPUs use the
AM4 socket, for which <a href="https://en.wikipedia.org/wiki/Socket_AM4#Chipsets">8 different
chipsets</a> exist. Our network
cards need PCIe 3.0, so that disqualifies 5 chipsets right away: only the A520,
B550 and X570 chipsets remain.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Note:</strong> Multiple people pointed out (thank you!) that the Wikipedia table only
lists PCIe lanes provided by the chipset, and strictly speaking, the older X470
chipset (released March 2018) supports CPUs which provide PCIe 3.0
lines. E.g. the <a href="https://www.asus.com/microsite/motherboard/AMD-X470/">ROG Strix
X470-F</a> with its x8/x8
mode should work, too.</div>
  </div>
</aside>
















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-08-ryzen5-on-mainboard.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-08-ryzen5-on-mainboard_hudb2375ee03466882b5ba09d7fd065b5d_1054095_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-08-ryzen5-on-mainboard_hudb2375ee03466882b5ba09d7fd065b5d_1054095_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-08-ryzen5-on-mainboard_hudb2375ee03466882b5ba09d7fd065b5d_1054095_600x0_resize_q75_box.jpg"
  alt="Ryzen 5" title="Ryzen 5"
  width="600"
  height="440"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="mainboard-pcie-bandwidth">Mainboard: PCIe bandwidth</h3>
<p>I originally tried using the ASUS PRIME X570-P mainboard, but I ran into two
problems:</p>
<p>Too loud: X570 mainboards need an annoyingly loud chipset fan for their 15W
TDP. Other chipsets such as the B550 don‚Äôt need a fan for their 5W TDP. With a
loud chipset fan, goal 2 (low noise) cannot be achieved. Only the
<a href="https://www.golem.de/news/sockel-am4-x570s-mainboards-mit-passivkuehlung-verfuegbar-2106-157434.html">recently-released X570<strong>S</strong>
variant</a>
comes without fans.</p>
<p>Not enough PCIe bandwidth/slots! This is how the ASUS tech specs describe the slots:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/x570p_expansion.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/x570p_expansion_hu3e0f2d5aa6180df20bb553ed5c6fa57b_271626_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/x570p_expansion_hu3e0f2d5aa6180df20bb553ed5c6fa57b_271626_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/x570p_expansion_hu3e0f2d5aa6180df20bb553ed5c6fa57b_271626_600x0_resize_q75_box.jpg"
  
  width="600"
  height="244"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>This means the board has 2 slots (1 CPU, 1 chipset) that are physically wide
enough to hold a full-length x16 card, but only the first port can
electronically be used as an x16 slot. The other port only has PCIe lanes
electronically connected for x4, hence ‚Äúx16 (max at x4 mode)‚Äù.</p>
<p>Unfortunately, our network cards need electrical connection of all their PCIe x8
lanes to run at full speed. Perhaps Intel/FS.COM will one day offer a new
generation of network cards that use PCIe <strong>4.0</strong>, because PCIe 4.0 x4 achieves
the same 7.877 GB/s throughput as PCIe <strong>3.0</strong> x8. Until then, I needed to find
a new mainboard.</p>
<p>Searching mainboards by PCIe capabilities is rather tedious, as mainboard block
diagrams or PCIe tree diagrams are not consistently available from all mainboard
vendors.</p>
<p>Instead, we can look explicitly for a feature called <strong>PCIe Bifurcation</strong>. In a
nutshell, PCIe bifurcation lets us divide the PCIe bandwidth from the Ryzen CPU
from 1 PCIe 4.0 x16 into 1 PCIe 4.0 x8 + 1 PCIe 4.0 x8, definitely satisfying
our requirement for two x8 slots at full bandwidth.</p>
<p>I found a list of (only!) three B550 mainboards supporting PCIe Bifurcation in <a href="https://www.anandtech.com/show/15850/the-amd-b550-motherboard-overview-asus-gigabyte-msi-asrock-and-others/39">an
Anandtech
review</a>. Two
are made by Gigabyte, one by ASRock. I read the Gigabyte UEFI setup is rather
odd, so I went with the ASRock B550 Taichi mainboard.</p>
<h3 id="case">Case</h3>
<p>For the case, I needed a midi case (large enough for the B550 mainboard‚Äôs ATX
form factor) with plenty of options for large, low-spinning fans.</p>
<p>I stumbled upon the <a href="https://www.corsair.com/us/en/Categories/Products/Cases/Mid-Tower-ATX-Cases/4000D-Airflow-Tempered-Glass-Mid-Tower-ATX-Case/p/CC-9011200-WW">Corsair 4000D
Airflow</a>,
which is available for 80 CHF and <a href="https://www.gamersnexus.net/hwreviews/3624-corsair-4000d-airflow-case-review-vs-solid-panel">achieved positive
reviews</a>. I‚Äôm
pleased with the 4000D: there are no sharp corners, installation is quick, easy
and clean, and the front and top panels offer plenty of space for cooling behind
large air intakes:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-airflow-case-top.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-airflow-case-top_hu74d32c9eb10022fb50f09605538b4d16_1754161_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-airflow-case-top_hu74d32c9eb10022fb50f09605538b4d16_1754161_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-airflow-case-top_hu74d32c9eb10022fb50f09605538b4d16_1754161_600x0_resize_q75_box.jpg"
  alt="Airflow case (from the top)" title="Airflow case (from the top)"
  width="600"
  height="699"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Inside, the case offers plenty of space and options for routing cables on the back side:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-back.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-back_hu24f36c0d8bab8e8a026702698b97bc68_1930320_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-back_hu24f36c0d8bab8e8a026702698b97bc68_1930320_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-back_hu24f36c0d8bab8e8a026702698b97bc68_1930320_600x0_resize_q75_box.jpg"
  alt="Airflow case (back)" title="Airflow case (back)"
  width="600"
  height="536"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Which in turn makes for a clean front side:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-front.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-front_hu876ee6dd48eb5e24d09b830a310f7016_2072230_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-front_hu876ee6dd48eb5e24d09b830a310f7016_2072230_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-27-case-front_hu876ee6dd48eb5e24d09b830a310f7016_2072230_600x0_resize_q75_box.jpg"
  alt="Airflow case (front)" title="Airflow case (front)"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="fans">Fans</h3>
<p>I have been happy with <a href="https://noctua.at/">Noctua</a> fans for many years. In this
build, I‚Äôm using only Noctua fans so that I can reach goal 2 (silent, no loud
fan noise):</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-noctua-fans.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-noctua-fans_hufa2be48cd91c5b51113bfeb4460bf154_1457999_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-noctua-fans_hufa2be48cd91c5b51113bfeb4460bf154_1457999_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-01-noctua-fans_hufa2be48cd91c5b51113bfeb4460bf154_1457999_600x0_resize_q75_box.jpg"
  alt="Noctua fans" title="Noctua fans"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>These fans are large (140mm), so they can spin on slow speeds and still be
effective.</p>
<p>The specific fan configuration I ended up with:</p>
<ul>
<li>1 Noctua NF-A14 PWM 140mm in the front, pulling air out of the case</li>
<li>1 Noctua NF-A14 PWM 140mm in the top, pulling air into the case</li>
<li>1 Noctua NF-A12x25 PWM 120mm in the back, pulling air into the case</li>
<li>1 Noctua NH-L12S CPU fan</li>
</ul>
<p>Note that this is most likely overkill: I can well imagine that I could turn off
one of these fans entirely without a noticeable effect on temperatures. But I
wanted to be on the safe side and have a lot of cooling capacity, as I don‚Äôt
know how hot the Intel network cards run in practice.</p>
<h3 id="fan-controller">Fan Controller</h3>
<p>The ASRock B550 Taichi <a href="https://www.techpowerup.com/review/asrock-b550-taichi/7.html">comes with a Nuvoton
NCT6683D-T</a> fan
controller.</p>
<p>Unfortunately, ASRock seems to have set the Customer ID register to 0 instead of
<code>CUSTOMER_ID_ASROCK</code>, so you need to load the <code>nct6683</code> Linux driver with its
<code>force</code> option.</p>
<p>Once the module is loaded, <code>lm-sensors</code> lists accurate PWM fan speeds, but the
temperature values are mislabeled and don‚Äôt quite match the temperatures I see
in the UEFI H/W Monitor:</p>
<pre tabindex="0"><code>nct6683-isa-0a20
Adapter: ISA adapter
fan1:              471 RPM  (min =    0 RPM)
fan2:                0 RPM  (min =    0 RPM)
fan3:                0 RPM  (min =    0 RPM)
fan4:                0 RPM  (min =    0 RPM)
fan5:                0 RPM  (min =    0 RPM)
fan6:                0 RPM  (min =    0 RPM)
fan7:                0 RPM  (min =    0 RPM)
Thermistor 14:     +45.5 C  (low  =  +0.0 C)
                            (high =  +0.0 C, hyst =  +0.0 C)
                            (crit =  +0.0 C)  sensor = thermistor
AMD TSI Addr 98h:  +40.0 C  (low  =  +0.0 C)
                            (high =  +0.0 C, hyst =  +0.0 C)
                            (crit =  +0.0 C)  sensor = AMD AMDSI
intrusion0:       OK
beep_enable:      disabled
</code></pre><p>At least with the <code>nct6683</code> Linux driver, there is no way to change the PWM fan
speed: the corresponding files in the <code>hwmon</code> interface are marked read-only.</p>
<p>At this point I accepted that I won‚Äôt be able to work with the fan controller
from Linux, and tried just configuring static fan control settings in the UEFI
setup.</p>
<p>But despite identical fan settings, one of my 140mm fans would end up turned
off. I‚Äôm not sure why ‚Äî is it an unclean PWM signal, or is there just a bug in
the fan controller?</p>
<p>Controlling the fans to reliably spin at a low speed is vital to reach goal 2
(low noise), so I looked around for third-party fan controllers and found the
<a href="https://www.corsair.com/eu/en/Categories/Products/Accessories-%7C-Parts/iCUE-CONTROLLERS/iCUE-Commander-PRO-Smart-RGB-Lighting-and-Fan-Speed-Controller/p/CL-9011110-WW">Corsair Commander
Pro</a>,
which <a href="https://blog.ktz.me/a-usb-fan-controller-that-now-works-under-linux/">a blog post explains is compatible with
Linux</a>.</p>
<h3 id="server-disk">Server Disk</h3>
<p>This part of the build is not router-related, but I figured if I have a fast
machine with a fast network connection, I could add a fast big disk to it and
retire my other server PC.</p>
<p>Specifically, I chose the Samsung 970 EVO Plus M.2 SSD with 2 TB of
capacity. This disk can <a href="https://www.tomshardware.com/reviews/samsung-970-evo-plus-ssd,5608.html">deliver 3500 MB/s of sequential read
throughput</a>,
which is more than the ‚âà3000 MB/s that a 25 Gbit/s link can handle.</p>
<h3 id="graphics-card">Graphics Card</h3>
<p>An important part of computer builds for me is making troubleshooting and
maintenance as easy as possible. In my current tech landscape, that translates
to connecting an HDMI monitor and a USB keyboard, for example to boot from a
different device, to enter the UEFI setup, or to look at Linux console messages.</p>
<p>Unfortunately, the Ryzen 5 5600X does not have integrated graphics, so to get
any graphics output, we need to install a graphics card. I chose the Zotac
GeForce GT 710 Zone Edition, because it was the cheapest available card (60 CHF)
that‚Äôs passively cooled.</p>
<p>An alternative to using a graphics card might be to use a PCIe IPMI card like
the <a href="https://www.asrockrack.com/general/productdetail.asp?Model=PAUL#Specifications">ASRock
PAUL</a>,
however these seem to be harder to find, and more expensive.</p>
<p>Longer-term, I think the best option would be to use the Ryzen 5 5600G with
integrated graphics, but that model only <a href="https://www.pcmag.com/news/amds-new-ryzen-5000-g-series-will-come-with-an-integrated-gpu">becomes available later this
year</a>.</p>
<h3 id="component-list">Component List</h3>
<p>I‚Äôm listing 2 different options here. Option A is what I built (router+server),
but Option B is a lot cheaper if you only want a router. Both options use the
same base components:</p>
<table>
<thead>
<tr>
<th>Price</th>
<th>Type</th>
<th>Article</th>
</tr>
</thead>
<tbody>
<tr>
<td>347 CHF</td>
<td>Network card</td>
<td><a href="https://www.fs.com/products/75603.html">FS.COM Intel XXV710, 2 √ó 25 Gbit/s (#75603)</a></td>
</tr>
<tr>
<td>329 CHF</td>
<td>Network card</td>
<td><a href="https://www.fs.com/products/75602.html">FS.COM Intel XL710, 4 √ó 10 Gbit/s (#75602)</a></td>
</tr>
<tr>
<td>314 CHF</td>
<td>CPU</td>
<td><a href="https://www.digitec.ch/de/s1/product/amd-ryzen-5-5600x-am4-370ghz-6-core-prozessor-13987919">Ryzen 5 5600X</a></td>
</tr>
<tr>
<td>290 CHF</td>
<td>Mainboard</td>
<td><a href="https://www.digitec.ch/de/s1/product/asrock-b550-taichi-am4-amd-b550-atx-mainboard-13348335">ASRock B550 Taichi</a></td>
</tr>
<tr>
<td>92 CHF</td>
<td>Case</td>
<td><a href="https://www.digitec.ch/de/s1/product/corsair-4000d-airflow-midi-tower-pc-gehaeuse-13552873">Corsair 4000D Airflow (Midi Tower)</a></td>
</tr>
<tr>
<td>67 CHF</td>
<td>Fan control</td>
<td><a href="https://www.digitec.ch/de/s1/product/corsair-commander-pro-extern-6x-luefter-kontroller-6332927">Corsair Commander Pro</a></td>
</tr>
<tr>
<td>65 CHF</td>
<td>Case fan</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nf-a14-pwm-140mm-1x-pc-luefter-657800">2 √ó Noctua NF-A14 PWM (140mm)</a></td>
</tr>
<tr>
<td>62 CHF</td>
<td>CPU fan</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nh-l12s-7cm-cpu-kuehler-6817433">Noctua NH-L12S</a></td>
</tr>
<tr>
<td>35 CHF</td>
<td>Case fan</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nf-a12x25-pwm-120mm-1x-pc-luefter-9161307">1 √ó Noctua NF-A12x25 PWM (120mm)</a></td>
</tr>
<tr>
<td>60 CHF</td>
<td>GPU</td>
<td><a href="https://www.digitec.ch/de/s1/product/zotac-geforce-gt-710-zone-edition-1gb-grafikkarte-7526609">Zotac GeForce GT 710 Zone Edition (1GB)</a></td>
</tr>
</tbody>
</table>
<p>Base total: 1590 CHF</p>
<p><strong>Option A: Server extension</strong>. Because I had some parts lying around, and because I
wanted to use my router for serving files (from large RAM cache/fast disk), I
went with the following parts:</p>
<table>
<thead>
<tr>
<th>Price</th>
<th>Type</th>
<th>Article</th>
</tr>
</thead>
<tbody>
<tr>
<td>309 CHF</td>
<td>Disk</td>
<td><a href="https://www.digitec.ch/de/s1/product/samsung-970-evo-plus-2000gb-m2-2280-ssd-10339167">Samsung 970 EVO Plus 2000GB, M.2 2280</a></td>
</tr>
<tr>
<td>439 CHF</td>
<td>RAM</td>
<td><a href="https://www.digitec.ch/de/s1/product/kingston-hyperx-predator-rgb-4x-16gb-ddr4-3600-dimm-288-ram-14062636">64GB HyperX Predator RAM (4x, 16GB, DDR4-3600, DIMM 288)</a></td>
</tr>
<tr>
<td>127 CHF</td>
<td>Power supply</td>
<td><a href="https://www.digitec.ch/de/s1/product/corsair-sf600-platinum-600w-pc-netzteil-9034178">Corsair SF600 Platinum (600W)</a></td>
</tr>
<tr>
<td>14 CHF</td>
<td>Power ext</td>
<td><a href="https://www.digitec.ch/de/s1/product/silverstone-atx-24-24pin-verlaengerung-30cm-modding-sleeving-3456447">Silverstone ATX 24-24Pin Extension (30cm)</a></td>
</tr>
<tr>
<td>10 CHF</td>
<td>Power ext</td>
<td><a href="https://www.digitec.ch/de/s1/product/silverstone-atx-extension-8-844pin-30cm-modding-sleeving-5808252">Silverstone ATX Extension 8-8(4+4)Pin (30cm)</a></td>
</tr>
</tbody>
</table>
<p>The Corsair SF600 power supply is not server-related, I just had it lying around. I‚Äôd
recommend going for the Corsair RM650x *2018* (which has longer cables) instead.</p>
<p>Server total: 2770 CHF</p>
<p><strong>Option B: Non-server (router only) alternative</strong>. If you‚Äôre <em>only</em> interested
in routing, you can opt for cheaper low-end disk and RAM, for example:</p>
<table>
<thead>
<tr>
<th>Price</th>
<th>Type</th>
<th>Article</th>
</tr>
</thead>
<tbody>
<tr>
<td>112 CHF</td>
<td>Power supply</td>
<td><a href="https://www.digitec.ch/de/s1/product/corsair-rm650x-2018-650w-pc-netzteil-8849945">Corsair RM650x *2018*</a></td>
</tr>
<tr>
<td>33 CHF</td>
<td>Disk</td>
<td><a href="https://www.digitec.ch/de/s1/product/kingston-a400-120gb-m2-2280-ssd-10628775">Kingston A400 120GB M.2 SSD</a></td>
</tr>
<tr>
<td>29 CHF</td>
<td>RAM</td>
<td><a href="https://www.digitec.ch/de/s1/product/crucial-ct4g4dfs8266-1x-4gb-ddr4-2666-dimm-288-ram-10447900">Crucial CT4G4DFS8266 4GB DDR4-2666 RAM</a></td>
</tr>
</tbody>
</table>
<p>Non-server total: 1764 CHF</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><p>I had the Noctua NH-L12S CPU fan lying around, so I re-used it.</p>
<p>Noctua <a href="https://www.golem.de/news/nh-p1-noctuas-passiver-cpu-kuehler-schafft-125-watt-2106-157334.html">recently released a passive CPU
cooler</a>,
which might be an interesting alternative.</p>
</div>
  </div>
</aside>

<h2 id="asrock-b550-taichi-mainboard-uefi-setup">ASRock B550 Taichi Mainboard UEFI Setup</h2>
<p>To enable PCIe Bifurcation for our two PCIe 3.0 x8 card setup:</p>
<ol>
<li>Set <code>Advanced &gt; AMD PBS &gt; PCIe/GFX Lanes Configuration</code><br>
to <code>x8x8</code>.</li>
</ol>
<p>To always turn on the PC after power is lost:</p>
<ol>
<li>Set <code>Advanced &gt; Onboard Devices Configuration &gt; Restore On AC Power Loss</code><br>
to <code>Power On</code>.</li>
</ol>
<p>To PXE boot (via UEFI) on the onboard ethernet port (management), but disable
slow option roms for PXE boot on the FS.COM network cards:</p>
<ol>
<li>Set <code>Boot &gt; Boot From Onboard LAN</code><br>
to <code>Enabled</code>.</li>
<li>Set <code>Boot &gt; CSM (Compatibility Support Module) &gt; Launch PXE OpROM Policy</code><br>
to <code>UEFI only</code>.</li>
</ol>
<h2 id="fan-controller-setup">Fan Controller Setup</h2>
<p>The <a href="https://www.corsair.com/eu/en/Categories/Products/Accessories-%7C-Parts/iCUE-CONTROLLERS/iCUE-Commander-PRO-Smart-RGB-Lighting-and-Fan-Speed-Controller/p/CL-9011110-WW">Corsair Commander Pro</a> fan controller is well-supported on Linux.</p>
<p>After enabling the Linux kernel option <code>CONFIG_SENSORS_CORSAIR_CPRO</code>, the device
shows up in the <code>hwmon</code> subsystem.</p>
<p>You can completely spin up (100% PWM) or turn off (0% PWM) a fan like so:</p>
<pre tabindex="0"><code># echo 255 &gt; /sys/class/hwmon/hwmon3/pwm1
# echo 0 &gt; /sys/class/hwmon/hwmon3/pwm1
</code></pre><p>I run my fans at 13% PWM, which translates to about 226 rpm:</p>
<pre tabindex="0"><code># echo 33 &gt; /sys/class/hwmon/hwmon3/pwm1
# cat /sys/class/hwmon/hwmon3/fan1_input
226
</code></pre><p>Conveniently, the Corsair Commander Pro stores your settings even when power is
lost. So you don‚Äôt even need to run a permanent fan control process, a one-off
adjustment might be sufficient.</p>
<h2 id="power-usage">Power Usage</h2>
<p>The PC consumes about 48W of power when idle (only management network connected)
by default without further tuning. Each extra network link increases power usage
by ‚âà1W:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-11-power-network-link.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-11-power-network-link_hu6de13347ba7e4b65728687062274fcb9_385234_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-11-power-network-link_hu6de13347ba7e4b65728687062274fcb9_385234_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-11-power-network-link_hu6de13347ba7e4b65728687062274fcb9_385234_600x0_resize_q75_box.jpg"
  alt="graph showing power consumption when enabling network links" title="graph showing power consumption when enabling network links"
  width="600"
  height="370"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Enabling all <a href="https://wiki.gentoo.org/wiki/Ryzen#Kernel">Ryzen-related options</a>
in my Linux kernel and switching to the powersave CPU frequency governor lowers
power usage by ‚âà1W.</p>
<p>On some mainboards, you might need to <a href="https://twitter.com/falcon3754/status/1403102789367119876">force-enable Global
C-States</a> to save
power. Not on the B550 Taichi, though.</p>
<p>I tried undervolting the CPU, but that didn‚Äôt even make ‚âà1W of difference in
power usage. Potentially making my setup unreliable is not worth that little
power saving to me.</p>
<p>I measured these values using a <a href="https://www.conrad.ch/de/p/homematic-hm-es-pmsw1-pl-dn-r5-funk-schaltaktor-1-fach-funk-steckdose-2300-w-2507749.html">Homematic
HM-ES-PMSw1-Pl-DN-R5</a>
I had lying around.</p>
<h2 id="performance">Performance</h2>
<p>Goal 1 is to saturate 25 Gbit/s, for example using two 10 Gbit/s downloads. I‚Äôm
talking about large bulk transfers here, not many small transfers.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">If you‚Äôre interested in the ‚Äúmany small packets‚Äù scenario, check out <a href="https://netoptimizer.blogspot.com/2014/05/the-calculations-10gbits-wirespeed.html">‚ÄúThe
calculations: 10Gbit/s
wirespeed‚Äù</a>
for a good intro, and <a href="https://twitter.com/fragstone/status/1401807613642280963">Thomas Fragstein‚Äôs benchmark tool
recommendations</a>. I
haven‚Äôt run any such tests yet.</div>
  </div>
</aside>

<p>To get a feel for the performance/headroom of the router build, I ran 3 different tests.</p>
<h3 id="test-a-10-gbits-bridging-throughput">Test A: 10 Gbit/s bridging throughput</h3>
<p>For this test, I connected 2 PCs to the router‚Äôs XL710 network card and used <a href="https://manpages.debian.org/iperf3.1"><code>iperf3(1)</code></a>
 to generate a 10 Gbit/s TCP stream between the
2 PCs. The router doesn‚Äôt need to modify the packets in this scenario, only
forward them, so this should be the lightest load scenario.</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-06-bridging.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-06-bridging_hub0cd44ce68a3ab7a30e115765c391440_953670_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-06-bridging_hub0cd44ce68a3ab7a30e115765c391440_953670_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-06-bridging_hub0cd44ce68a3ab7a30e115765c391440_953670_600x0_resize_q75_box.jpg"
  alt="bridging throughput" title="bridging throughput"
  width="600"
  height="315"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="test-b-10-gbits-nat-throughput">Test B: 10 Gbit/s NAT throughput</h3>
<p>In this test, the 2 PCs were connected such that the router performs <a href="https://en.wikipedia.org/wiki/Network_address_translation">Network
Address Translation
(NAT)</a>, which is
required for downloads from the internet via IPv4.</p>
<p>This scenario is slightly more involved, as the router needs to modify
packets. But, as we can see below, a 10 Gbit/s NAT stream consumes barely more
resources than 10 Gbit/s bridging:</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-12-nat.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-12-nat_hu35fd080505f1a7e499871d8e450fe11e_573889_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-12-nat_hu35fd080505f1a7e499871d8e450fe11e_573889_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-12-nat_hu35fd080505f1a7e499871d8e450fe11e_573889_600x0_resize_q75_box.jpg"
  alt="NAT throughput" title="NAT throughput"
  width="600"
  height="250"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="test-c-4--10-gbits-tcp-streams">Test C: 4 √ó 10 Gbit/s TCP streams</h3>
<p>In this test, I wanted to max out the XL710 network card, so I connected 4 PCs
and started an <a href="https://manpages.debian.org/iperf3.1"><code>iperf3(1)</code></a>
 benchmark between each PC
and the router itself, simultaneously.</p>
<p>This scenario consumes about 16% CPU, meaning we‚Äôll most likely have plenty of
headroom even when all ports are maxed out!</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-14-four.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-14-four_hu8fa147dd23d5c3ee204bf85eaa69eccf_646280_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-14-four_hu8fa147dd23d5c3ee204bf85eaa69eccf_646280_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-06-14-four_hu8fa147dd23d5c3ee204bf85eaa69eccf_646280_600x0_resize_q75_box.jpg"
  alt="four 10 Gbit/s streams" title="four 10 Gbit/s streams"
  width="600"
  height="292"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Tip: make sure to enable the <code>CONFIG_IRQ_TIME_ACCOUNTING</code> Linux kernel option to
<a href="https://tanelpoder.com/posts/linux-hiding-interrupt-cpu-usage/">include IRQ handlers in CPU usage
numbers</a> for
accurate measurements.</p>
<h2 id="alternatives-considered">Alternatives considered</h2>
<p>The passively-cooled SuperServer E302-9D comes with 2 SFP+ ports (10 Gbit/s). It
even comes with 2 PCIe 3.0 x8 capable slots. Unfortunately it seems impossible
to currently buy this machine, at least in Switzerland.</p>
<p>You can find a few more suggestions in the replies of <a href="https://twitter.com/zekjur/status/1361414105211437056">this Twitter
thread</a>. Most are either
unavailable, require a lot more DIY work (e.g. a custom case), or don‚Äôt support
25 Gbit/s.</p>
<h2 id="router-software-router7-porting">Router software: router7 porting</h2>
<p>I wrote <a href="https://router7.org/">router7</a>, my own small home internet router
software in Go, back in 2018, and have been using it ever since.</p>
<p>I don‚Äôt have time to support any users, so I don‚Äôt recommend anyone else use
router7, unless the project really excites you, and the lack of support doesn‚Äôt
bother you! Instead, you might be better served with a more established and
supported router software option. Popular options include
<a href="https://en.wikipedia.org/wiki/OPNsense">OPNsense</a> or
<a href="https://en.wikipedia.org/wiki/OpenWrt">OpenWrt</a>. See also Wikipedia‚Äôs <a href="https://en.wikipedia.org/wiki/List_of_router_and_firewall_distributions">List of
router and firewall
distributions</a>.</p>
<p>To make router7 work for this 25 Gbit/s router PC build, I had to make a few
adjustments.</p>
<p>Because we are using UEFI network boot instead of BIOS network boot, I first had
to make the PXE boot implementation in router7‚Äôs installer <a href="https://github.com/rtr7/tools/commits/00be57a557a5fb2bf8958fbc1417f57ab17fc54b">work with UEFI PXE
boot</a>.</p>
<p>I then enabled a few additional <a href="https://github.com/rtr7/kernel/commits/8694ece47fb07ffeea8a96dc48eb8faa3969250a">kernel options for network and storage
drivers</a>
in router7‚Äôs kernel.</p>
<p>To router7‚Äôs control plane code, I <a href="https://github.com/rtr7/router7/commits/b88ddd41c377087cc4b6d1fe6c7a5550399a730c">added bridge network device
configuration</a>,
which in my previous 2-port router setup was not needed.</p>
<p>During development, I compiled a few Linux programs statically or copied them
with their dependencies (‚Üí <a href="https://gokrazy.org/prototyping/">gokrazy
prototyping</a>) to run them on router7, such as
<a href="https://manpages.debian.org/sensors.1"><code>sensors(1)</code></a>
, <a href="https://manpages.debian.org/ethtool.8"><code>ethtool(8)</code></a>
,
as well as iproute2‚Äôs <a href="https://manpages.debian.org/ip.8"><code>ip(8)</code></a>
 and <a href="https://manpages.debian.org/bridge.8"><code>bridge(8)</code></a>
 implementation.</p>
<h2 id="next-steps">Next Steps</h2>
<p>Based on my tests, the hardware I selected seems to deliver enough performance
to use it for distributing a 25 Gbit/s upstream link across multiple 10 Gbit/s
devices.</p>
<p>I won‚Äôt know for sure until the <a href="https://twitter.com/fiber7_ch">fiber7</a> Point Of
Presence (POP, German Anschlusszentrale) close to my home is upgraded to support
25 Gbit/s ‚ÄúFiber7-X2‚Äù connections. As I mentioned, unfortunately <a href="https://twitter.com/init7/status/1403287499175235584">the upgrade
plan is delayed</a> due to
the component shortage. I‚Äôll keep you posted!</p>
<h2 id="other-builds">Other Builds</h2>
<p>In case my build doesn‚Äôt exactly match your requirements, perhaps these others
help inspire you:</p>
<ul>
<li><a href="https://medium.com/@sdier/new-internet-service-calls-for-a-new-router-4dbebbdc6dbd">Scott Dier‚Äôs Intel NUC 9 Pro build</a></li>
</ul>
<h2 id="appendix-a-dpdk-test">Appendix A: DPDK test</h2>
<p><a href="https://twitter.com/ipngnetworks">Pim</a> ran a <a href="https://www.dpdk.org/">DPDK</a>
based loadtester called <a href="https://trex-tgn.cisco.com/">T-Rex</a> on this
machine. Here‚Äôs his summary of the test:</p>
<p>For DPDK, this hardware does 4x10G at 64b frames. It does not do 6x10G as it
tops out at 62Mpps using 4 cores (of 15.5Mpps per core).</p>
<p>I couldn&rsquo;t test 25G symmetric [because we lacked a 25G DAC cable], but
extrapolating from the numbers, 3 CPUs source and sink ~24.6Gbit per core, so
we&rsquo;d probably make it, leaving 1 core for OS and 2 cores for controlplane.</p>
<p>If the machine had a 12 core Ryzen, it would saturate all NICs with room to
spare. So that&rsquo;s what I&rsquo;ll end up buying :)</p>















<a href="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-07-13-dpdk-test.png"><img
  srcset="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-07-13-dpdk-test_hu37b3af6bd791c24945ccf8bd92c24adc_280211_1200x0_resize_box_3.png 2x,https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-07-13-dpdk-test_hu37b3af6bd791c24945ccf8bd92c24adc_280211_1800x0_resize_box_3.png 3x"
  src="https://michael.stapelberg.ch/posts/2021-07-10-linux-25gbit-internet-router-pc-build/2021-07-13-dpdk-test_hu37b3af6bd791c24945ccf8bd92c24adc_280211_600x0_resize_box_3.png"
  alt="DPDK test" title="DPDK test"
  width="600"
  height="447"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Laptop review: ThinkPad X1 Extreme (Gen 2)]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/"/>
    <id>https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/</id>
    <published>2021-06-05T20:43:00+02:00</published>
    <content type="html"><![CDATA[














<a href="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/2021-06-02-thinkpad-x1-extreme.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/2021-06-02-thinkpad-x1-extreme_hu855bbe0a9c47ac557e5b09db74fa3b06_2918849_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/2021-06-02-thinkpad-x1-extreme_hu855bbe0a9c47ac557e5b09db74fa3b06_2918849_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/2021-06-02-thinkpad-x1-extreme_hu855bbe0a9c47ac557e5b09db74fa3b06_2918849_600x0_resize_q75_box.jpg"
  alt="ThinkPad X1 Extreme Gen 2, pear for scale" title="ThinkPad X1 Extreme Gen 2, pear for scale"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>For many of my school and university years, I used and liked my ThinkPad X200
ultraportable laptop. But now that these years are long gone, I realized my
use-case for laptops had changed: instead of carrying my laptop with me every
day, I am now only bringing it on occasion, for example when I travel to
conferences, visit friends, or do volunteer work.</p>
<p>After the ThinkPad X200, I used a few different laptops:</p>
<ul>
<li>MacBook Pro 13&quot; Retina, bought for its screen</li>
<li>ThinkPad X1 Carbon, which newly introduced a hi-dpi screen to ThinkPads</li>
<li>Dell XPS 9360, for a change, to try a device that ships with Linux</li>
</ul>
<p>With each of these devices, I have felt limited by the lack of connectors and
slim compute power that comes with the Ultrabook brand, even after years of
technical progress.</p>
<p>More compute power is nice to be able to work on projects with larger data sets,
for example debiman (scanning and converting all manpages in Debian), or distri
(building Linux packages).</p>
<p>More peripheral options such as USB ports are nice when connecting a keyboard,
trackball, USB-to-serial adapter, etc., to work on a micro controller or
Raspberry Pi project, for example.</p>
<p>So, I was ready to switch from the heaviest Ultrabooks to the lightest of the
‚Äúmobile workstation‚Äù category, when I stumbled upon Lenovo‚Äôs ThinkPad X1 Extreme
(Gen 2), and it piqued my curiosity.</p>
<h2 id="peripherals">Peripherals</h2>
<p>Let me start by going into the key peripherals of a laptop: keyboard, touchpad
and screen. I will talk about these independently from the remaining hardware
because they define the experience of using the computer.</p>
<h3 id="keyboard">Keyboard</h3>
<p>After having used the Dell XPS 9360 for a few years, I can confidently say that
the keyboard of the ThinkPads is definitely much better, and in a noticeable
way.</p>
<p>It‚Äôs not that the Dell keyboards are <em>bad</em>. But comparing the Dell and ThinkPad
side-by-side makes it really clear that the ThinkPad keyboards are the best
notebook keyboards.</p>
<p>On the ThinkPad keyboard, every key press lands exactly as I imagine. Never do I
need to hit a key twice because I didn‚Äôt press it just-right, and never do I
notice additional ghost key presses.</p>
<p>Even though I connect my external Kinesis Advantage keyboard when doing longer
stretches of work, the quality of the built-in keyboard matters: a good keyboard
enables using the laptop on the couch.</p>
<h3 id="touchpad">Touchpad</h3>
<p>Unfortunately, while the keyboard is great, I can‚Äôt say the same about the
touchpad. I mean, it‚Äôs not terrible, but it‚Äôs also not good by any stretch.</p>
<p>This seems to be the status quo with PC touchpads for decades. It really blows
my mind that Apple‚Äôs touchpads are consistently so much better!</p>
<p>My only hope is that <a href="https://github.com/sponsors/gitclear">Bill Harding
(GitClear)</a>, who is working on improving
the Linux touchpad experience, will eventually find a magic software tweak or
something‚Ä¶</p>
<p>As <a href="https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Extreme_(Gen_2)#Touchpad">mentioned on the
ArchWiki</a>,
I also had to adjust the sensitivity like so:</p>
<pre tabindex="0"><code>% xinput set-prop 'SynPS/2 Synaptics TouchPad' 'libinput Accel Speed' 0.5
</code></pre><h3 id="display">Display</h3>
<p>I have high demands regarding displays: since 2013, every device of mine has a
hi-dpi display.</p>
<p>The industry hasn‚Äôt improved displays across the board as fast as I‚Äôd like, so
non-hi-dpi displays are still quite common. The silver lining is that it makes
laptop selection a little easier for me: anything without a decent display I can
discard right away.</p>
<p>I‚Äôm glad to report that the 4K display in the ThinkPad X1 Extreme with its
3840x2160 pixels is sharp, bright, and generally has good viewing angles.</p>
<p>It‚Äôs also a touchscreen, which I don‚Äôt strictly need, but it‚Äôs nice to use it
from time to time.</p>
<p>I use the display in 200% scaling mode, i.e. I set <code>Xft.dpi: 192</code>. See also
<a href="https://wiki.archlinux.org/index.php/HiDPI">HiDPI in ArchWiki</a>.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Tip</strong>: In case your brightness control keys don‚Äôt work, check if the <a href="https://gitlab.freedesktop.org/drm/intel/issues/510">required
patches</a> have not been
applied in your environment yet.</div>
  </div>
</aside>

<h2 id="hardware">Hardware</h2>
<p>Spec-wise, the ThinkPad X1 Extreme is a beast!</p>















<a href="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/specs.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/specs_hub98e688078adf6db327505acb00135c2_814598_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/specs_hub98e688078adf6db327505acb00135c2_814598_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-06-05-laptop-review-lenovo-thinkpad-x1-extreme-gen2/specs_hub98e688078adf6db327505acb00135c2_814598_600x0_resize_q75_box.jpg"
  alt="ThinkPad X1 Extreme Specs" title="ThinkPad X1 Extreme Specs"
  width="600"
  height="475"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>The build quality seems very robust to me.</p>
<p>Another big plus of the ThinkPad series over other laptop series is the
availability of the official Hardware Maintenance Manual: you can put ‚ÄúThinkPad
X1 Extreme Gen 2 Hardware Maintenance Manual‚Äù into Google and will find
<a href="https://download.lenovo.com/pccbbs/mobiles_pdf/p1_gen2_x1extreme_hmm_v1.pdf"><code>p1_gen2_x1extreme_hmm_v1.pdf</code></a>
as the first hit. This manual describes in detail how to repair or upgrade your
device if you want to (or have to) do it yourself.</p>
<h3 id="wifi">WiFi</h3>
<p>The built-in Intel AX200 WiFi interface works fine, provided you have a
new-enough <code>linux-firmware</code> package and kernel version installed.</p>
<p>I had trouble with Linux 5.6.0, and Linux 5.6.5 fixed it. Luckily, at the time
of writing, Linux 5.11 is the most recent release, so most distributions should
be recent enough for things to just work.</p>
<p>The WiFi card reaches almost the same download speed as the most modern WiFi
device I can test: a MacBook Air M1. Both are connected to my <a href="https://unifi-hd.ui.com/">UniFi
UAP-AC-HD</a> access point.</p>
<table>
<thead>
<tr>
<th>Laptop</th>
<th>Download</th>
<th>Upload</th>
</tr>
</thead>
<tbody>
<tr>
<td>ThinkPad X1 Extreme</td>
<td>500 Mbit/s</td>
<td>150 Mbit/s</td>
</tr>
<tr>
<td>MacBook Air M1</td>
<td>600 Mbit/s</td>
<td>500 Mbit/s</td>
</tr>
</tbody>
</table>
<p>I‚Äôm not sure why the upload speed is so low in comparison.</p>
<h3 id="gpu">GPU</h3>
<p>The GPU in this machine is by far the most troublesome bit of hardware.</p>
<p>I had hoped that after many years of laptops containing Intel/nVidia hybrid
graphics, this setup would largely work, but was disappointed.</p>
<p>Both the proprietary nVidia driver and the <code>nouveau</code> driver would not work
reliably for me. I ran into kernel error messages and hard-freezes, with even
SSH sessions to the machine breaking.</p>
<p>In the end, I blacklisted the <code>nouveau</code> driver to use Intel graphics only:</p>
<pre tabindex="0"><code>% echo blacklist nouveau | sudo tee /etc/modprobe.d/blacklist.conf 
</code></pre><p>Without the nVidia driver, the GPU will not go into powersave mode, so I remove
it from the PCI bus entirely to save power:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007020">#!/bin/zsh
</span><span style="color:#007020"></span>
sudo tee /sys/bus/pci/devices/0000<span style="color:#4070a0;font-weight:bold">\:</span>01<span style="color:#4070a0;font-weight:bold">\:</span>00.0/remove <span style="color:#666">&lt;&lt;&lt;</span><span style="color:#40a070">1</span>
sudo tee /sys/bus/pci/devices/0000<span style="color:#4070a0;font-weight:bold">\:</span>01<span style="color:#4070a0;font-weight:bold">\:</span>00.1/remove <span style="color:#666">&lt;&lt;&lt;</span><span style="color:#40a070">1</span>
</code></pre></div><p>You can only re-awaken the GPU with a reboot.</p>
<p>Obviously this isn‚Äôt a great setup ‚Äî I would prefer to be able to actually use
the GPU. If you have any tips or a better experience, please let me know.</p>
<p>Also note that the HDMI port will be unusable if you go this route, as the HDMI
port is connected to the nVidia GPU only.</p>
<h3 id="battery-life">Battery life</h3>
<p>The 80 Wh battery lasts between 5 to 6 hours for me, without any extra power
saving tuning beyond what the Linux distribution Fedora 33 comes with by
default.</p>
<p>This is good enough for using the laptop away from a power socket from time to
time, which matches my expectation for this kind of mobile workstation.</p>
<h2 id="software-support">Software support</h2>
<p>Linux support is generally good on this machine! Yes, I provide a few pointers
in this article regarding problems, patches and old software versions. But, if
you use a newer Linux distribution, all of these fixes are included and things
just work out of the box. I tested with Fedora 33.</p>
<p>For a few months, I was using this laptop exclusively with my research Linux
distribution <a href="https://distr1.org/">distri</a>, so even if you just track upstream
software closely, the machine works well.</p>
<h3 id="firmware-updates">Firmware updates</h3>
<p>Lenovo partnered with the <a href="https://fwupd.org/">Linux Vendor Firmware Service Project
(LVFS)</a>, which means that through <code>fwupd</code>, ThinkPad laptops
such as this X1 Extreme can easily receive firmware updates!</p>
<p>This is a huge improvement in comparison to earlier ThinkPad models, where you
had to jump through hoops with Windows-only software, or CD images that you
needed to boot just right.</p>
<p>If your laptop has a very old firmware version (before <code>1.30</code>), you might be
affected by the <a href="https://wiki.archlinux.org/index.php/Lenovo_ThinkPad_X1_Extreme_(Gen_2)#Skipping_keystrokes">skipping
keystrokes</a>
issues. You can check using the always-handy <a href="https://manpages.debian.org/lshw.1"><code>lshw(1)</code></a>

tool.</p>
<h2 id="performance">Performance</h2>
<p>The specific configuration of my ThinkPad is:</p>
<table>
<thead>
<tr>
<th></th>
<th>ThinkPad X1 Extreme Spec (2020)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>Intel Core i7-9750H CPU @ 2.60GHz</td>
</tr>
<tr>
<td>RAM</td>
<td>2 √ó 32 GB Samsung M471A4G43MB1-CTD</td>
</tr>
<tr>
<td>Disk</td>
<td>2 √ó SAMSUNG MZVLB2T0HALB-000L7 NVMe disk</td>
</tr>
</tbody>
</table>
<p>You can google for CPU benchmarks and comparisons yourself, and those likely are
more scientific and carefully done than I have time for.</p>
<p>What I can provide however, is a comparison of working on one of my projects on
the ThinkPad vs. on my workstation, an Intel Core i9-9900K that I bought in
2018:</p>
<table>
<thead>
<tr>
<th></th>
<th>Workstation Spec (2018)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz</td>
</tr>
<tr>
<td>RAM</td>
<td>4 √ó Corsair CMK32GX4M2A2666C16</td>
</tr>
<tr>
<td>Disk</td>
<td>Corsair Force MP600 M.2 NVMe disk</td>
</tr>
</tbody>
</table>
<p>Specifically, I am comparing how long my manpage static archive generator
<a href="https://github.com/Debian/debiman/">debiman</a> takes to analyze and render all
manpages in Debian unstable, using the following command:</p>
<pre tabindex="0"><code>ulimit -n 8192; time ~/go/bin/debiman \
  -keyring=/usr/share/keyrings/debian-archive-keyring.gpg \
  -sync_codenames=, \
  -sync_suites=unstable \
  -serving_dir=/srv/man/benchmark \
  -inject_assets=~/go/src/github.com/Debian/debiman/debian-assets \
  -concurrency_render=20 \
  -alternatives_dir=~/go/src/github.com/Debian/debiman/piuparts
</code></pre><p>On both machines, I ensured that:</p>
<ol>
<li>The CPU performance governor was set to <code>performance</code></li>
<li>A warm <code>apt-cacher-ng</code> cache was present, i.e. network download was not part of the test.</li>
<li>Linux kernel caches were dropped using <code>echo 3 | sudo tee /proc/sys/vm/drop_caches</code></li>
<li>I was using <a href="https://github.com/Debian/debiman/tree/f78c160f05c1f4d25c7836a6ca9198019947c1b5">debiman git revision <code>f78c160</code></a></li>
</ol>
<p>Here are the results:</p>
<table>
<thead>
<tr>
<th>Machine</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>i9-9900K Workstation</td>
<td>4:57,10 (100%)</td>
</tr>
<tr>
<td>ThinkPad X1 Extreme (Gen 2)</td>
<td>7:19,56 (147%)</td>
</tr>
</tbody>
</table>
<p>This reaffirms my impression that even high-end laptop hardware just cannot beat
a workstation setup (which has more space and better thermals), but it comes
close enough to be useful.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Positives:</p>
<ul>
<li>
<p>The ergonomics of the device really are great. It is a pleasure to type on a
first-class, full-size ThinkPad keyboard. The screen has good quality and a
high resolution.</p>
</li>
<li>
<p>Performance-wise, this machine can almost replace a proper workstation.</p>
</li>
</ul>
<p>Negatives are:</p>
<ul>
<li>the mediocre battery life</li>
<li>an annoyingly loud fan that spins up too frequently</li>
<li>poor software/driver support for hybrid nVidia GPUs.</li>
</ul>
<p>Notably, all of these could be improved by better power saving, so perhaps it‚Äôs
just a matter of time until Linux kernel developers land some improvements‚Ä¶? :)</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[How I configured and then promptly returned a MikroTik CCR2004 router for Fiber7]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/"/>
    <id>https://michael.stapelberg.ch/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/</id>
    <published>2021-05-28T14:57:00+02:00</published>
    <content type="html"><![CDATA[<p>init7 recently announced that with their <a href="https://www.init7.net/en/internet/fiber7/">FTTH fiber offering
Fiber7</a>, they will now sell and
connect you with 25 Gbit/s (Fiber7-X2) or 10 Gbit/s (Fiber7-X) fiber optics, if
you want more than 1 Gbit/s.</p>
<p>This is possible thanks to the upgrade of their network infrastructure as part
of their ‚Äúlifecycle management‚Äù, meaning the old networking gear was declared as
end-of-life. The new networking gear supports not only SFP+ modules (10 Gbit/s),
but also SFP28 modules (25 Gbit/s).</p>
<p>Availability depends on the <a href="https://www.init7.net/en/infrastructure/fiber7-pops/">POP (Point Of Presence, German ¬´Anschlusszentrale¬ª)
you‚Äôre connected to</a>. My
POP is planned to be upgraded in September.</p>
<p>Nevertheless, I wanted to already prepare my end of the connection, and ordered
the only router that <a href="https://www.init7.net/en/internet/hardware/">init7 currently lists as compatible with
Fiber7-X/X2</a>: the MikroTik
CCR2004-1G-12S+2XS.</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/mikrotik-ccr2004.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/mikrotik-ccr2004_hu855bbe0a9c47ac557e5b09db74fa3b06_1283584_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/mikrotik-ccr2004_hu855bbe0a9c47ac557e5b09db74fa3b06_1283584_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-28-configured-and-returned-mikrotik-ccr2004-for-fiber7/mikrotik-ccr2004_hu855bbe0a9c47ac557e5b09db74fa3b06_1283584_600x0_resize_q75_box.jpg"
  alt="MikroTik CCR2004-1G-12S&#43;2XS" title="MikroTik CCR2004-1G-12S&#43;2XS"
  width="600"
  height="347"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>The rest of this article walks through what I needed to configure (a lot,
compared to Ubiquiti or OpenWRT) in the hope that it helps other MikroTik users,
and then ends in <a href="#returned">Why I returned it</a>.</p>
<h2 id="configuration">Configuration</h2>
<p>Connect an Ethernet cable to the management port on the MikroTik and:</p>
<ol>
<li>log into the system using <code>ssh admin@192.168.88.1</code></li>
<li>point a web browser to ‚ÄúWebfig‚Äù at http://192.168.88.1/ (no login required)</li>
</ol>
<h2 id="update-firmware">Update firmware</h2>
<p>Update the CCR2004 to the latest firmware version. At the time of writing, the
Long-term RouterOS track is <a href="https://mikrotik.com/download">at version 6.47.9</a>
for the CCR2004 (ARM64):</p>
<ol>
<li>Use <code>/system package print</code> to display the current version.</li>
<li>Upload <code>routeros-arm64-6.47.9.npk</code> using Webfig.</li>
<li><code>/system reboot</code> and verify that <code>/system package print</code> shows <code>6.47.9</code> now.</li>
</ol>
<h2 id="set-up-auth">Set up auth</h2>
<p>Set a password to prevent others from logging into the router:</p>
<pre tabindex="0"><code>/user set admin password=secret
</code></pre><p>Additionally, you can enable passwordless SSH key login, if you
want.</p>
<ol>
<li>
<p>Create an RSA key, because <a href="https://forum.mikrotik.com/viewtopic.php?t=109143">ed25519 keys are not
supported</a>:</p>
<pre tabindex="0"><code>% ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key: /home/michael/.ssh/id_mikrotik
</code></pre></li>
<li>
<p>Upload the <code>id_mikrotik.pub</code> file in Webfig</p>
</li>
<li>
<p>Import the SSH public key for the <code>admin</code> user:</p>
<pre tabindex="0"><code>/user ssh-keys import user=admin public-key-file=id_mikrotik.pub
</code></pre></li>
</ol>
<h2 id="lock-down-the-router">Lock down the router</h2>
<ol>
<li>
<p><a href="https://help.mikrotik.com/docs/display/ROS/Webfig#Webfig-EnableHTTPS">Enable HTTPS in Webfig</a>.</p>
</li>
<li>
<p>Disable all remote access except for SSH and HTTPS:</p>
<pre tabindex="0"><code>/ip service disable telnet,ftp,www,api,api-ssl,winbox
</code></pre></li>
<li>
<p>Follow <a href="https://wiki.mikrotik.com/wiki/Manual:Securing_Your_Router#Neighbor_Discovery">MikroTik Securing Your
Router</a>
recommendations:</p>
<pre tabindex="0"><code>/tool mac-server set allowed-interface-list=none
/tool mac-server mac-winbox set allowed-interface-list=none
/tool mac-server ping set enabled=no
/tool bandwidth-server set enabled=no
/ip ssh set strong-crypto=yes
/ip neighbor discovery-settings set discover-interface-list=none
</code></pre></li>
</ol>
<h2 id="enable-dhcpv6-client">Enable DHCPv6 Client</h2>
<p>For some reason, you need to explicitly enable IPv6 in 2021:</p>
<pre tabindex="0"><code>/system package enable ipv6
/system reboot
</code></pre><p>MikroTik says this is a precaution so that users don‚Äôt end up with default-open
firewall settings for IPv6. But then why don‚Äôt they just add some default
firewall rules?!</p>
<p>Anyway, to configure and immediately enable the DHCPv6 client, use:</p>
<pre tabindex="0"><code>/ipv6 dhcp-client add pool-name=fiber7 pool-prefix-length=64 interface=sfp28-1 add-default-route=yes use-peer-dns=no request=address,prefix
</code></pre><h3 id="modify-the-ipv6-duid">Modify the IPv6 DUID</h3>
<p>Unfortunately, MikroTik does not offer any user interface to set the IPv6 DUID,
which I need to configure to obtain my static IPv6 network prefix from my
provider‚Äôs DHCPv6 server.</p>
<p>Luckily, the DUID is included in backup files, so we can edit it and restore
from backup:</p>
<ol>
<li>
<p>Run <code>/system backup save</code></p>
</li>
<li>
<p>Download the backup file in Webfig by navigating to Files ‚Üí Backup ‚Üí Download.</p>
</li>
<li>
<p>Convert the backup file to hex in textual form, edit the DUID and convert it back to binary:</p>
<pre tabindex="0"><code>% xxd MikroTik-19700102-0111.backup MikroTik-19700102-0111.backup.hex

% emacs MikroTik-19700102-0111.backup.hex
# Search for ‚Äúdhcp/duid‚Äù in the file and edit accordingly:
# got:  00030001085531dfa69e

% xxd -r MikroTik-19700102-0111.backup.hex MikroTik-19700102-0111-patched.backup
</code></pre></li>
<li>
<p>Upload the file in Webfig, then restore the backup:</p>
<p><code>/system backup load name=MikroTik-19700102-0111-patched.backup</code></p>
</li>
</ol>
<h2 id="enable-ipv6-router-advertisements">Enable IPv6 Router Advertisements</h2>
<p>To make the router assign an IPv6 address from the obtained pool for itself, and
then send IPv6 Router Advertisements to the network, set:</p>
<pre tabindex="0"><code>/ipv6 address add address=::1 from-pool=fiber7 interface=bridge1
/ipv6 nd add interface=bridge1 managed-address-configuration=yes other-configuration=yes
</code></pre><h2 id="enable-dhcpv4-client">Enable DHCPv4 Client</h2>
<p>To configure and immediately enable the <a href="https://wiki.mikrotik.com/wiki/Manual:IP/DHCP_Client">DHCPv4
client</a> on the upstream
port, use:</p>
<pre tabindex="0"><code>/ip dhcp-client add interface=sfp28-1 disabled=no
</code></pre><p>I also changed the MAC address to match my old router‚Äôs address, just to take
maximum precaution to avoid any Port Security related issues with my provider‚Äôs
DHCP server:</p>
<pre tabindex="0"><code>/interface ethernet set sfp28-1 mac-address=00:0d:fa:4c:0c:31
</code></pre><h2 id="enable-dns-server">Enable DNS Server</h2>
<p>By default, only the MikroTik itself can send DNS queries. Enable access for
network clients:</p>
<pre tabindex="0"><code>/ip dns set allow-remote-requests=yes
</code></pre><h2 id="enable-dhcpv4-server">Enable DHCPv4 Server</h2>
<p>First, let‚Äôs bundle all SFP+ ports into a single bridge interface:</p>
<pre tabindex="0"><code>/interface bridge add name=bridge1
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus1 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus2 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus3 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus4 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus5 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus6 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus7 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus8 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus9 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus10 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus11 hw=yes
/interface bridge port add bridge=bridge1 interface=sfp-sfpplus12 hw=yes
</code></pre><p>This means we‚Äôll use the device like a big switch with routing between the
switch and the uplink port <code>sfp28-1</code>.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Note</strong>: I don‚Äôt know if this configuration reduces performance. I find
MikroTik‚Äôs documentation regarding hardware offloading and performance not the
clearest. Then again, the CCR2004 has no hardware offloading whatsoever (?) <a href="https://forum.mikrotik.com/viewtopic.php?t=173065">as
per a forum post</a>.</div>
  </div>
</aside>

<p>To configure the DHCPv4 Server, configure an IP address, then start the setup
wizard:</p>
<pre tabindex="0"><code>/ip address add address=10.0.0.1/24 interface=bridge1
/ip dhcp-server setup
Select interface to run DHCP server on

dhcp server interface: bridge1
Select network for DHCP addresses

dhcp address space: 10.0.0.0/24
Select gateway for given network

gateway for dhcp network: 10.0.0.1
Select pool of ip addresses given out by DHCP server

addresses to give out: 10.0.0.2-10.0.0.240
Select DNS servers

dns servers: 10.0.0.1
Select lease time

lease time: 20m
</code></pre><h2 id="enable-ipv4-nat">Enable IPv4 NAT</h2>
<p>We need NAT to route all IPv4 traffic over our single public IP address:</p>
<pre tabindex="0"><code>/ip firewall nat add action=masquerade chain=srcnat out-interface=sfp28-1 to-addresses=0.0.0.0
</code></pre><p>Disable NAT services for security, e.g. to mitigate against NAT slipstreaming
attacks:</p>
<pre tabindex="0"><code>/ip firewall service-port disable ftp,tftp,irc,h323,sip,pptp,udplite,dccp,sctp
</code></pre><p>I can observe ‚âà10-20% CPU load when doing a Gigabit speed test over IPv4.</p>
<h2 id="todo-list">TODO list</h2>
<p>The following features I did not get around to configuring, but they were on my
list:</p>
<ul>
<li><a href="https://help.mikrotik.com/docs/display/ROS/First+Time+Configuration">IPv4 port forwardings</a></li>
<li>Cloudflare DynDNS update script</li>
<li><a href="https://wiki.mikrotik.com/wiki/Setting_static_DNS_record_for_each_DHCP_lease">DNS resolution for DHCP hostnames</a></li>
</ul>
<h2 id="returned">Why I returned it</h2>
<p>Initially, I thought the device‚Äôs fan spins up only at boot, and then the large
heatsink takes care of all cooling needs. Unfortunately, after an hour or so
into my experiment, I noticed that the MikroTik would spin up the fan for a
whole minute or so occasionally! Very annoying.</p>
<p>I also ran into weird DNS slow-downs, which I didn‚Äôt fully diagnose. In
Wireshark, it looked like my machine sent 2 DNS queries but received only 1 DNS
result, and then waited for a timeout.</p>
<p>I also noticed that I have a few more unexpected dependencies such as my home
automation using DHCP lease state by subscribing to an MQTT topic. Addressing
this issue and other similar little problems would have taken a bunch more time
and would have resulted in a less reliable system than I have today.</p>
<p>Since I last used MikroTik in 2014 the software seems to have barely changed. I
wish they finally implemented some table-stakes features like DNS resolution for
DHCP hostnames.</p>
<p>Given all the above, I no longer felt like getting enough value for the money
from the MikroTik, and found it easier to just switch back to <a href="https://router7.org/">my own
router7</a> and return the MikroTik.</p>
<p>I will probably stick with the router7 software, but exchange the PC Engines APU
with the smallest PC that has enough PCI-E bandwidth for a multi-port SFP28
network card.</p>
<h2 id="appendix-a-full-configuration">Appendix A: Full configuration</h2>
<pre tabindex="0"><code># may/28/2021 11:40:15 by RouterOS 6.47.9
# software id = 6YZE-HKM8
#
# model = CCR2004-1G-12S+2XS
/interface bridge
add name=bridge1
/interface ethernet
set [ find default-name=sfp28-1 ] auto-negotiation=no mac-address=00:0d:fa:4c:0c:31
/interface wireless security-profiles
set [ find default=yes ] supplicant-identity=MikroTik
/ip pool
add name=dhcp_pool0 ranges=10.0.0.2-10.0.0.240
/ip dhcp-server
add address-pool=dhcp_pool0 disabled=no interface=bridge1 lease-time=20m name=dhcp1
/interface bridge port
add bridge=bridge1 interface=sfp-sfpplus1
add bridge=bridge1 interface=sfp-sfpplus2
add bridge=bridge1 interface=sfp-sfpplus3
add bridge=bridge1 interface=sfp-sfpplus4
add bridge=bridge1 interface=sfp-sfpplus5
add bridge=bridge1 interface=sfp-sfpplus6
add bridge=bridge1 interface=sfp-sfpplus7
add bridge=bridge1 interface=sfp-sfpplus8
add bridge=bridge1 interface=sfp-sfpplus9
add bridge=bridge1 interface=sfp-sfpplus10
add bridge=bridge1 interface=sfp-sfpplus11
add bridge=bridge1 interface=sfp-sfpplus12
/ip neighbor discovery-settings
set discover-interface-list=none
/ip address
add address=192.168.88.1/24 comment=defconf interface=ether1 network=192.168.88.0
add address=10.0.0.1/24 interface=bridge1 network=10.0.0.0
/ip dhcp-client
add disabled=no interface=sfp28-1 use-peer-dns=no
/ip dhcp-server lease
add address=10.0.0.54 mac-address=DC:A6:32:02:AA:10
/ip dhcp-server network
add address=10.0.0.0/24 dns-server=10.0.0.1 domain=lan gateway=10.0.0.1
/ip dns
set allow-remote-requests=yes servers=8.8.8.8,8.8.4.4,2001:4860:4860::8888,2001:4860:4860::8844
/ip firewall nat
add action=masquerade chain=srcnat out-interface=sfp28-1 to-addresses=0.0.0.0
/ip firewall service-port
set ftp disabled=yes
set tftp disabled=yes
set irc disabled=yes
set h323 disabled=yes
set sip disabled=yes
set pptp disabled=yes
set udplite disabled=yes
set dccp disabled=yes
set sctp disabled=yes
/ip service
set telnet disabled=yes
set ftp disabled=yes
set www disabled=yes
set www-ssl certificate=webfig disabled=no
set api disabled=yes
set winbox disabled=yes
set api-ssl disabled=yes
/ip ssh
set strong-crypto=yes
/ipv6 address
add address=::1 from-pool=fiber7 interface=bridge1
/ipv6 dhcp-client
add add-default-route=yes interface=sfp28-1 pool-name=fiber7 request=address,prefix use-peer-dns=no
/ipv6 nd
add interface=bridge1 managed-address-configuration=yes other-configuration=yes
/system clock
set time-zone-name=Europe/Zurich
/system logging
add topics=dhcp
/tool bandwidth-server
set enabled=no
/tool mac-server
set allowed-interface-list=none
/tool mac-server mac-winbox
set allowed-interface-list=none
/tool mac-server ping
set enabled=no
</code></pre>]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Home network 10 Gbit/s upgrade]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/"/>
    <id>https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/</id>
    <published>2021-05-16T17:33:16+02:00</published>
    <content type="html"><![CDATA[<p>After <a href="/posts/2020-08-09-fiber-link-home-network/">adding a fiber link to my home
network</a>, I am upgrading that link
from 1 Gbit/s to 10 Gbit/s.</p>
<p>As a reminder, conceptually the fiber link is built using two media converters
from/to ethernet:</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-08-04-media-converters.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-08-04-media-converters_hu863a0a53ff58eb79e087ca8992fd5d37_416326_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-08-04-media-converters_hu863a0a53ff58eb79e087ca8992fd5d37_416326_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-08-04-media-converters_hu863a0a53ff58eb79e087ca8992fd5d37_416326_600x0_resize_q75_box.jpg"
  alt="0.9mm thin fiber cables" title="0.9mm thin fiber cables"
  width="600"
  height="217"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Schematically, this is what‚Äôs connected to both ends:</p>




<a href="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2021-05-15-bottleneck-1g.svg"><img
  src="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2021-05-15-bottleneck-1g.svg"
  alt="1 Gbit/s bottleneck" title="1 Gbit/s bottleneck"
  style="border: 1px solid #000; margin-right: 1rem"
  
  loading="lazy"></a>


<p>All links are 1 Gbit/s, so it‚Äôs easy to see that, for example, transfers between
chuchi‚Üîrouter7 and storage2‚Üîmidna cannot both use 1 Gbit/s at the same time.</p>
<p>This upgrade serves 2 purposes:</p>
<ol>
<li>
<p><strong>Raise the floor to 1 Gbit/s end-to-end</strong>: Ensure that serving large files
(e.g. distri Linux images and packages) does no longer impact, and is no
longer impacted by, other bandwidth flows that also use this transfer link in
my home network, e.g. daily backups.</p>
</li>
<li>
<p><strong>Raise the ceiling to 10 Gbit/s</strong>: Make it possible to selectively upgrade
Linux PCs on either end of the link to 10 Gbit/s peak bandwidth.</p>
</li>
</ol>
<p>Note that the internet uplink remains untouched at 1 Gbit/s ‚Äî only transfers
within the home network can happen at 10 Gbit/s.</p>
<h2 id="replacing-the-media-converters-with-mikrotik-switches">Replacing the media converters with Mikrotik switches</h2>
<p>We first replace both media converters and switches with a <a href="https://mikrotik.com/product/crs305_1g_4s_in">Mikrotik
CRS305-1G-4S+IN</a>.</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-07-30-mikrotiks-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-07-30-mikrotiks-featured_hu0957e5d484a34f5f279de33468b78758_1267758_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-07-30-mikrotiks-featured_hu0957e5d484a34f5f279de33468b78758_1267758_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2020-07-30-mikrotiks-featured_hu0957e5d484a34f5f279de33468b78758_1267758_600x0_resize_q75_box.jpg"
  alt="Mikrotik CRS305-1G-4S&#43;IN" title="Mikrotik CRS305-1G-4S&#43;IN"
  width="600"
  height="411"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>This device <a href="https://www.digitec.ch/de/s1/product/mikrotik-crs305-1g-4sin-5ports-switch-9876046">costs 149 CHF on digitec</a> and comes with 5 ports:</p>
<ul>
<li>1 √ó RJ45 Ethernet port for management, can be used as a regular 1 Gbit/s port.</li>
<li>4 √ó SFP+ ports</li>
</ul>
<p>Each SFP+ port can be used with either an RJ-45 Ethernet or a fiber SFP+ module,
but beware! As <a href="https://twitter.com/Nexus2kSwiss/status/1394395280120897544">Nexus2kSwiss points out on
twitter</a>, the
Mikrotik supports <strong>at most 2 RJ-45 SFPs at a time</strong>!</p>
<h2 id="fiber-module-upgrade">Fiber module upgrade</h2>
<p>I‚Äôm using 10 Gbit/s fiber SFP+ modules for the fiber link between my kitchen and
living room.</p>
<p>To make use of the 10 Gbit/s link between the switches, all devices that should
get their guaranteed 1 Gbit/s end-to-end connection need to be connected
directly to a Mikrotik switch.</p>
<p>I‚Äôm connecting the PCs to the switch using Direct Attach Cables (DAC) where
possible. The advantage of DAC cables over RJ45 SFP+ modules is their lower
power usage and heat.</p>
<p>The resulting list of SFP modules used in the two Mikrotik switches looks like
so:</p>
<table>
<thead>
<tr>
<th>Mikrotik 1 SFP</th>
<th>speed</th>
<th></th>
<th>speed</th>
<th>Mikrotik 2 SFP</th>
</tr>
</thead>
<tbody>
<tr>
<td>chuchi</td>
<td>10 Gbit/s DAC</td>
<td></td>
<td>10 Gbit/s DAC</td>
<td>midna</td>
</tr>
<tr>
<td>storage2</td>
<td>1 Gbit/s  RJ45</td>
<td></td>
<td>1 Gbit/s RJ45</td>
<td>router7</td>
</tr>
<tr>
<td></td>
<td>10 Gbit/s BiDi</td>
<td>‚¨Ö BiDi fiber link ‚û°</td>
<td>10 Gbit/s BiDi</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="hardware-sourcing">Hardware sourcing</h2>
<p>The total cost of this upgrade is 676 CHF, with the biggest chunk spent on the
Mellanox ConnectX-3 network cards and MikroTik switches.</p>
<h3 id="fs-fiber-store-order">FS (Fiber Store) order</h3>
<p><a href="https://www.FS.COM">FS.COM</a> was my go-to source for anything
fiber-related. Everything they have is very affordable, and products in stock at
their German warehouse arrive in Switzerland (and presumably other European
countries, too) within the same week.</p>
<table>
<thead>
<tr>
<th>num</th>
<th>price</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 √ó</td>
<td>34 CHF</td>
<td><a href="https://www.fs.com/de/products/74681.html">Generic Compatible 10GBASE-BX BiDi SFP+ 1270nm-TX/1330nm-RX 10km DOM Transceiver Module, FS P/N: SFP-10G-BX #74681</a></td>
</tr>
<tr>
<td>1 √ó</td>
<td>34 CHF</td>
<td><a href="https://www.fs.com/de/products/74682.html">Generic Compatible 10GBASE-BX BiDi SFP+ 1330nm-TX/1270nm-RX 10km DOM Transceiver Module, FS P/N: SFP-10G-BX #74682</a></td>
</tr>
<tr>
<td>2 √ó</td>
<td>14 CHF</td>
<td><a href="https://www.fs.com/de/products/74621.html">3m Generic Compatible 10G SFP+ Passive Direct Attach Copper Twinax Cable</a></td>
</tr>
<tr>
<td>0 √ó</td>
<td>56 CHF</td>
<td><del><a href="https://www.fs.com/de/products/74680.html">SFP+ Transceiver Modul - Generisch kompatibel 10GBASE-T SFP+ Kupfer RJ-45 30m, FS P/N: SFP-10G-T #74680</a></del></td>
</tr>
</tbody>
</table>
<h3 id="digitec-order">digitec order</h3>
<p>There are a few items that <a href="https://www.FS.COM">FS.COM</a> doesn‚Äôt stock. These I
bought at <a href="https://www.digitec.ch/">digitec</a>, a big and popular electronics
store in Switzerland. My thinking is that if products are available at digitec,
they most likely are available at your preferred big electronics store, too.</p>
<table>
<thead>
<tr>
<th>num</th>
<th>price</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>2 √ó</td>
<td>149 CHF</td>
<td><a href="https://www.digitec.ch/de/s1/product/mikrotik-crs305-1g-4sin-5ports-switch-9876046">Mikrotik CRS305-1G-4S+IN</a> switch</td>
</tr>
</tbody>
</table>
<h3 id="misc-order">misc order</h3>
<p>The Mellanox cards are not as widely available as I‚Äôd like.</p>
<p>I‚Äôm waiting for an FS.COM card to arrive, which might be a better choice.</p>
<table>
<thead>
<tr>
<th>num</th>
<th>price</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>2 √ó</td>
<td>129 EUR</td>
<td><a href="https://www.heise.de/preisvergleich/nvidia-mellanox-connectx-3-en-10g-mcx311a-xcat-a2508412.html">Mellanox ConnectX-3 MCX311A-XCAT</a></td>
</tr>
</tbody>
</table>
<h2 id="mikrotik-switch-setup">Mikrotik switch setup</h2>
<p>I want to use my switches only as switches, not for any routing or other layer 3
features that might reduce bandwidth, so I first reboot the <a href="https://mikrotik.com/product/crs305_1g_4s_in">MikroTik
CRS305-1G-4S+</a> into SwOS:</p>
<ol>
<li>
<p>In the web interface menu, navigate to <em>System ‚Üí Routerboard ‚Üí
Settings</em>, open the <em>Boot OS</em> drop-down and select option
<em>SwOS</em>.</p>
</li>
<li>
<p>In the web interface menu, navigate to <em>System ‚Üí Reboot</em>.</p>
</li>
<li>
<p>After the device rebooted, change the hostname which was reset to <code>MikroTik</code>.</p>
</li>
</ol>
<p>Next, upgrade the firmware to 2.12 to fix a weird issue with certain
combinations of SFP modules (SFP-10G-BX in SFP1, SFP-10G-T in SFP2):</p>
<ol>
<li>In the SwOS web interface, select the <em>Upgrade</em> tab, then click
<em>Download &amp; Upgrade</em>.</li>
</ol>
<h2 id="network-card-setup-linux">Network card setup (Linux)</h2>
<p>After booting with the Mellanox ConnectX3 in a PCIe slot, the card should show
up in <a href="https://manpages.debian.org/dmesg.8"><code>dmesg(8)</code></a>
:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">mlx4_core: Mellanox ConnectX core driver v4.0-0
mlx4_core: Initializing 0000:03:00.0
mlx4_core 0000:03:00.0: DMFS high rate steer mode is: disabled performance optimized steering
<span style="display:block;width:100%;background-color:#d8d8d8">mlx4_core 0000:03:00.0: 31.504 Gb/s available PCIe bandwidth (8.0 GT/s PCIe x4 link)
</span>mlx4_en: Mellanox ConnectX HCA Ethernet driver v4.0-0
mlx4_en 0000:03:00.0: Activating port:1
mlx4_en: 0000:03:00.0: Port 1: Using 16 TX rings
mlx4_en: 0000:03:00.0: Port 1: Using 16 RX rings
mlx4_en: 0000:03:00.0: Port 1: Initializing port
mlx4_en 0000:03:00.0: registered PHC clock
mlx4_core 0000:03:00.0 enp3s0: renamed from eth0
&lt;mlx4_ib&gt; mlx4_ib_add: mlx4_ib: Mellanox ConnectX InfiniBand driver v4.0-0
&lt;mlx4_ib&gt; mlx4_ib_add: counter index 1 for port 1 allocated 1
mlx4_en: enp3s0: Steering Mode 1
mlx4_en: enp3s0: Link Up</code></pre></div>
<p>Another way to verify the device is running at maximum speed on the computer‚Äôs
PCIe bus, is to ensure <code>LnkSta</code> matches <code>LnkCap</code> in the <a href="https://manpages.debian.org/lspci.8"><code>lspci(8)</code></a>
 output:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">% sudo lspci -vv
03:00.0 Ethernet controller: Mellanox Technologies MT27500 Family [ConnectX-3]
	Subsystem: Mellanox Technologies Device 0055
[‚Ä¶]
	Capabilities: [60] Express (v2) Endpoint, MSI 00
[‚Ä¶]
<span style="display:block;width:100%;background-color:#d8d8d8">		LnkCap:	Port #8, Speed 8GT/s, Width x4, ASPM L0s, Exit Latency L0s unlimited
</span>			ClockPM- Surprise- LLActRep- BwNot- ASPMOptComp+
		LnkCtl:	ASPM Disabled; RCB 64 bytes, Disabled- CommClk+
			ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
<span style="display:block;width:100%;background-color:#d8d8d8">		LnkSta:	Speed 8GT/s (ok), Width x4 (ok)
</span>			TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
[‚Ä¶]</code></pre></div>
<p>You can verify your network link is running at 10 Gbit/s using <a href="https://manpages.debian.org/ethtool.8"><code>ethtool(8)</code></a>
:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">% sudo ethtool enp3s0
Settings for enp3s0:
	Supported ports: [ FIBRE ]
	Supported link modes:   1000baseKX/Full
	                        10000baseKR/Full
	Supported pause frame use: Symmetric Receive-only
	Supports auto-negotiation: No
	Supported FEC modes: Not reported
	Advertised link modes:  1000baseKX/Full
	                        10000baseKR/Full
	Advertised pause frame use: Symmetric
	Advertised auto-negotiation: No
	Advertised FEC modes: Not reported
<span style="display:block;width:100%;background-color:#d8d8d8">	Speed: 10000Mb/s
</span>	Duplex: Full
	Auto-negotiation: off
	Port: Direct Attach Copper
	PHYAD: 0
	Transceiver: internal
	Supports Wake-on: d
	Wake-on: d
        Current message level: 0x00000014 (20)
                               link ifdown
	Link detected: yes</code></pre></div>
<h2 id="benchmarking-batch-transfers">Benchmarking batch transfers</h2>
<p>As mentioned in the introduction, routing 10 Gbit/s is out of scope in this
article. If you‚Äôre interested in routing performance, check out Andree Toonk‚Äôs
<a href="https://toonk.io/linux-kernel-and-measuring-network-throughput/index.html">post which confirms that Linux can route 10 Gbit/s at line
rate</a>.</p>
<p>The following sections cover individual batch transfers of large files, not many
small flows.</p>
<h3 id="iperf3-speed-test">iperf3 speed test</h3>
<p>Out of the box, the speeds that <a href="https://manpages.debian.org/iperf3.1"><code>iperf3(1)</code></a>
 measures
are decent:</p>
<pre tabindex="0"><code>chuchi % iperf3 --version
iperf 3.6 (cJSON 1.5.2)
Linux chuchi 4.19.0-16-amd64 #1 SMP Debian 4.19.181-1 (2021-03-19) x86_64
Optional features available: CPU affinity setting, IPv6 flow label, SCTP, TCP congestion algorithm setting, sendfile / zerocopy, socket pacing, authentication

chuchi % iperf3 --server
[‚Ä¶]

midna % iperf3 --version          
iperf 3.9 (cJSON 1.7.13)
Linux midna 5.12.1-arch1-1 #1 SMP PREEMPT Sun, 02 May 2021 12:43:58 +0000 x86_64
Optional features available: CPU affinity setting, IPv6 flow label, TCP congestion algorithm setting, sendfile / zerocopy, socket pacing, authentication

midna % iperf3 --client chuchi.lan
Connecting to host 10.0.0.173, port 5201
[  5] local 10.0.0.76 port 43168 connected to 10.0.0.173 port 5201
[ ID] Interval           Transfer     Bitrate         Retr  Cwnd
[  5]   0.00-1.00   sec  1.10 GBytes  9.42 Gbits/sec    0   1.62 MBytes       
[  5]   1.00-2.00   sec  1.09 GBytes  9.41 Gbits/sec    0   1.70 MBytes       
[  5]   2.00-3.00   sec  1.10 GBytes  9.41 Gbits/sec    0   1.70 MBytes       
[  5]   3.00-4.00   sec  1.09 GBytes  9.41 Gbits/sec    0   1.78 MBytes       
[  5]   4.00-5.00   sec  1.09 GBytes  9.41 Gbits/sec    0   1.87 MBytes       
[  5]   5.00-6.00   sec  1.10 GBytes  9.42 Gbits/sec    0   1.87 MBytes       
[  5]   6.00-7.00   sec  1.10 GBytes  9.42 Gbits/sec    0   1.87 MBytes       
[  5]   7.00-8.00   sec  1.10 GBytes  9.41 Gbits/sec    0   1.87 MBytes       
[  5]   8.00-9.00   sec  1.09 GBytes  9.41 Gbits/sec    0   1.96 MBytes       
[  5]   9.00-10.00  sec  1.09 GBytes  9.38 Gbits/sec  402   1.52 MBytes       
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Retr
[  5]   0.00-10.00  sec  11.0 GBytes  9.41 Gbits/sec  402             sender
[  5]   0.00-10.00  sec  11.0 GBytes  9.40 Gbits/sec                  receiver

iperf Done.
</code></pre><h3 id="http-speed-test">HTTP speed test</h3>
<p>Downloading a file from an <a href="https://manpages.debian.org/nginx.1"><code>nginx(1)</code></a>
 web server using <a href="https://manpages.debian.org/curl.1"><code>curl(1)</code></a>
 is fast, too:</p>
<pre tabindex="0"><code>% curl -o /dev/null http://chuchi.lan/distri/supersilverhaze/img/distri-disk.img.zst
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  934M  100  934M    0     0  1118M      0 --:--:-- --:--:-- --:--:-- 1117M
</code></pre><p>Note that this download was served from RAM (Linux page cache). The next upgrade
I need to do in this machine is replace the SATA SSD with an NVMe SSD, because
the disk is now the bottleneck.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This was a pleasantly simple upgrade: plug in a bunch of new hardware and batch
transfers become faster.</p>
<p>The Mikrotik switch provides great value for money, and the Mellanox ConnectX-3
cards work well, provided you can find them.</p>
<h2 id="appendix-a-switching-from-rj45-sfp-modules-to-direct-attach-cables">Appendix A: Switching from RJ45 SFP+ modules to Direct Attach Cables</h2>
<p>Originally, I connected all PCs to the MikroTik switches with RJ45 SFP+ modules
for two reasons:</p>
<ol>
<li>I bought <a href="https://www.digitec.ch/de/s1/product/intel-x550-t2-pci-express-30-netzwerkadapter-5926807">Intel
X550-T2</a>
PCIe 10 Gbit/s network cards that RJ45 as my first choice.</li>
<li>The SFP+ modules are backwards-compatible and can be used with 1 Gbit/s RJ45
devices, too, which makes for a nice incremental upgrade path.</li>
</ol>
<p>However, I later was made aware that the RJ45 SFP+ modules use significantly
more power and run significantly hotter than Direct Attach Cables (DAC).</p>
<p>I measured it: each RJ45 SFP+ module was causing my BiDi SFP+ module to run 5‚ÑÉ
hotter!</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2021-06-06-sfp-temperatures.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2021-06-06-sfp-temperatures_hu7dc6d141e645d7cfd271ec6844fcfc18_272504_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2021-06-06-sfp-temperatures_hu7dc6d141e645d7cfd271ec6844fcfc18_272504_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-16-home-network-fiber-10-gbits-upgrade/2021-06-06-sfp-temperatures_hu7dc6d141e645d7cfd271ec6844fcfc18_272504_600x0_resize_q75_box.jpg"
  
  width="600"
  height="269"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Around 06/02 I replaced one RJ45 SFP+ module with a Direct Attach Cable.</p>
<p>Around 06/06 I replaced the remaining RJ45 SFP+ module with another Direct
Attach Cable.</p>
<p>As you can see, this caused a 10‚ÑÉ drop in temperature of the BiDi SFP+ module.</p>
<p>The MikroTik is still uncomfortably hot, making it hard to work with when it‚Äôs
powered on.</p>
<h2 id="appendix-b-network-card-setup-linux-with-intel-x550-t2">Appendix B: Network card setup (Linux) with Intel X550-T2</h2>
<p>For reference, here is the Network card setup (Linux) section, but with the
Intel X550-T2 that I previously used.</p>
<p>After booting with the Intel X550-T2 in a PCIe slot, the card should show up in
<a href="https://manpages.debian.org/dmesg.8"><code>dmesg(8)</code></a>
:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">ixgbe: Intel(R) 10 Gigabit PCI Express Network Driver
ixgbe 0000:03:00.0: Multiqueue Enabled: Rx Queue count = 16, Tx Queue count = 16 XDP Queue count = 0
<span style="display:block;width:100%;background-color:#d8d8d8">ixgbe 0000:03:00.0: 31.504 Gb/s available PCIe bandwidth (8.0 GT/s PCIe x4 link)
</span>ixgbe 0000:03:00.0: MAC: 4, PHY: 0, PBA No: H86377-006
ixgbe 0000:03:00.0: Intel(R) 10 Gigabit Network Connection
libphy: ixgbe-mdio: probed
ixgbe 0000:03:00.1: Multiqueue Enabled: Rx Queue count = 16, Tx Queue count = 16 XDP Queue count = 0
<span style="display:block;width:100%;background-color:#d8d8d8">ixgbe 0000:03:00.1: 31.504 Gb/s available PCIe bandwidth (8.0 GT/s PCIe x4 link)
</span>ixgbe 0000:03:00.1: MAC: 4, PHY: 0, PBA No: H86377-006
tun: Universal TUN/TAP device driver, 1.6
ixgbe 0000:03:00.1: Intel(R) 10 Gigabit Network Connection
libphy: ixgbe-mdio: probed
ixgbe 0000:03:00.0 enp3s0f0: renamed from eth0
ixgbe 0000:03:00.1 enp3s0f1: renamed from eth1
pps pps0: new PPS source ptp1
ixgbe 0000:03:00.0: registered PHC device on enp3s0f0
pps pps1: new PPS source ptp2
ixgbe 0000:03:00.1: registered PHC device on enp3s0f1</code></pre></div>
<p>I think if you only use 1 of the card‚Äôs 2 network ports, you might not hit any
bottlenecks even when running the card only at <a href="https://en.wikipedia.org/wiki/PCI_Express#History_and_revisions">PCIe 3.0 √ó2 link
speed</a>, but I
haven‚Äôt verified this!</p>
<p>Another way to verify the device is running at maximum speed on the computer‚Äôs
PCIe bus, is to ensure <code>LnkSta</code> matches <code>LnkCap</code> in the <a href="https://manpages.debian.org/lspci.8"><code>lspci(8)</code></a>
 output:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">% sudo lspci -vv
[‚Ä¶]
03:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10G X550T (rev 01)
        Subsystem: Intel Corporation Ethernet Converged Network Adapter X550-T2
[‚Ä¶]
        Capabilities: [a0] Express (v2) Endpoint, MSI 00
[‚Ä¶]
<span style="display:block;width:100%;background-color:#d8d8d8">                LnkCap: Port #0, Speed 8GT/s, Width x4, ASPM L0s L1, Exit Latency L0s &lt;2us, L1 &lt;16us
</span>                        ClockPM- Surprise- LLActRep- BwNot- ASPMOptComp+
                LnkCtl: ASPM Disabled; RCB 64 bytes, Disabled- CommClk+
                        ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
<span style="display:block;width:100%;background-color:#d8d8d8">                LnkSta: Speed 8GT/s (ok), Width x4 (ok)
</span>                        TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
[‚Ä¶]</code></pre></div>
<p>You can verify your network link is running at 10 Gbit/s using <a href="https://manpages.debian.org/ethtool.8"><code>ethtool(8)</code></a>
:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">% sudo ethtool enp3s0f1 
Settings for enp3s0f1:
	Supported ports: [ TP ]
	Supported link modes:   100baseT/Full
	                        1000baseT/Full
<span style="display:block;width:100%;background-color:#d8d8d8">	                        10000baseT/Full
</span>	                        2500baseT/Full
	                        5000baseT/Full
	Supported pause frame use: Symmetric
	Supports auto-negotiation: Yes
	Supported FEC modes: Not reported
	Advertised link modes:  100baseT/Full
	                        1000baseT/Full
	                        10000baseT/Full
	Advertised pause frame use: Symmetric
	Advertised auto-negotiation: Yes
	Advertised FEC modes: Not reported
<span style="display:block;width:100%;background-color:#d8d8d8">	Speed: 10000Mb/s
</span>	Duplex: Full
	Auto-negotiation: on
	Port: Twisted Pair
	PHYAD: 0
	Transceiver: internal
	MDI-X: Unknown
	Supports Wake-on: d
	Wake-on: d
        Current message level: 0x00000007 (7)
                               drv probe link
	Link detected: yes</code></pre></div>
<h2 id="appendix-c-bios-update-for-mellanox-connectx-3">Appendix C: BIOS update for Mellanox ConnectX-3</h2>
<p>On my Supermicro X11SSZ-QF mainboard, the Mellanox ConnectX-3 would not
establish a link. The Mellanox Linux kernel driver logged a number of errors:</p>
<pre tabindex="0"><code>kernel: mlx4_en: enp1s0: CQE error - cqn 0x8e, ci 0x0, vendor syndrome: 0x57 syndrome: 0x4
kernel: mlx4_en: enp1s0: Related WQE - qpn 0x20d, wqe index 0x0, wqe size 0x40
kernel: mlx4_en: enp1s0: Scheduling port restart
kernel: mlx4_core 0000:01:00.0: Internal error detected:
kernel: mlx4_core 0000:01:00.0: device is going to be reset
kernel: mlx4_core 0000:01:00.0: crdump: devlink snapshot disabled, skipping
kernel: mlx4_core 0000:01:00.0: device was reset successfully
kernel: mlx4_en 0000:01:00.0: Internal error detected, restarting device
kernel: &lt;mlx4_ib&gt; mlx4_ib_handle_catas_error: mlx4_ib_handle_catas_error was started
kernel: &lt;mlx4_ib&gt; mlx4_ib_handle_catas_error: mlx4_ib_handle_catas_error ended
kernel: mlx4_core 0000:01:00.0: command 0x21 failed: fw status = 0x1
kernel: pcieport 0000:00:1c.0: AER: Uncorrected (Fatal) error received: 0000:00:1c.0
kernel: pcieport 0000:00:1c.0: PCIe Bus Error: severity=Uncorrected (Fatal), type=Transaction Layer, (Receiver ID)
kernel: mlx4_core 0000:01:00.0: command 0x43 failed: fw status = 0x1
kernel: infiniband mlx4_0: ib_query_port failed (-5)
kernel: pcieport 0000:00:1c.0:   device [8086:a110] error status/mask=00040000/00010000
kernel: pcieport 0000:00:1c.0:    [18] MalfTLP                (First)
kernel: pcieport 0000:00:1c.0: AER:   TLP Header: 4a000001 01000004 00000000 00000000
kernel: mlx4_core 0000:01:00.0: mlx4_pci_err_detected was called
kernel: mlx4_core 0000:01:00.0: Fail to set mac in port 1 during unregister
systemd-networkd[313]: enp1s0: Link DOWN
kernel: mlx4_en: enp1s0: Failed activating Rx CQ
kernel: mlx4_en: enp1s0: Failed restarting port 1
kernel: mlx4_en: enp1s0: Link Down
kernel: mlx4_en: enp1s0: Close port called
systemd-networkd[313]: enp1s0: Lost carrier
kernel: mlx4_en 0000:01:00.0: removed PHC
kernel: mlx4_core 0000:01:00.0: mlx4_restart_one_up: ERROR: mlx4_load_one failed, pci_name=0000:01:00.0, err=-5
kernel: mlx4_core 0000:01:00.0: mlx4_restart_one was ended, ret=-5
systemd-networkd[313]: enp1s0: DHCPv6 lease lost
kernel: pcieport 0000:00:1c.0: AER: Root Port link has been reset
kernel: mlx4_core 0000:01:00.0: mlx4_pci_resume was called
kernel: mlx4_core 0000:01:00.0: Multiple PFs not yet supported - Skipping PF
kernel: mlx4_core 0000:01:00.0: mlx4_pci_resume: mlx4_load_one failed, err=-22
kernel: pcieport 0000:00:1c.0: AER: device recovery successful
</code></pre><p>What helped was to update the X11SSZ-QF BIOS to the latest version.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Measure and reduce keyboard input latency with QMK on the Kinesis Advantage]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/"/>
    <id>https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/</id>
    <published>2021-05-08T15:57:00+02:00</published>
    <content type="html"><![CDATA[<p>Over the last few years, I worked on a few projects around keyboard input latency:</p>
<p>In 2018, I introduced the <a href="/posts/2018-04-17-kinx/">kinX keyboard controller with 0.2ms of input
latency</a>.</p>
<p>In 2020, I introduced the <a href="/posts/2020-07-09-kint-kinesis-keyboard-controller/">kinT keyboard
controller</a>, which works
with a wide range of Teensy micro controllers, and both the old KB500 and the
newer KB600 Kinesis Advantage models.</p>
<p>While the 2018 kinX controller had built-in latency measurement, I was starting
from scratch with the kinT design, where I wanted to use the QMK keyboard
firmware instead of my own firmware.</p>
<p>That got me thinking: instead of adjusting the firmware to self-report latency
numbers, is there a way we can do latency measurements externally, ideally
without software changes?</p>
<p>This article walks you through how to set up a measurement environment for your
keyboard controller‚Äôs input latency, be it original or self-built. I‚Äôll use a
Kinesis Advantage keyboard, but this approach should generalize to all
keyboards.</p>
<p>I will explain a few common causes for extra keyboard input latency and show you
how to fix them in the QMK keyboard firmware.</p>
<h2 id="measurement-setup">Measurement setup</h2>
<p>The idea is to connect a <a href="https://www.pjrc.com/store/teensy40.html">Teensy 4.0</a>
(or similar), which simulates pressing the Caps Lock key and measures the
duration until the keypress resulted in a Caps Lock LED change.</p>
<p>We use the Caps Lock key because it is one of the few keys that results in an
LED change.</p>
<p>Here you can see the Teensy 4.0 connected to the <a href="https://github.com/kinx-project/kint/">kinT
controller</a>, connected to a laptop:</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/endtoend_measure_featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/endtoend_measure_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_1237431_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/endtoend_measure_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_1237431_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/endtoend_measure_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_1237431_600x0_resize_q75_box.jpg"
  alt="measurement setup" title="measurement setup"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="enable-the-debug-console-in-qmk">Enable the debug console in QMK</h3>
<p>Let‚Äôs get our QMK working copy ready for development! I like to work in a
separate QMK working copy per project:</p>
<pre tabindex="0"><code>% docker run -it -v $PWD:/usr/src archlinux
# pacman -Sy &amp;&amp; pacman -S qmk make which diffutils python-hidapi python-pyusb
# cd /usr/src
# qmk clone -b develop qmk/qmk_firmware $PWD/qmk-input-latency
# cd qmk-input-latency
</code></pre><p>I compile the firmware for my keyboard like so:</p>
<pre tabindex="0"><code># make kinesis/kint36:stapelberg
</code></pre><p>To enable the debug console, I need to edit my QMK keymap <code>stapelberg</code> by
updating <code>keyboards/kinesis/keymaps/stapelberg/rules.mk</code> to contain:</p>
<pre tabindex="0"><code>CONSOLE_ENABLE = yes
</code></pre><p>After compiling and flashing the firmware, the <code>hid_listen</code> tool will detect the
device and listen for QMK debug messages:</p>
<pre tabindex="0"><code>% sudo hid_listen
Waiting for device:...
Listening:
</code></pre><h3 id="finding-the-pins">Finding the pins</h3>
<p>Let‚Äôs locate the Caps Lock key‚Äôs corresponding row and column in our keyboard matrix!</p>
<p>We can make QMK show which keys are recognized after each scan by adding to
<code>keyboards/kinesis/keymaps/stapelberg/keymap.c</code> the following code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">void</span> <span style="color:#06287e">keyboard_post_init_user</span>() {
  debug_config.enable <span style="color:#666">=</span> <span style="color:#007020">true</span>;
  debug_config.matrix <span style="color:#666">=</span> <span style="color:#007020">true</span>;
}
</code></pre></div><p>Now we‚Äôll see in the <code>hid_listen</code> output which key is active when pressing Caps Lock:</p>
<pre tabindex="0"><code>r/c 01234567
00: 00100000
01: 00000000
[‚Ä¶]
</code></pre><p>For our kinT controller, Caps Lock is on QMK matrix row 0, column 2.</p>
<p>In the <a href="https://github.com/kinx-project/kint/blob/master/schematic-v2021-04-25.pdf">kinT
schematic</a>,
the corresponding signals are <code>ROW_EQL</code> and <code>COL_2</code>.</p>
<p>To hook up the Teensy 4.0 latency measurement driver, I am making the following
GPIO connections to the kint36, kint41 or kint2pp (with voltage converter!)
keyboard controllers:</p>
<table>
<thead>
<tr>
<th>driver 4.0</th>
<th>signal</th>
<th>kint36, kint41</th>
<th>kint2pp (5V!)</th>
</tr>
</thead>
<tbody>
<tr>
<td>GND</td>
<td><code>GND</code></td>
<td>GND</td>
<td>GND</td>
</tr>
<tr>
<td>pin 10</td>
<td><code>ROW_EQL</code></td>
<td>pin 8</td>
<td>D7</td>
</tr>
<tr>
<td>pin 11</td>
<td><code>COL_2</code></td>
<td>pin 15</td>
<td>F7</td>
</tr>
<tr>
<td>pin 12</td>
<td><code>LED_CAPS_LOCK</code></td>
<td>pin 12</td>
<td>C1</td>
</tr>
</tbody>
</table>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Note:</strong> Unfortunately, the signals are not available on the Teensy 4.x dev kit
<a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/mimxrt1060-evk-i-mx-rt1060-evaluation-kit:MIMXRT1060-EVK">NXP i.MX RT1060 Evaluation Kit
(<code>MIMXRT1060-EVK</code>)</a>. Here,
pin 8 (<code>B1_00</code>) is used for the LVDI interface instead.</div>
  </div>
</aside>

<h3 id="eagercaps">Eager Caps Lock LED</h3>
<p>When the host signals to the keyboard that Caps Lock is now turned on, the QMK
firmware first updates a flag in the USB interrupt handler, but only updates the
Caps Lock LED pin after the next matrix scan has completed.</p>
<p>This is fine in normal usage, but our measurement readings will get more precise
if we immediately update the Caps Lock LED pin. We can do this in
<code>set_led_transfer_cb</code> in <code>tmk_core/protocol/chibios/usb_main.c</code>, which is called
from the USB interrupt handler:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#include</span> <span style="color:#007020">&#34;gpio.h&#34;</span><span style="color:#007020">
</span><span style="color:#007020"></span>
<span style="color:#007020;font-weight:bold">static</span> <span style="color:#902000">void</span> <span style="color:#06287e">set_led_transfer_cb</span>(USBDriver <span style="color:#666">*</span>usbp) {
    <span style="color:#007020;font-weight:bold">if</span> (usbp<span style="color:#666">-&gt;</span>setup[<span style="color:#40a070">6</span>] <span style="color:#666">==</span> <span style="color:#40a070">2</span>) { <span style="color:#60a0b0;font-style:italic">/* LSB(wLength) */</span>
        <span style="color:#902000">uint8_t</span> report_id <span style="color:#666">=</span> set_report_buf[<span style="color:#40a070">0</span>];
        <span style="color:#007020;font-weight:bold">if</span> ((report_id <span style="color:#666">==</span> REPORT_ID_KEYBOARD) <span style="color:#666">||</span> (report_id <span style="color:#666">==</span> REPORT_ID_NKRO)) {
            keyboard_led_state <span style="color:#666">=</span> set_report_buf[<span style="color:#40a070">1</span>];
        }
    } <span style="color:#007020;font-weight:bold">else</span> {
        keyboard_led_state <span style="color:#666">=</span> set_report_buf[<span style="color:#40a070">0</span>];
    }
<span style="display:block;width:100%;background-color:#d8d8d8">    <span style="color:#007020;font-weight:bold">if</span> ((keyboard_led_state <span style="color:#666">&amp;</span> <span style="color:#40a070">2</span>) <span style="color:#666">!=</span> <span style="color:#40a070">0</span>) {
</span><span style="display:block;width:100%;background-color:#d8d8d8">      writePinLow(C7); <span style="color:#60a0b0;font-style:italic">// turn on CAPS_LOCK LED
</span></span><span style="display:block;width:100%;background-color:#d8d8d8"><span style="color:#60a0b0;font-style:italic"></span>    } <span style="color:#007020;font-weight:bold">else</span> {
</span><span style="display:block;width:100%;background-color:#d8d8d8">      writePinHigh(C7); <span style="color:#60a0b0;font-style:italic">// turn off CAPS_LOCK LED
</span></span><span style="display:block;width:100%;background-color:#d8d8d8"><span style="color:#60a0b0;font-style:italic"></span>    }
</span>}</code></pre></div>
<h3 id="host-side-linux">Host side (Linux)</h3>
<p>On the USB host, i.e. the Linux computer, I switch to a <a href="https://en.wikipedia.org/wiki/Virtual_console">Virtual Terminal
(VT)</a> by stopping my login
manager (killing my current graphical session!):</p>
<pre tabindex="0"><code>% sudo systemctl stop gdm
</code></pre><p>With the Virtual Terminal active, we know that the Caps Lock key press will be
handled entirely in kernel driver code without having to round-trip to
userspace.</p>
<p>We can verify this by collecting stack traces with <a href="https://manpages.debian.org/bpftrace.8"><code>bpftrace(8)</code></a>
 when the kernel executes the <a href="https://elixir.bootlin.com/linux/v5.12/source/drivers/tty/vt/keyboard.c#L1521"><code>kbd_event</code> function in
<code>drivers/tty/vt</code></a>:</p>
<pre tabindex="0"><code>% sudo bpftrace -e 'kprobe:kbd_event { @[kstack] = count(); }'
</code></pre><p>After pressing Caps Lock and cancelling the <code>bpftrace</code> process, you should see a
stack trace.</p>
<p>I then measured the baseline end-to-end latency, using <a href="https://github.com/kinx-project/measure-fw">my <code>measure-fw</code>
firmware</a> running on the FRDM-K66F
eval kit, a cheap and widely available USB 2.0 High Speed device. The firmware
measures the latency between a button press and the USB HID report for the Caps
Lock LED, but without any additional matrix scanning delay or similar:</p>
<pre tabindex="0"><code>% cat /dev/ttyACM0
sof=74 Œºs	report=393 Œºs
sof=42 Œºs	report=512 Œºs
sof=19 Œºs	report=512 Œºs
sof=39 Œºs	report=488 Œºs
sof=20 Œºs	report=518 Œºs
sof=90 Œºs	report=181 Œºs
sof=42 Œºs	report=389 Œºs
sof=7 Œºs	report=319 Œºs
</code></pre><p>This is the quickest reaction we can get out of this computer. Anything on top
(e.g. X11, application) will be slower, so this measurement establishes a lower
bound.</p>
<h3 id="code-to-simulate-key-presses-and-take-measurements">Code to simulate key presses and take measurements</h3>
<p>I‚Äôm running the <a href="https://github.com/kinx-project/latencydriver">latencydriver Arduino
sketch</a>, with the Arduino IDE
configured for:</p>
<p>Teensy 4.0 (USB Type: Serial, CPU Speed: 600 MHz, Optimize: Faster)</p>
<p>Here‚Äôs how we set up the pins in the measurement driver Teensy 4.0:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">void</span> <span style="color:#06287e">setup</span>() {
  Serial.begin(<span style="color:#40a070">9600</span>);

  <span style="color:#60a0b0;font-style:italic">// Connected to kinT pin 15, COL_2
</span><span style="color:#60a0b0;font-style:italic"></span>  pinMode(<span style="color:#40a070">11</span>, OUTPUT);
  digitalWrite(<span style="color:#40a070">11</span>, HIGH);

  <span style="color:#60a0b0;font-style:italic">// Connected to kinT pin 8, ROW_EQL.
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#60a0b0;font-style:italic">// Pin 11 will be high/low in accordance with pin 10
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#60a0b0;font-style:italic">// to simulate a key-press, and always high (unpressed)
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#60a0b0;font-style:italic">// otherwise.
</span><span style="color:#60a0b0;font-style:italic"></span>  pinMode(<span style="color:#40a070">10</span>, INPUT_PULLDOWN);
  attachInterrupt(digitalPinToInterrupt(<span style="color:#40a070">10</span>), onScan, CHANGE);

  <span style="color:#60a0b0;font-style:italic">// Connected to the kinT LED_CAPS_LOCK output:
</span><span style="color:#60a0b0;font-style:italic"></span>  pinMode(<span style="color:#40a070">12</span>, INPUT_PULLDOWN);
  attachInterrupt(digitalPinToInterrupt(<span style="color:#40a070">12</span>), onCapsLockLED, CHANGE);
}
</code></pre></div><p>In order to make a key read as pressed, we need to connect the column with the
row in the keyboard matrix, but only when the column is scanned. We do that in
the interrupt handler like so:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">bool</span> simulate_press <span style="color:#666">=</span> <span style="color:#007020">false</span>;

<span style="color:#902000">void</span> <span style="color:#06287e">onScan</span>() {
  <span style="color:#007020;font-weight:bold">if</span> (simulate_press) {
    <span style="color:#60a0b0;font-style:italic">// connect row scan signal with column read
</span><span style="color:#60a0b0;font-style:italic"></span>    digitalWrite(<span style="color:#40a070">11</span>, digitalRead(<span style="color:#40a070">10</span>));
  } <span style="color:#007020;font-weight:bold">else</span> {
    <span style="color:#60a0b0;font-style:italic">// always read not pressed otherwise
</span><span style="color:#60a0b0;font-style:italic"></span>    digitalWrite(<span style="color:#40a070">11</span>, HIGH);
  }
}
</code></pre></div><p>In our text interface, we can now start a measurement like so:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">caps_lock_on_to_off <span style="color:#666">=</span> capsLockOn();
Serial.printf(<span style="color:#4070a0">&#34;# Caps Lock key pressed (transition: %s)</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>,
  caps_lock_on_to_off <span style="color:#666">?</span> <span style="color:#4070a0">&#34;on to off&#34;</span> <span style="color:#666">:</span> <span style="color:#4070a0">&#34;off to on&#34;</span>);
simulate_press <span style="color:#666">=</span> <span style="color:#007020">true</span>;
t0 <span style="color:#666">=</span> ARM_DWT_CYCCNT;
emt0 <span style="color:#666">=</span> <span style="color:#40a070">0</span>;
eut0 <span style="color:#666">=</span> <span style="color:#40a070">0</span>;
</code></pre></div><p>The next keyboard matrix scan will detect the key as pressed, send the HID
report to the OS, and when the OS responds with its HID report containing the
Caps Lock LED status, our Caps Lock LED interrupt handler is called to finish
the measurement:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">void</span> <span style="color:#06287e">onCapsLockLED</span>() {
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint32_t</span> t1 <span style="color:#666">=</span> ARM_DWT_CYCCNT;
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint32_t</span> elapsed_millis <span style="color:#666">=</span> emt0;
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint32_t</span> elapsed_micros <span style="color:#666">=</span> eut0;
  <span style="color:#902000">uint32_t</span> elapsed_nanos <span style="color:#666">=</span> (t1 <span style="color:#666">-</span> t0) <span style="color:#666">/</span> cycles_per_ns;

  Serial.printf(<span style="color:#4070a0">&#34;# Caps Lock LED (pin 12) is now %s</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>, capsLockOn() <span style="color:#666">?</span> <span style="color:#4070a0">&#34;on&#34;</span> <span style="color:#666">:</span> <span style="color:#4070a0">&#34;off&#34;</span>);
  Serial.printf(<span style="color:#4070a0">&#34;# %u ms == %u us</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>, elapsed_millis, elapsed_micros);
  Serial.printf(<span style="color:#4070a0">&#34;BenchmarkKeypressToLEDReport 1 %u ns/op</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>, elapsed_nanos);
  Serial.printf(<span style="color:#4070a0">&#34;</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>);
}
</code></pre></div><h3 id="running-measurements">Running measurements</h3>
<p>Connect the Teensy 4.0 to your computer and open its USB serial console:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% screen /dev/ttyACM0 <span style="color:#40a070">115200</span>
</code></pre></div><p>You should be greeted by a welcome message:</p>
<pre tabindex="0"><code># kinT latency measurement driver
#   t  - trigger measurement
</code></pre><p>To save your measurements to file, use <code>C-a H</code> in <code>screen</code> to make it write to
file <code>screenlog.0</code>.</p>
<p>Press <code>t</code> a few times to trigger a few measurements and close <code>screen</code> using
<code>C-a k</code>.</p>
<p>You can summarize the measurements using
<a href="https://pkg.go.dev/golang.org/x/perf/cmd/benchstat"><code>benchstat</code></a>:</p>
<pre tabindex="0"><code>% benchstat screenlog.0
name                 time/op
KeypressToLEDReport  1.82ms ¬±20%
</code></pre><h3 id="scantoscandelay">Scan-to-scan delay</h3>
<p>The measurement output on the USB serial console also contains the matrix
scan-to-scan delay:</p>
<pre tabindex="0"><code># scan-to-scan delay: 422475 ns
</code></pre><p>Each keyboard matrix scan turns on each row one-by-one, then reads all the columns.</p>
<p>This means that in each matrix scan, <code>ROW_EQL</code> will be set high once, then low again.</p>
<p>The Teensy 4.0 measures scan-to-scan delay by timing the activations of
<code>ROW_EQL</code>.</p>
<p>We can verify this approach by making QMK self-report its scan rate. Enable the
matrix scan rate debug option in <code>keyboards/kinesis/keymaps/stapelberg/config.h</code>
like so:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#pragma once
</span><span style="color:#007020"></span>
<span style="color:#007020">#define DEBUG_MATRIX_SCAN_RATE
</span></code></pre></div><p>Using <code>hid_listen</code> we can now see the following QMK debug messages:</p>
<pre tabindex="0"><code>% sudo hid_listen
Waiting for new device:..
Listening:
matrix scan frequency: 2300
matrix scan frequency: 2367
matrix scan frequency: 2367
</code></pre><p>A matrix scan rate/frequency of 2367 scans per second corresponds to 422Œºs per
scan:</p>
<pre tabindex="0"><code>1000000 Œºs / 2367 scans/second = 422Œºs
</code></pre><p>Yet another way of verifying the approach is by short-circuiting an end-to-end
measurement with a one-line change in our QMK keyboard code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">bool</span> <span style="color:#06287e">process_action_kb</span>(keyrecord_t <span style="color:#666">*</span>record) {
<span style="color:#007020">#define LED_CAPS_LOCK LINE_PIN12
</span><span style="color:#007020">#define ledTurnOn writePinLow
</span><span style="color:#007020"></span>  ledTurnOn(LED_CAPS_LOCK);
  <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">true</span>;
}
</code></pre></div><p>Repeating the measurements, this gives us:</p>
<pre tabindex="0"><code>% benchstat screenlog.0     
name                 time/op
KeypressToLEDReport  693¬µs ¬±26%
</code></pre><p>This value is between [0, 2 * 422Œºs] because a key might be pressed
after it was already scanned by the in-progress matrix scan, meaning it will
need to wait until the next scan completed (!) before it can be registered as
pressed.</p>
<h2 id="measurement-harness">Measurement harness</h2>
<p>Now that we have our general measurement environment all set up, it‚Äôs time to
connect our Teensy 4.0 to a few different keyboard controllers!</p>
<h3 id="kint36-kint41-gpio">kint36, kint41: GPIO</h3>
<p>If you have an un-soldered micro controller you want to measure, setup is easy:
just connect all GPIOs to the Teensy 4.0 latency test driver directly! I‚Äôm using
this for the <code>kint36</code> and <code>kint41</code>:</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint41_gpio_measure.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint41_gpio_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_607037_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint41_gpio_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_607037_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint41_gpio_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_607037_600x0_resize_q75_box.jpg"
  alt="GPIO measurement" title="GPIO measurement"
  width="600"
  height="329"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>(build in <code>/home/michael/kinx/kintpp/rebased</code>, last results in <code>screenlog-kint36-eager-caps.0</code>)</p>
<h3 id="kint2pp-5v">kint2pp: 5V</h3>
<p>Because the Teensy++ uses 5V logic levels, we need to convert the levels from/to
3.3V. This is easily done using e.g. the <a href="https://www.sparkfun.com/products/12009">SparkFun Logic Level Converter
(Bi-Directional)</a> on a breadboard:</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint2pp_levelshifter.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint2pp_levelshifter_hua983c5221b9326c29ab4450c04cd6d00_1691385_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint2pp_levelshifter_hua983c5221b9326c29ab4450c04cd6d00_1691385_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kint2pp_levelshifter_hua983c5221b9326c29ab4450c04cd6d00_1691385_600x0_resize_q75_box.jpg"
  alt="kint2pp with level shifter" title="kint2pp with level shifter"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="kinx-fpc">kinX: FPC</h3>
<p>But what if you have a design where the micro controller doesn‚Äôt come
standalone, only soldered to a keyboard controller board, such as my earlier
kinX controller?</p>
<p>You can use a spare FPC connector (<a href="https://octopart.com/39-53-2135-molex-7670149?r=sp">Molex
39-53-2135</a>) and solder
jumper wires to the pins for <code>COL_2</code> and <code>ROW_EQL</code>. For Caps Lock and Ground,
I soldered jumper wires to the board:</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinx_fpc_measure.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinx_fpc_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_1315352_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinx_fpc_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_1315352_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinx_fpc_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_1315352_600x0_resize_q75_box.jpg"
  alt="kinX measurement" title="kinX measurement"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Note:</strong> The
<a href="https://github.com/kinx-project/adapter-use-kb600-with-kb500-controller">adapter-use-kb600-with-kb500-controller</a>
unfortunately cannot be used for this purpose: the required pins are connected
to the ground plane.</div>
  </div>
</aside>

<h3 id="original-kinesis-controller">Original Kinesis controller</h3>
<p>But what if you don‚Äôt want to solder jumper wires directly to the board?</p>
<p>The least invasive method is to connect the FPC connector break-out, and hold
probe heads onto the contacts while doing your measurements:</p>















<a href="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinesis_original_measure.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinesis_original_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_944081_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinesis_original_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_944081_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-05-08-keyboard-input-latency-qmk-kinesis/kinesis_original_measure_hu855bbe0a9c47ac557e5b09db74fa3b06_944081_600x0_resize_q75_box.jpg"
  alt="kinesis original controller measurement" title="kinesis original controller measurement"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="qmk-input-latency">QMK input latency</h2>
<p>Now that the measurement hardware is set up, we can go through the code.</p>
<p>The following sections each cover one possible contributor to input latency.</p>
<h3 id="eagerdebounce">Eager debounce</h3>
<p>Key switches don‚Äôt generate a clean signal when pressed, instead they show a
ripple effect. Getting rid of this ripple is called
<a href="https://en.wiktionary.org/wiki/debounce">debouncing</a>, and every keyboard
firmware does it.</p>
<p>See <a href="https://beta.docs.qmk.fm/using-qmk/software-features/feature_debounce_type">QMK‚Äôs documentation on the Debounce
API</a>
for a good explanation of the differences between the different debounce approaches.</p>
<p>QMK‚Äôs default debounce algorithm <code>sym_defer_g</code> is chosen very cautiously. I
don‚Äôt know what the criteria are specifically for which types of key switches
suffer from noise and therefore need the <code>sym_defer_g</code> algorithm, but I know
that Cherry MX key switches with diodes like used in the Kinesis Advantage don‚Äôt
have noise and hence can use the other debounce algorithms, too.</p>
<p>While the default <code>sym_defer_g</code> debounce algorithm is robust, it also adds 5ms
of input latency:</p>
<pre tabindex="0"><code>% benchstat screenlog-kint36.0
name                 time/op
KeypressToLEDReport  7.61ms ¬± 8%
</code></pre><p>For lower input latency, we need an <code>eager</code> algorithm. Specifically, I am
chosing the <code>sym_eager_pk</code> debounce algorithm by adding to my
<code>keyboards/kinesis/kint36/rules.mk</code>:</p>
<pre tabindex="0"><code>DEBOUNCE_TYPE = sym_eager_pk
</code></pre><p>Now, the extra 5ms are gone:</p>
<pre tabindex="0"><code>% benchstat screenlog-kint36-eager.0
name                 time/op
KeypressToLEDReport  2.12ms ¬±16%
</code></pre><p>Example change: <a href="https://github.com/qmk/qmk_firmware/pull/12626">https://github.com/qmk/qmk_firmware/pull/12626</a></p>
<h3 id="quickusbpolling">Quicker USB polling interval</h3>
<p>The USB host (computer) divides time into fixed-length segments called frames:</p>
<ul>
<li>USB Full Speed (USB 1.0) uses frames that are 1ms each.</li>
<li>USB High Speed (USB 2.0) introduces micro frames, which are 125Œºs.</li>
</ul>
<p>Each USB device specifies in its device descriptor how frequently (in frames)
the device should be polled. The <a href="https://en.wikipedia.org/wiki/USB_(Communications)#Transaction_latency">quickest polling
rate</a>
for USB 1.0 is 1 frame, meaning the device can send data after at most
1ms. Similarly, for USB 2.0, it‚Äôs 1 micro frame, i.e. send data every 125Œºs.</p>
<p>Of course, a quicker polling rate also means occupying resources on the USB bus
which are then no longer available to other devices. On larger USB hubs, this
might mean fewer devices can be used concurrently. The specifics of this
limitation depend on a lot of other factors, too. The polling rate plays a role,
in combination with the max. packet size and the number of endpoints.</p>
<p>Note that we are only talking about concurrent device usage, not about hogging
bandwidth: the bulk transfers that USB mass storage devices use are not any
slower in my tests. I achieve about 37 MiB/s with or without the kint41 USB 2.0
High Speed controller with <code>bInterval=1</code> present.</p>
<p>Even connecting two kint41 controllers at the same time still leaves enough
resources to use a Logitech C920 webcam in its most bandwidth-intensive pixel
format and resolution. The same cannot be said for e.g. NXP‚Äôs LPC-Link2 debug
probe.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Open question:</strong> Would declaring multiple alternate settings in our USB device
descriptor dynamically reduce resource usage? Our keyboard could offer one
alternate setting with <code>bInterval=1</code> and one with <code>bInterval=10</code>.</div>
  </div>
</aside>

<p>To display the configured interval, the Linux kernel provides a debug pseudo file:</p>
<pre tabindex="0"><code>% sudo cat /sys/kernel/debug/usb/devices

[‚Ä¶]
T:  Bus=01 Lev=02 Prnt=09 Port=02 Cnt=02 Dev#= 53 Spd=480  MxCh= 0
D:  Ver= 2.00 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
P:  Vendor=1209 ProdID=345c Rev= 0.01
S:  Manufacturer=&quot;https://github.com/stapelberg&quot;
S:  Product=&quot;kinT (kint41)&quot;
C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=500mA
I:* If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=01 Driver=usbhid
E:  Ad=81(I) Atr=03(Int.) MxPS=   8 Ivl=125us
I:* If#= 1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
E:  Ad=82(I) Atr=03(Int.) MxPS=  32 Ivl=125us
I:* If#= 2 Alt= 0 #EPs= 2 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
E:  Ad=83(I) Atr=03(Int.) MxPS=  32 Ivl=125us
E:  Ad=04(O) Atr=03(Int.) MxPS=  32 Ivl=125us
[‚Ä¶]
</code></pre><p>Alternatively, you can display the USB device descriptor using e.g. <code>sudo lsusb -v -d 1209:345c</code> and interpret the <code>bInterval</code> setting yourself.</p>
<p>The above shows the best case: a USB 2.0 High Speed device (<code>Spd=480</code>) with
<code>bInterval=1</code> in its device descriptor (<code>Iv=125us</code>).</p>
<p>The original Kinesis Advantage 2 keyboard controller (KB600) uses USB 2.0, but
in Full Speed mode (<code>Spd=12</code>), i.e. no faster than USB 1.1. In addition, they
specify <code>bInterval=10</code>, which results in a 10ms polling interval (<code>Ivl=10ms</code>):</p>
<pre tabindex="0"><code>T:  Bus=01 Lev=02 Prnt=09 Port=02 Cnt=02 Dev#= 52 Spd=12   MxCh= 0
D:  Ver= 2.00 Cls=00(&gt;ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
P:  Vendor=29ea ProdID=0102 Rev= 1.00
S:  Manufacturer=Kinesis
S:  Product=Advantage2 Keyboard
C:* #Ifs= 3 Cfg#= 1 Atr=a0 MxPwr=100mA
I:* If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=usbhid
E:  Ad=83(I) Atr=03(Int.) MxPS=   8 Ivl=10ms
I:* If#= 1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=01 Driver=usbhid
E:  Ad=84(I) Atr=03(Int.) MxPS=   8 Ivl=2ms
I:* If#= 2 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
E:  Ad=85(I) Atr=03(Int.) MxPS=   8 Ivl=2ms
</code></pre><p>My recommendation:</p>
<ul>
<li>With USB 1.1 Full Speed, definitely specify <code>bInterval=1</code>. I‚Äôm not aware of
any downsides.</li>
<li>With USB 2.0 High Speed, I also think <code>bInterval=1</code> is a good choice, but I am
less certain. If you run into trouble, reduce to <code>bInterval=3</code> and send me a
message :)</li>
</ul>
<p>For details on measuring, see <a href="#appendixb">Appendix B: USB polling interval (device
side)</a>.</p>
<p>Example change: <a href="https://github.com/qmk/qmk_firmware/pull/12625">https://github.com/qmk/qmk_firmware/pull/12625</a></p>
<h3 id="fastmatrixscan">Faster matrix scan</h3>
<p>The purpose of a keyboard controller is reporting pressed keys after scanning
the key matrix. The more scans a keyboard controller can do per second, the
faster it can react to your key press.</p>
<p>How many scans your controller does depends on multiple factors:</p>
<ul>
<li>
<p>The clock speed of your micro controller. It‚Äôs worth checking if your micro
controller model supports running at faster clock speeds, or upgrading your
keyboard to a faster model to begin with. There is a point of diminishing
returns, which I would guess is at ‚âà100 MHz. Comparing e.g. the kint36 at 120
MHz vs. 180 MHz, the difference in scan-to-scan is 5Œºs.</p>
</li>
<li>
<p>How much other code your firmware runs aside from matrix scanning. If you
enable any non-standard QMK features, or even self-written code, it‚Äôs worth
disabling and measuring.</p>
</li>
<li>
<p>Whether you run scans back-to-back or e.g. synchronized with USB
start-of-frame interrupts. QMK runs scans back-to-back, so this point is only
relevant for other firmwares.</p>
</li>
<li>
<p>How long you need to sleep to let the signal settle. Reducing your sleep times
results in more scans per second, but if you don‚Äôt sleep long enough, you‚Äôll
see ghost key presses. See also the next section about Shorter sleeps.</p>
</li>
</ul>
<p>For details on measuring, see the <a href="#scantoscandelay">Scan-to-scan delay section</a>
above.</p>
<p>I also tried configuring the GPIOs to be faster to see if that would reduce the
required unselect delay, but unfortunately there was no difference between the
default setting and the fastest setting: drive strength 6 (<code>DSE=6</code>), fast
slew rate (<code>SRE=1</code>), 200 MHz (<code>SPEED=3</code>).</p>
<h3 id="shortsleeps">Shorter sleeps</h3>
<p>QMK calls <a href="https://www.chibios.org/dokuwiki/doku.php?id=chibios:documentation:books:rt:kernel_threading#delays_api">ChibiOS‚Äôs <code>chThdSleepMicroseconds</code>
function</a>
in its matrix scanning code. This function unfortunately has a rather long
shortest sleep duration of 1 ChibiOS tick: if you tell it to sleep less than
100Œºs, it will still sleep at least 100Œºs!</p>
<p>This is a problem on controllers such as the kint41, where we want to sleep for
only 10Œºs.</p>
<p>The length of a ChibiOS tick is determined by how the ARM SysTick timer is set
up on the specific micro controller you‚Äôre using. While the SysTick timer itself
could be configured to fire more frequently, it is not advisable to shorten
ChibiOS ticks: <code>chSysTimerHandlerI()</code> <a href="http://forum.chibios.org/viewtopic.php?t=3712#p27851">must be executable in less than one
tick</a>.</p>
<p>Instead, I found it easier to implement short delays by busy-looping until the
ARM Cycle Counter Register (<code>CYCCNT</code>) indicates enough time has passed. Here‚Äôs
an example from <code>keyboards/kinesis/kint41/kint41.c</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#60a0b0;font-style:italic">// delay_inline sleeps for |cycles| (e.g. sleeping for F_CPU will sleep 1s).
</span><span style="color:#60a0b0;font-style:italic">//
</span><span style="color:#60a0b0;font-style:italic">// delay_inline assumes the cycle counter has already been initialized and
</span><span style="color:#60a0b0;font-style:italic">// should not be modified, i.e. is safe to call during keyboard matrix scan.
</span><span style="color:#60a0b0;font-style:italic">//
</span><span style="color:#60a0b0;font-style:italic">// ChibiOS enables the cycle counter in chcore_v7m.c.
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">static</span> <span style="color:#902000">void</span> <span style="color:#06287e">delay_inline</span>(<span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint32_t</span> cycles) {
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint32_t</span> start <span style="color:#666">=</span> DWT<span style="color:#666">-&gt;</span>CYCCNT;
  <span style="color:#007020;font-weight:bold">while</span> ((DWT<span style="color:#666">-&gt;</span>CYCCNT <span style="color:#666">-</span> start) <span style="color:#666">&lt;</span> cycles) {
    <span style="color:#60a0b0;font-style:italic">// busy-loop until time has passed
</span><span style="color:#60a0b0;font-style:italic"></span>  }
}

<span style="color:#902000">void</span> <span style="color:#06287e">matrix_output_unselect_delay</span>(<span style="color:#902000">void</span>) {
  <span style="color:#60a0b0;font-style:italic">// 600 cycles at 0.6 cycles/ns == 1Œºs
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint32_t</span> cycles_per_us <span style="color:#666">=</span> <span style="color:#40a070">600</span>;
  delay_inline(<span style="color:#40a070">10</span> <span style="color:#666">*</span> cycles_per_us);
}
</code></pre></div><p>Of course, the cycles/ns value is specific to the frequency at which your micro
controller runs, so this code needs to be adjusted for each platform.</p>
<h2 id="results">Results</h2>
<p>With the QMK keyboard firmware configured for lowest input latency, how do the
different Kinesis keyboard controller compare? Here are my measurements:</p>
<table>
<thead>
<tr>
<th>model</th>
<th>CPU speed</th>
<th>USB poll interval</th>
<th>scan-to-scan</th>
<th>scan rate</th>
<th>caps-to-report</th>
</tr>
</thead>
<tbody>
<tr>
<td>kint41</td>
<td>600 MHz</td>
<td>125Œºs</td>
<td>181Œºs</td>
<td>5456 scans/s</td>
<td>930¬µs ¬±17%</td>
</tr>
<tr>
<td>kinX</td>
<td>120 MHz</td>
<td>125Œºs</td>
<td>213Œºs</td>
<td>4694 scans/s</td>
<td>953¬µs ¬±15%</td>
</tr>
<tr>
<td>kint36</td>
<td>180 MHz</td>
<td>1000Œºs</td>
<td>444Œºs</td>
<td>2252 scans/s</td>
<td>1.97ms ¬±15%</td>
</tr>
<tr>
<td>kint2pp</td>
<td>16 MHz</td>
<td>1000Œºs</td>
<td>926Œºs</td>
<td>1078 scans/s</td>
<td>3.27ms ¬±32%</td>
</tr>
<tr>
<td>original</td>
<td>60 MHz</td>
<td>10000Œºs</td>
<td>1936Œºs</td>
<td>516 scans/s</td>
<td>13.6ms ¬±21%</td>
</tr>
</tbody>
</table>
<p>The changes required to obtain these results are included since QMK 0.12.38
(2021-04-20).</p>
<p><a href="https://github.com/kinx-project/kint/issues/5">kint41 support is being added</a>
with all required changes to begin with, but still in progress.</p>
<p>The following sections go into detail about the results.</p>
<h3 id="kint41">kint41</h3>
<p>I am glad that the most recent Teensy 4.1 micro controller takes the lead! The
kinX controller achieved similar numbers, but was quite difficult to build, so
few people ended up using it.</p>
<p>The key improvement compared to the Teensy 3.6 is the now-available USB 2.0 High
Speed, and the powerful clock speed of 600 MHz allows for an even faster matrix
scan rate.</p>
<h3 id="kinx">kinX</h3>
<p>In my <a href="/posts/2018-04-17-kinx-keyboard-controller/">previous article about the kinX
controller</a>, I measured the kinX
scan delay as ‚âà100Œºs. During my work on this article, I learnt that the ‚âà100Œºs
figure was misleading: the measurement code turned off interrupts to measure
only the scan function. While that is technically correct, it is not a useful
measure, as in practice, <a href="https://github.com/kinx-project/mk66f-fw/commit/cae21f3d13331061bcd8c9d411adbb0d7d8c0ae4">interrupts should not be
disabled</a>,
and the scanning function is interrupted frequently enough that it comes in at
‚âà208Œºs.</p>
<p>I also fixed the USB polling interval in the kinX firmware, which <a href="https://github.com/kinx-project/mk66f-fw/commit/b40ae0287ed3b042886e29621dbeecefba1c148b">wasn‚Äôt set to
<code>bInterval=1</code></a>.</p>
<h3 id="original-kinesis">Original Kinesis</h3>
<p>The original keyboard controller that the Kinesis Advantage 2 (KB600) keyboard
comes with uses <a href="https://www.microchip.com/wwwproducts/en/AT32UC3B0256#datasheet-toggle">an AT32UC3B0256 micro
controller</a>
which is clocked at 60 MHz, but the measured input latency is much higher than
even the slowest kint controller (kint2pp at 16 MHz). What gives?</p>
<p>Here‚Äôs what we can deduce without access to their firmware:</p>
<ol>
<li>They seem to be using an <a href="#eagerdebounce">eager debounce algorithm</a> (good!),
otherwise we would observe even higher latency.</li>
<li>Their <a href="#quickusbpolling">USB polling interval</a> setting (<code>bInterval=10</code>) is
excessively high, even more so because they are using USB Full Speed with
longer USB frames. I would recommend they change it to <code>bInterval=1</code> for up
to 10ms less input latency!</li>
<li>The matrix scan rate is twice as slow as with my kint2pp. I can‚Äôt say for
sure why this is. Perhaps their firmware does a lot of other things between
matrix scans.</li>
</ol>
<p>Note that we could not apply the <a href="#eagercaps">Eager Caps Lock LED</a> firmware
change to the original controller, which is why the measurement variance is
¬±21%. This variance includes ¬± 1.9ms for finishing a matrix scan before updating
the LED state.</p>
<h2 id="conclusion">Conclusion</h2>
<p>After analyzing the different controllers in my measurement environment, I think
the following factors play the largest role in keyboard input latency, ordered
by importance:</p>
<ol>
<li>Does the firmware use an <a href="#eagerdebounce">eager debounce algorithm</a>?</li>
<li>Does the device specify a <a href="#quickusbpolling">quick USB polling rate (<code>bInterval</code>
setting)</a>?</li>
<li>Is the matrix scan frequency in the expected range, or are there unexpected
slow-downs?</li>
</ol>
<p>Hopefully, this article gives you all the tools you need to measure and reduce
keyboard input latency of your own keyboard controller!</p>
<h2 id="appendix-a-isitsnappy">Appendix A: isitsnappy</h2>
<p>The iPhone app <a href="https://isitsnappy.com/">Is It Snappy?</a> records video using the
iPhone‚Äôs 240 fps camera and allows you to mark the frame that starts
respectively ends the measurement.</p>
<p>The app does a good job of making this otherwise tedious process of navigating a
video frame by frame much more pleasant.</p>
<p>However, for measuring keyboard input latency, I think this approach is futile:</p>
<ul>
<li>The resolution is too imprecise. At 240 fps, that means each frame represents
4.6ms of time, which is already higher than the input latency of our slowest
micro controller.</li>
<li>Visually deciding whether a key switch is pressed or not pressed, at
frame-perfect precision, seems impossible to me.</li>
</ul>
<p>I believe the app can work, provided the latency you want to measure is really
high. But with the devices covered in this article, the app couldn‚Äôt measure
even 10ms of injected input latency.</p>
<h2 id="appendixb">Appendix B: USB polling interval (device side)</h2>
<p>You can also verify the USB polling interval on the device side. In the SOF
(Start Of Frame) interrupt in <code>tmk_core/protocol/chibios/usb_main.c</code>, we can
print the cycle delta to the previous SOF callback, every second:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#include</span> <span style="color:#007020">&#34;timer.h&#34;</span><span style="color:#007020">
</span><span style="color:#007020"></span>
<span style="color:#007020;font-weight:bold">static</span> <span style="color:#902000">uint32_t</span> last_sof <span style="color:#666">=</span> <span style="color:#40a070">0</span>;
<span style="color:#007020;font-weight:bold">static</span> <span style="color:#902000">uint32_t</span> sof_timer <span style="color:#666">=</span> <span style="color:#40a070">0</span>;
<span style="color:#902000">void</span> <span style="color:#06287e">kbd_sof_cb</span>(USBDriver <span style="color:#666">*</span>usbp) {
  (<span style="color:#902000">void</span>)usbp;

  <span style="color:#902000">uint32_t</span> now <span style="color:#666">=</span> DWT<span style="color:#666">-&gt;</span>CYCCNT;
  <span style="color:#902000">uint32_t</span> delta <span style="color:#666">=</span> now <span style="color:#666">-</span> last_sof;
  last_sof <span style="color:#666">=</span> now;

  <span style="color:#902000">uint32_t</span> timer_now <span style="color:#666">=</span> timer_read32();
  <span style="color:#007020;font-weight:bold">if</span> (TIMER_DIFF_32(timer_now, sof_timer) <span style="color:#666">&gt;</span> <span style="color:#40a070">1000</span>) {
    sof_timer <span style="color:#666">=</span> timer_now;
    dprintf(<span style="color:#4070a0">&#34;sof delta: %u cycles&#34;</span>, delta);
  }
}
</code></pre></div><p>Using <code>hid_listen</code>, we expect to see ‚âà75000 cycles of delta, which
corresponds to the 125Œºs microframe latency of USB 2.0 High Speed with
<code>bInterval=1</code> in the USB device descriptor:</p>
<p>125Œºs * 1000 * 0.6 cycles/ns = 75000 cycles</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Linux and USB virtual serial devices (CDC ACM)]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/"/>
    <id>https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/</id>
    <published>2021-04-27T08:18:00+02:00</published>
    <content type="html"><![CDATA[<p>During my work on <a href="https://www.pjrc.com/store/teensy41.html">Teensy 4.1</a> support
in <a href="https://en.wikipedia.org/wiki/ChibiOS/RT">ChibiOS</a> for the QMK keyboard
firmware, I noticed that ChibiOS‚Äôs virtual serial device USB demo would
sometimes print garbled output, and that I would never see the ChibiOS shell
prompt.</p>
<p>This article walks you through diagnosing and working around this issue, in the
hope that it helps others who are working with micro controllers and USB virtual
serial devices.</p>
<h2 id="background">Background</h2>
<p>Serial interfaces are often the easiest option when working with micro
controllers to print text: you only connect <code>GND</code> and the micro controller‚Äôs
serial <code>TX</code> pin to a USB-to-serial converter. The <code>RX</code> pin is only needed when
you want to send text to the micro controller as well.</p>
<p>While conceptually simple, the requirement for an extra piece of hardware
(USB-to-serial adapter) is annoying. If your micro controller has a working USB
interface and USB stack, a popular alternative is for the micro controller to
provide a virtual serial device via USB.</p>
<p>This way, you just need one USB cable between your micro controller and
computer, reusing the same connection you already use for programming the
device.</p>
<p>A popular choice within this solution is to provide a device conforming to the
USB Communications Device Class (CDC) standard, specifically its Abstract
Control Model (ACM), which is typically used for modem hardware.</p>
<p>On Linux, these devices show up as e.g. <code>/dev/ttyACM0</code>. In case you‚Äôre
wondering: <code>/dev/ttyUSB0</code> device names are used by more specific drivers
(vendor-specific). The blog post <a href="https://rfc1149.net/blog/2013/03/05/what-is-the-difference-between-devttyusbx-and-devttyacmx/">What is the difference between /dev/ttyUSB and
/dev/ttyACM?</a>
goes into a lot more detail.</p>
<h2 id="modemmanager">ModemManager</h2>
<p>One unfortunate side-effect of using a modem standard to provide a generic
serial device is that modem-related software might mistake our micro controller
for a modem.</p>
<p>Use the following command to disable ModemManager until the next reboot, which
otherwise might open and probe any new serial devices:</p>
<pre tabindex="0"><code>% sudo systemctl mask --runtime --now ModemManager
</code></pre><h2 id="problem-statement">Problem statement</h2>
<p>With a regular, non-USB serial interface, you can send data at any time. If
nobody is receiving the data on the other end, the micro controller doesn‚Äôt care
and still writes serial data.</p>
<p>When using the ChibiOS shell with a regular serial interface, this means that if
you open the serial interface too late, you will not see the ChibiOS shell
prompt. But, if you have the serial interface already opened when powering on
your device, you will be greeted by ChibiOS‚Äôs shell prompt:</p>
<pre tabindex="0"><code>ChibiOS/RT Shell
ch&gt; 
</code></pre><p>With a USB serial, however, the host will not transfer data from the device
until the serial interface is opened. This means that writes to the USB serial
can block, whereas writes to the UART serial will not block but may go ignored
if nobody is listening.</p>
<p>So when I open the USB serial interface, I would expect to see the ChibiOS shell
prompt like above. Instead, I would often not see any prompt at all, and I would
even sometimes see garbled output like this:</p>
<pre tabindex="0"><code>cch&gt; biOS/RT She
</code></pre><h2 id="usb-analysis-with-wireshark">USB analysis with Wireshark</h2>
<p><a href="https://en.wikipedia.org/wiki/Wireshark">Wireshark</a> allows us to analyze USB
traffic in combination with the <code>usbmon</code> Linux kernel module.</p>
<p>Looking through the captured packets, I noticed unexpected packets from the host
(computer) to the device (micro controller), specifically containing the
following bytes:</p>
<ol>
<li>hex <code>0xa</code> = ASCII <code>\n</code></li>
<li>hex <code>0xd</code> = ASCII <code>\r</code></li>
</ol>
<p>Seeing any packets in this direction is unexpected, because I am only opening
the serial interface <strong>for reading</strong>, and I am not consciously sending
anything. So where do the packets come from?</p>
<p>To verify I am not missing any nuance of the CDC protocol, I added debug
statements to the ChibiOS shell to log any incoming data. The <code>\n\r</code> bytes
indeed make it to the ChibiOS shell.</p>
<p>When the shell receives a line break, it prints a new prompt. This seems to be
the reason why I‚Äôm seeing garbled data: while the output is transferred to the
host, line breaks are received, causing more data transfers. It‚Äôs as if somebody
was hammering the return key really quickly.</p>
<h2 id="linux-tty-echo-vs-chibios-shell-banner">Linux tty echo vs. ChibiOS shell banner</h2>
<p>The unexpected <code>\n\r</code> bytes turn out to come from the Linux USB CDC ACM driver,
or its interplay with the Linux tty driver, to be specific. The CDC ACM driver
is a kind of tty driver, so it is built atop the Linux tty infrastructure, whose
<a href="https://elixir.bootlin.com/linux/v5.11.16/source/drivers/tty/tty_io.c#L122">standard settings include various <code>ECHO</code>
flags</a>.</p>
<p>When echoing is enabled, the ChibiOS shell banner triggers echo characters,
which in turn are interpreted as input to the shell, causing garbled output.</p>
<p>So why is echoing enabled? Wouldn‚Äôt a terminal emulator turn off echoing first
thing?</p>
<p>Yes. But, when the CDC ACM driver receives the first data transfer via USB
(already queued), the standard tty settings are still in effect, because the
application did not yet have a chance to set its tty configuration up!</p>
<p>This can be verified by running the following command on a Linux host:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">% stty -F /dev/ttyACM0 <span style="color:#40a070">115200</span> -echo -echoe -echok
</code></pre></div><p>Even though the command‚Äôs sole purpose is to configure the tty, its opening of
the device still causes the banner to print, and echoing to happen, and garbled
output is the result.</p>
<p>It turns out this is a somewhat common problem. Hence, the Linux USB CDC ACM
driver <a href="https://elixir.bootlin.com/linux/v5.11.16/source/drivers/usb/class/cdc-acm.c#L1708">has a quirks
table</a>,
in which devices that print a banner select the <code>DISABLE_ECHO</code> quirk, which
results in the CDC ACM driver turning off the echoing termios flag early:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020;font-weight:bold">static</span> <span style="color:#007020;font-weight:bold">const</span> <span style="color:#007020;font-weight:bold">struct</span> usb_device_id acm_ids[] <span style="color:#666">=</span> {
	<span style="color:#60a0b0;font-style:italic">/* quirky and broken devices */</span>
	{ USB_DEVICE(<span style="color:#40a070">0x0424</span>, <span style="color:#40a070">0x274e</span>), <span style="color:#60a0b0;font-style:italic">/* Microchip Technology, Inc. */</span>
	  .driver_info <span style="color:#666">=</span> DISABLE_ECHO, }, <span style="color:#60a0b0;font-style:italic">/* DISABLE ECHO in termios flag */</span>
<span style="color:#60a0b0;font-style:italic">// ‚Ä¶
</span></code></pre></div><p>So, a quick solution to turn off echoing early is to change your USB vendor and
product id (VID/PID) to an ID for which the Linux kernel applies the
<code>DISABLE_ECHO</code> quirk, e.g.:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#define USB_DEVICE_VID 0x0424
</span><span style="color:#007020">#define USB_DEVICE_PID 0x274e
</span></code></pre></div><h2 id="flushing-in-screen">Flushing in Screen</h2>
<p>With tty echo disabled, I don‚Äôt see garbled output anymore, but still wouldn‚Äôt
always see the ChibiOS shell prompt!</p>
<p>This issue turned out to be specific to the terminal emulator program I‚Äôm
using. For many years, I have been using
<a href="https://en.wikipedia.org/wiki/GNU_Screen">Screen</a> for serial devices of any
sort.</p>
<p>I was surprised to learn during this investigation that Screen <a href="https://git.savannah.gnu.org/cgit/screen.git/tree/src/window.c?id=d7bd327fdf799c82f9a359365d461edb755056ea#n971">flushes any
pending
output</a>
when opening the device. This typically isn‚Äôt a problem because adapter-backed
serial devices are opened once and then stay open. USB virtual serial devices
however are only opened when used, and disappear when loading new program code
onto your micro controller.</p>
<p>I verified this is the problem by using <a href="https://manpages.debian.org/cat.1"><code>cat(1)</code></a>
 instead, with which I can indeed see the prompt:</p>
<pre tabindex="0"><code>% cat /dev/ttyACM0

ChibiOS/RT Shell
                
                ch&gt; 
</code></pre><p>After commenting out the flush call in Screen‚Äôs sources, I could see the prompt
in Screen as well.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Tip:</strong> During the review phase of this article,
<a href="https://github.com/tio/tio/">tio</a> was pointed out to me as a terminal program
which automatically reconnects. This won‚Äôt help with the problem at hand, but
seems handy nevertheless.</div>
  </div>
</aside>

<h2 id="line-ending-conversion">Line ending conversion</h2>
<p>Now that we no longer flush the prompt away, why is the spacing still incorrect,
and where does it go wrong?</p>
<pre tabindex="0"><code>
ChibiOS/RT Shell
                
                ch&gt; 
</code></pre><p>If we use <a href="https://manpages.debian.org/strace.1"><code>strace(1)</code></a>
 to see what <a href="https://manpages.debian.org/screen.1"><code>screen(1)</code></a>
 or <a href="https://manpages.debian.org/cat.1"><code>cat(1)</code></a>
 read from
the driver, we see:</p>
<pre tabindex="0"><code>797270 read(7, &quot;\n\nChibiOS/RT Shell\n\nch&gt; &quot;, 4096) = 24
</code></pre><p>We would have expected <code>&quot;\r\nChibiOS/RT Shell\r\nch&gt; &quot;</code> instead, meaning all
Carriage Returns (<code>\r</code>) have been translated to Newlines (<code>\n</code>).</p>
<p>This is again due to the <a href="https://elixir.bootlin.com/linux/v5.11.16/source/drivers/tty/tty_io.c#L122">Linux tty driver‚Äôs default termios
settings</a>:
<code>c_iflag</code> enables option <code>ICRNL</code> by default, which translates <code>CR</code> (Carriage
Return) to <code>NL</code> (Newline).</p>
<p>Unfortunately, contrary to the <code>DISABLE_ECHO</code> quirk, there is no corresponding
quirk in the Linux ACM driver to turn off line ending conversion, so a fix would
need a Linux kernel driver change!</p>
<h2 id="device-side-workaround-wait-until-opened">Device-side workaround: wait until opened</h2>
<p>At this point, we have covered a few problems that would need to be fixed:</p>
<ol>
<li>Change USB VID/PID to get the <code>DISABLE_ECHO</code> quirk in the driver.</li>
<li>Recompile terminal emulator programs to remove flushing, if needed.</li>
<li>Modify kernel driver to add quirk to disable Carriage Return (<code>\r</code>) conversion.</li>
</ol>
<p>Time for a quick reality check: this seems too hard and too long a time for all
parts of the stack to be fixed. Is there an easier way, and why don‚Äôt others run
into this problem? If only the device didn‚Äôt print its banner so early, that
would circumvent all of the problems above, too!</p>
<p>Luckily, the host actually notifies the device when a terminal emulator program
opens the USB serial device by sending a <code>CDC_SET_CONTROL_LINE_STATE</code> request. I
verified this behavior on Linux, Windows and macOS.</p>
<p>So, let‚Äôs implement a workaround in our device code! We will delay starting the
shell until:</p>
<ol>
<li>The USB serial device was opened (not just configured).</li>
<li>An additional delay of 100ms has passed to give the terminal emulator
application a chance to configure the serial device.</li>
</ol>
<p>In our <code>main.c</code> loop, we wait until USB is active, and until we receive the
first <code>CDC_SET_CONTROL_LINE_STATE</code> request because the serial port was opened:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  <span style="color:#007020;font-weight:bold">while</span> (<span style="color:#007020">true</span>) {
    <span style="color:#007020;font-weight:bold">if</span> (SDU1.config<span style="color:#666">-&gt;</span>usbp<span style="color:#666">-&gt;</span>state <span style="color:#666">==</span> USB_ACTIVE) {
      chSemWait(<span style="color:#666">&amp;</span>scls);
      chThdSleepMilliseconds(<span style="color:#40a070">100</span>);

      thread_t <span style="color:#666">*</span>shelltp <span style="color:#666">=</span> chThdCreateFromHeap(<span style="color:#007020">NULL</span>, SHELL_WA_SIZE, <span style="color:#4070a0">&#34;shell&#34;</span>, NORMALPRIO <span style="color:#666">+</span> <span style="color:#40a070">1</span>, shellThread, (<span style="color:#902000">void</span> <span style="color:#666">*</span>)<span style="color:#666">&amp;</span>shell_cfg1);
      chThdWait(shelltp);
    }
  }
</code></pre></div><p>And in our <code>usbcfg.c</code>, when receiving a <code>CDC_SET_CONTROL_LINE_STATE</code> request, we
will reset the semaphore to non-blockingly wake up all waiters:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020;font-weight:bold">extern</span> semaphore_t scls;

<span style="color:#902000">bool</span> <span style="color:#06287e">requests_hook</span>(USBDriver <span style="color:#666">*</span>usbp) {
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">bool</span> result <span style="color:#666">=</span> sduRequestsHook(usbp);

  <span style="color:#007020;font-weight:bold">if</span> ((usbp<span style="color:#666">-&gt;</span>setup[<span style="color:#40a070">0</span>] <span style="color:#666">&amp;</span> USB_RTYPE_TYPE_MASK) <span style="color:#666">==</span> USB_RTYPE_TYPE_CLASS <span style="color:#666">&amp;&amp;</span>
      usbp<span style="color:#666">-&gt;</span>setup[<span style="color:#40a070">1</span>] <span style="color:#666">==</span> CDC_SET_CONTROL_LINE_STATE) {
    osalSysLockFromISR();
    chSemResetI(<span style="color:#666">&amp;</span>scls, <span style="color:#40a070">0</span>);
    osalSysUnlockFromISR();
  }

  <span style="color:#007020;font-weight:bold">return</span> result;
}
</code></pre></div><h2 id="screenshots-mac-and-windows">Screenshots: Mac and Windows</h2>
<p>Aside from Linux, I also verified the workaround works on a Mac (with Screen):</p>















<a href="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-mac.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-mac_hua212d00f133d3e078e4a79add9443e49_282377_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-mac_hua212d00f133d3e078e4a79add9443e49_282377_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-mac_hua212d00f133d3e078e4a79add9443e49_282377_600x0_resize_q75_box.jpg"
  alt="USB virtual serial device on macOS" title="USB virtual serial device on macOS"
  width="600"
  height="671"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>‚Ä¶and that it works on Windows (with PuTTY):</p>















<a href="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-windows10.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-windows10_hu799653fda6c3be4562e44d8be91712f4_279174_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-windows10_hu799653fda6c3be4562e44d8be91712f4_279174_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-27-linux-usb-virtual-serial-cdc-acm/chibios-acm-windows10_hu799653fda6c3be4562e44d8be91712f4_279174_600x0_resize_q75_box.jpg"
  alt="USB virtual serial device on Windows 10" title="USB virtual serial device on Windows 10"
  width="600"
  height="338"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Emacs: overriding the project.el project directory]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-04-02-emacs-project-override/"/>
    <id>https://michael.stapelberg.ch/posts/2021-04-02-emacs-project-override/</id>
    <published>2021-04-02T14:08:23+02:00</published>
    <content type="html"><![CDATA[<p>I recently learnt about the Emacs package <code>project.el</code>, which is used to figure
out which files and directories belong to the same project. This is <a href="https://github.com/joaotavora/eglot/blob/2fbcab293e11e1502a0128ca5f59de0ea7888a75/eglot.el#L738">used under
the covers by
<code>Eglot</code></a>,
for example.</p>
<p>In practice, a project is recognized by looking for Git repositories, which is a
decent first approximation that often just works.</p>
<p>But what if the detection fails? For example, maybe you want to anchor your
project-based commands in a parent directory that contains multiple Git
repositories.</p>
<p>Luckily, we can provide our own entry to the <code>project-find-functions</code> hook, and
look for a <code>.project.el</code> file in the parent directories:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-elisp" data-lang="elisp"><span style="color:#60a0b0;font-style:italic">;; Returns the parent directory containing a .project.el file, if any,</span>
<span style="color:#60a0b0;font-style:italic">;; to override the standard project.el detection logic when needed.</span>
(<span style="color:#007020">defun</span> <span style="color:#bb60d5">zkj-project-override</span> (<span style="color:#bb60d5">dir</span>)
  (<span style="color:#007020">let</span> ((<span style="color:#bb60d5">override</span> (<span style="color:#bb60d5">locate-dominating-file</span> <span style="color:#bb60d5">dir</span> <span style="color:#4070a0">&#34;.project.el&#34;</span>)))
    (<span style="color:#007020">if</span> <span style="color:#bb60d5">override</span>
      (<span style="color:#06287e">cons</span> <span style="color:#517918">&#39;vc</span> <span style="color:#bb60d5">override</span>)
      <span style="color:#60add5">nil</span>)))

(<span style="color:#007020">use-package</span> <span style="color:#bb60d5">project</span>
  <span style="color:#60a0b0;font-style:italic">;; Cannot use :hook because &#39;project-find-functions does not end in -hook</span>
  <span style="color:#60a0b0;font-style:italic">;; Cannot use :init (must use :config) because otherwise</span>
  <span style="color:#60a0b0;font-style:italic">;; project-find-functions is not yet initialized.</span>
  <span style="color:#007020">:config</span>
  (<span style="color:#bb60d5">add-hook</span> <span style="color:#517918">&#39;project-find-functions</span> <span style="color:#06287e">#&#39;</span><span style="color:#bb60d5">zkj-project-override</span>))
</code></pre></div><p>Now, we can use <code>touch .project.el</code> in any directory to make <code>project.el</code>
recognize the directory as project root!</p>
<p>By the way, in case you are unfamiliar, the configuration above uses
<a href="https://github.com/jwiegley/use-package"><code>use-package</code></a>, which is a great way
to (lazily, i.e. quickly!) load and configure Emacs packages.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Tip:</strong> With <a href="https://www.reddit.com/r/emacs/comments/jt8csn/fzf_from_project_root/">a few lines of
code</a>,
you can anchor helpful project-wide tools such as <code>fzf</code> (fuzzy finder) or <code>ag</code>
(Ack Grep) in the <code>project.el</code> root, too!</div>
  </div>
</aside>

]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Eclipse: Enabling Compilation Database (CDB, compile_commands.json) in NXP MCUXpresso v11.3]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/"/>
    <id>https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/</id>
    <published>2021-04-01T11:59:23+02:00</published>
    <content type="html"><![CDATA[<p>NXP‚Äôs Eclipse-based MCUXpresso IDE is the easiest way to make full use of the
hardware debugging features of modern NXP micro controllers such as the <a href="https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/i-mx-rt-crossover-mcus/i-mx-rt1060-crossover-mcu-with-arm-cortex-m7-core:i.MX-RT1060">i.MX
RT1060</a>
found on the <a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/mimxrt1060-evk-i-mx-rt1060-evaluation-kit:MIMXRT1060-EVK">NXP i.MX RT1060 Evaluation Kit
(<code>MIMXRT1060-EVK</code>)</a>,
which I use for Teensy 4 development.</p>
<p>For projects that are fully under your control, such as imported SDK examples,
or anything you created within Eclipse, you wouldn‚Äôt necessarily need
Compilation Database support.</p>
<p>When working with projects of type <code>Makefile Project with Existing Code</code>,
however, Eclipse doesn‚Äôt know about preprocessor definition flags and include
directories, unless you would manually duplicate them. In large and
fast-changing projects, this is not an option.</p>
<p>The lack of compiler configuration knowledge (defines and include directories)
breaks various C/C++ tooling features, such as Macro Expansion or the <code>Open Declaration</code> feature, both of which are an essential tool in my toolbelt, and
particularly useful in large code bases such as micro controller projects with
various SDKs etc.</p>
<p>In some configurations, Eclipse might be able to parse GCC build output, but
when I was working with the <a href="https://qmk.fm/">QMK keyboard firmware</a>, I couldn‚Äôt
get the QMK makefiles to print commands that Eclipse would understand, not even
with <code>VERBOSE=true</code>.</p>
<p>Luckily, there is a solution! <a href="https://wiki.eclipse.org/CDT/User/NewIn910#Build">Eclipse CDT 9.10 introduced Compilation Database
support</a> in 2019. MCUXpresso
v11.3.0 ships with CDT 9.11.1.202006011430, meaning it does contain Compilation
Database support.</p>
<p>In case you want to check which version your installed IDE has, open <code>Help</code> ‚Üí
<code>About MCUXpresso IDE</code>, click <code>Installation Details</code>, open the <code>Features</code> tab,
then locate the <code>Eclipse CDT</code>, <code>C/C++ Development Platform</code> line.</p>
<p>For comparison, Eclipse IDE 2021-03 contains 10.2.0.202103011047, if you want to
verify that the issues I reference below are indeed fixed.</p>
<h2 id="bug-command-vs-arguments">Bug: command vs. arguments</h2>
<p>Before we can enable Compilation Database support, we need to ensure we have a
compatible <code>compile_commands.json</code> database file. Eclipse CDT‚Äôs Compilation
Database support before version CDT 10 suffered from <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=563006">Bug
563006</a>: it only
understood the <code>command</code> JSON property, not the <code>arguments</code> property.</p>
<p>Depending on your build system, this isn‚Äôt a problem. For example, Meson/ninja‚Äôs
<code>compile_commands.json</code> uses <code>command</code> and will work fine.</p>
<p>But, when using Make with <a href="https://github.com/rizsotto/Bear">Bear</a>, you will end
up with <code>arguments</code> by default.</p>
<p>Bear 3.0 allows generating a <code>compile_commands.json</code> Compilation Database with
<code>command</code>, but <a href="https://github.com/rizsotto/Bear/issues/196#issuecomment-691748584">requires multiple commands and config
files</a>,
which is a bit inconvenient with Eclipse.</p>
<p>So, let‚Äôs put the extra commands into a <code>commandbear.sh</code> script:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007020">#!/bin/sh
</span><span style="color:#007020"></span>
<span style="color:#007020">set</span> -eux

intercept --output commands.json -- <span style="color:#4070a0">&#34;</span><span style="color:#bb60d5">$@</span><span style="color:#4070a0">&#34;</span>
citnames <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  --input commands.json <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  --output compile_commands.json <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  --config config.json
</code></pre></div><p>The <code>&quot;command_as_array&quot;: false</code> option goes into <code>config.json</code>:</p>
<pre tabindex="0"><code>{
  &quot;compilation&quot;: {
  },
  &quot;output&quot;: {
    &quot;content&quot;: {
      &quot;include_only_existing_source&quot;: true
    },
    &quot;format&quot;: {
      &quot;command_as_array&quot;: false,
      &quot;drop_output_field&quot;: false
    }
  }
}
</code></pre><p>Don‚Äôt forget to make the script executable:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chmod +x commandbear.sh
</code></pre></div><p>Then configure Eclipse to use the <code>commandbear.sh</code> script to build:</p>
<ol>
<li>Open Project Properties by right-clicking your project in the Project
Explorer panel.</li>
<li>Select <code>C/C++ Build</code> and open the <code>Builder Settings</code> tab</li>
<li>In the <code>Builder</code> group, set the <code>Build command</code> text field to:
<code>${workspace_loc:/qmk_firmware}/commandbear.sh make -j16</code></li>
</ol>
<p>Verify your build is working by selecting <code>Project</code> ‚Üí <code>Clean‚Ä¶</code> and triggering a
build.</p>
<h2 id="enabling-compilation-database-support">Enabling Compilation Database support</h2>
<ol>
<li>Open Project Properties by right-clicking your project in the Project
Explorer panel.</li>
<li>Expand <code>C/C++ General</code>, select <code>Preprocessor Include Paths, Macros etc.</code> and
open the <code>Providers</code> tab.</li>
<li>Untick everything but:
<ul>
<li>MCU GCC Built-in Compiler Parser</li>
<li>MCU GCC Build Output Parser</li>
<li>Compilation Database Parser</li>
</ul>
</li>
<li>Select <code>Compilation Database Parser</code>, click <code>Apply</code> to make the Compilation
Database text field editable.</li>
<li>Put a full path to your compile_commands.json file into the text field,
e.g. <code>/home/michael/kinx/workspace/qmk_firmware/compile_commands.json</code>. Note
that variables will not be expanded! Support for using variables was added
later in <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=559186">Bug 559186</a>.</li>
<li>Select <code>MCU GCC Build Output Parser</code> as <code>Build parser</code>.</li>
<li>Tick the <code>Exclude files not in the Compilation Database</code> checkbox.</li>
<li>Click <code>Apply and Close</code>.</li>
</ol>















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1_hu2472da729552826bf692ea90f41fcb42_1282459_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1_hu2472da729552826bf692ea90f41fcb42_1282459_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1_hu2472da729552826bf692ea90f41fcb42_1282459_600x0_resize_q75_box.jpg"
  alt="Compilation Database Parser settings" title="Compilation Database Parser settings"
  width="600"
  height="562"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>You will know Compilation Database support works when its progress view shows
up:</p>















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2_hu3785c06d044add2745f30f8a2a36e111_353949_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2_hu3785c06d044add2745f30f8a2a36e111_353949_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2_hu3785c06d044add2745f30f8a2a36e111_353949_600x0_resize_q75_box.jpg"
  alt="Compilation Database progress" title="Compilation Database progress"
  width="600"
  height="179"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>If you have an incompatible or empty <code>compile_commands.json</code>, nothing visible
will happen (no progress indicator or error messages).</p>
<p>After indexing completes, you should see:</p>
<ol>
<li>Files that were not used as greyed out in the <code>Project Explorer</code></li>
<li><code>Open Declaration</code> in the context menu of a selected identifier (or <code>F3</code>)
should jump to the correct file. For example, my test sequence for this
feature in the QMK repository is:
<ul>
<li>in <code>tmk_core/protocol/chibios/main.c</code>, open <code>init_usb_driver</code></li>
<li>open <code>usbStart</code>, should bring up <code>lib/chibios</code> git submodule</li>
<li>open <code>usb_lld_start</code>, should bring up <code>MIMXRT1062</code> port</li>
</ul>
</li>
<li>Macros expanded correctly, e.g. <code>MIMXRT1062_USB_USE_USB1</code> in the following
example</li>
</ol>















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6_hu9efc4b93b6aefec1d634e69f8dd62cd0_914059_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6_hu9efc4b93b6aefec1d634e69f8dd62cd0_914059_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6_hu9efc4b93b6aefec1d634e69f8dd62cd0_914059_600x0_resize_q75_box.jpg"
  alt="Compilation Database in effect: files greyed out and macros expanded" title="Compilation Database in effect: files greyed out and macros expanded"
  width="600"
  height="301"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="slow-file-exclusion-in-projects-with-many-files">Slow file exclusion in projects with many files</h2>
<p><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=565457">Bug 565457</a> explains an
optimization in the algorithm used to generate the list of excluded paths, which
I would summarize as ‚Äúuse whole directories instead of individual files‚Äù.</p>
<p>This optimization was introduced later, so in MCUXpresso v11.3, we still have to
endure watching the slow algorithm for a few seconds:</p>















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4_hu3785c06d044add2745f30f8a2a36e111_391538_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4_hu3785c06d044add2745f30f8a2a36e111_391538_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4_hu3785c06d044add2745f30f8a2a36e111_391538_600x0_resize_q75_box.jpg"
  alt="Compilation Database exclusion slow" title="Compilation Database exclusion slow"
  width="600"
  height="179"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="conclusion">Conclusion</h2>
<p>NXP, please release a new MCUXpresso IDE with a more recent CDT version!</p>
<p>The improvements in the newer version would make the setup so much simpler.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Make your intercom smarter with an MQTT backpack]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/"/>
    <id>https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/</id>
    <published>2021-03-13T16:54:00+01:00</published>
    <content type="html"><![CDATA[<p>I bought the cheapest compatible BTicino intercom device (BT 344232 for 32 ‚Ç¨)
that I could find on eBay, then soldered in 4 wires and added microcontrollers
to make it smart. It now connects to my <a href="https://nuki.io/en/opener/">Nuki Opener Smart Intercom IOT
device</a>, and to <a href="/posts/2021-01-10-mqtt-introduction/">my local MQTT Pub/Sub
bus</a> (why not?).</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_600x0_resize_q75_box.jpg"
  alt="modified BTicino" title="modified BTicino"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="background">Background</h2>
<p>In my <a href="/posts/2020-11-30-scs-processing-microcontroller/">last post about the BTicino intercom from
November</a>, I described how to
use a Teensy microcontroller to reliably interpret SCS bus signals and drive a
Nuki Opener (Smart Intercom).</p>
<p>Originally, I had hoped the Nuki developers would be able to fix their device
based on my SCS bus research, but they don‚Äôt seem to be interested. Instead,
their support actually suggested I run my microcontroller workaround
indefinitely!</p>
<p>Hence, I decided to work on the next revision to clean up my setup in terms of
cable clutter. I also figured: if I already need to run my own microcontroller,
I also want to connect it to my local <a href="/posts/2021-01-10-mqtt-introduction/">MQTT Pub/Sub
bus</a> for maximum flexibility.</p>
<p>Unfortunately, the Teensy microcontroller lacks built-in WiFi, or any kind of
networking.</p>
<p>I switched to an ESP32-based microcontroller, but powering those from the SCS
bus seems like a bad idea: they draw a lot of power, and building small
high-quality power supplies is hard.</p>
<p>This made me scrap <a href="https://twitter.com/zekjur/status/1331646748989788160">my previous plans to make my own SCS send/receive
hardware</a>.</p>
<p>Instead, I wondered what the easiest yet most reliable approach might be to make
this intercom unit smart. Instead of building my own SCS hardware, could I use
the intercom unit itself to send the door unlock signal, and could I obtain the
unit‚Äôs already-decoded SCS bus signal?</p>
<h2 id="finding-the-signals">Finding the signals</h2>
<p>Based on my previous research, I roughly knew what to expect: closest to the bus
terminals, there will be some components that filter the bus signal and convert
the 27V into a lower voltage. Connected to that power supply is a
microcontroller which deals with all user interface.</p>
<p>To learn more about the components, I first identified all <a href="https://en.wikipedia.org/wiki/Integrated_circuit">ICs (Integrated
Circuits)</a> based on their
labeling. The following are relevant:</p>
<ul>
<li><a href="https://www.ti.com/lit/ds/symlink/lm393-n.pdf">TI LM393</a>: Dual Comparators</li>
<li><a href="https://www.ti.com/lit/ds/symlink/lp2951-q1.pdf">TI LP2951</a>: Adjustable Micropower Voltage Regulators, 5V output</li>
<li><a href="http://ww1.microchip.com/downloads/en/devicedoc/41202c.pdf">Microchip PIC16F684</a>: 8-bit microcontroller</li>
</ul>
<p>I connected my development intercom unit to <a href="/posts/2020-11-30-scs-processing-microcontroller/#scs-lab-setup">my SCS bus lab
setup</a> and used
my oscilloscope to confirm expected signal levels based on the pinout from the
IC datasheets.</p>
<p>I settled on the following 4 relatively easily accessible signals and soldered
jumper wires to them:</p>
<ul>
<li><code>5V</code> and <code>GND</code>: 5V, 100mA. Our QT Py microcontroller uses 7mA.</li>
<li><code>OPEN5V</code>: activates the button which unlocks the door</li>
<li><code>SCSRX5V</code>: converted SCS signal</li>
</ul>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals_huad180b5f717872783fbf44350a70ae1a_718323_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals_huad180b5f717872783fbf44350a70ae1a_718323_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals_huad180b5f717872783fbf44350a70ae1a_718323_600x0_resize_q75_box.jpg"
  alt="BTicino signals" title="BTicino signals"
  width="600"
  height="631"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="converting-the-signals">Converting the signals</h2>
<p>Because the BTicino intercom units runs at 5V, but more modern microcontrollers
run at 3.3V, we need to convert between the two voltages:</p>
<ol>
<li>
<p>We need to convert a 3.3V signal to <code>OPEN5V</code> to trigger opening the door.</p>
</li>
<li>
<p>We need to convert <code>SCSRX5V</code> signal to 3.3V so that I can use an ESP32
microcontroller to read the signal and place it on MQTT.</p>
</li>
</ol>
<p>Here‚Äôs the corresponding schematic:</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic.png"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic_hucc6cb59bde9ea030d5dc2bcd00b21a79_47323_1200x0_resize_box_3.png 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic_hucc6cb59bde9ea030d5dc2bcd00b21a79_47323_1800x0_resize_box_3.png 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic_hucc6cb59bde9ea030d5dc2bcd00b21a79_47323_600x0_resize_box_3.png"
  alt="schematic" title="schematic"
  width="600"
  height="564"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="microcontroller-selection">Microcontroller selection</h2>
<p>I eventually decided to task a dedicated microcontroller with the signal
conversion, instead of having the WiFi-enabled microcontroller do everything,
for multiple reasons:</p>
<ul>
<li>
<p>Reliability. It turns out that using a hardware analog comparator results in a
much higher signal quality than continuously sampling an ADC yourself, even
when using the ESP32‚Äôs <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/ulp.html">ULP (Ultra Low Power)
co-processor</a>
to do the sampling.</p>
</li>
<li>
<p>Easy implementation. Converting an SCS signal to a serial signal is literally
<a href="/posts/2020-11-30-scs-processing-microcontroller/#analog-comparator-modification">a single <code>delayMicroseconds(20);</code> call in the right
place</a>. Having
a whole microcontroller for only this task eliminates any concurrency
concerns. I have not had to debug or change the software even once in the last
few months.</p>
</li>
<li>
<p>Easy debugging/introspection. I can connect a standard USB-to-serial adapter
and verify the signal is read correctly. This quickly narrows down issues on
either side of the serial interface. Issues with the microcontroller side can
be reproduced by sending serial data.</p>
</li>
</ul>
<p>Here are the 2 microcontrollers I‚Äôm using in this project, plus the Teensy I
used previously:</p>
<table>
<thead>
<tr>
<th>Microcontroller</th>
<th>WiFi</th>
<th>Analog Comparator</th>
<th>Price</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.pjrc.com/store/teensy40.html">Teensy 4.0</a></td>
<td>no</td>
<td>yes</td>
<td>19 USD</td>
</tr>
<tr>
<td><a href="https://www.adafruit.com/product/4600">Adafruit QT Py</a></td>
<td>no</td>
<td>yes</td>
<td>6 USD</td>
</tr>
<tr>
<td><a href="https://www.tinypico.com/">TinyPICO</a></td>
<td>yes</td>
<td>no</td>
<td>20 USD</td>
</tr>
</tbody>
</table>
<p>If ESP32 boards such as the TinyPICO had a hardware Analog Comparator, I would
likely use just one microcontroller, but keep the serial interface on a GPIO for
easy debugging.</p>
<h3 id="why-the-adafruit-qt-py">Why the Adafruit QT Py?</h3>
<p>The minimal function we need for our signal conversion device is to convert an
SCS signal (5V) to a serial signal (3.3V). For this conversion, we need a
hardware analog comparator and an output GPIO that we can drive independently,
so that we can modify the signal.</p>
<p>Additionally, the device should use as little power as possible so that it can
comfortably fit in the left-over energy budget of the intercom unit‚Äôs power
supply.</p>
<p>The smallest microcontroller I know of that comes with a hardware analog
comparator is the <a href="https://www.adafruit.com/product/4600">Adafruit QT Py</a>. It‚Äôs
a 32-bit Cortex M0+ (SAMD21) that can be programmed using the Arduino IDE, or
MicroPython (hence the name).</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy_hud5b1d29bf03dbaef00ea80c4fff123ac_742679_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy_hud5b1d29bf03dbaef00ea80c4fff123ac_742679_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy_hud5b1d29bf03dbaef00ea80c4fff123ac_742679_600x0_resize_q75_box.jpg"
  alt="Adafruit QT Py" title="Adafruit QT Py"
  width="600"
  height="378"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>There are other SAMD21 boards with the same form factor, such as the <a href="https://wiki.seeedstudio.com/Seeeduino-XIAO/">Seeeduino
XIAO</a>.</p>
<h3 id="why-the-tinypico-esp32-board">Why the TinyPICO ESP32 board?</h3>
<p>When looking for a WiFi-enabled microcontroller, definitely go with something
ESP32-based!</p>
<p>The community around the Espressif ESP32 (and its predecessor ESP8266) is
definitely one of its biggest pluses: there are tons of Arduino sketches,
troubleshooting tips, YouTube videos, reference documentation, forum posts, and
so on.</p>
<p>The ESPs have been around since ‚âà2014, so many (largely-compatible) boards are
available. In fact, I started this project on an <a href="https://m5stack.com/collections/m5-core/products/basic-core-iot-development-kit">M5Stack ESP32 Basic Core IoT
Development
Kit</a>,
deployed it on an <a href="https://www.adafruit.com/product/4172">Adafruit HUZZAH32 Breakout
Board</a> and ultimately ported it to the
<a href="https://www.tinypico.com/">TinyPICO</a>. Porting between the different
microcontrollers was really smooth: the only adjustments were pin numbers and
dropping in a TinyPICO helper library for its RGB LED, which I chose to use as a
power LED.</p>
<p>I chose the TinyPICO ESP32 board specifically for its small form factor and
convenience:</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison_hu6f8a665b92c49e3c59fd49dc9db9188f_1416694_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison_hu6f8a665b92c49e3c59fd49dc9db9188f_1416694_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison_hu6f8a665b92c49e3c59fd49dc9db9188f_1416694_600x0_resize_q75_box.jpg"
  alt="TinyPICO comparison with Adafruit Huzzah32 and Teensy 4.0" title="TinyPICO comparison with Adafruit Huzzah32 and Teensy 4.0"
  width="600"
  height="415"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>The TinyPICO is only 18mm √ó 32mm, slightly smaller than the Teensy 4.0‚Äôs 18mm √ó 35mm.</p>
<p>In comparison, the <a href="https://www.adafruit.com/product/4172">Adafruit HUZZAH32 breakout
board</a> is gigantic with its 25mm √ó
44mm. And that‚Äôs without the extra USB-to-serial adapter (FT232H in the picture
above) you need for programming, serial console and powering the board!</p>
<p>The TinyPICO does not need an extra adapter. You can plug it in and program it
immediately, just like the Teensy!</p>
<p>I‚Äôd like it if the next revision of the TinyPICO switched from Micro USB to USB
C.</p>
<p>If the TinyPICO is not for you (or unavailable), search for other boards that
contain the ESP32-PICO-D4 chip. For example, <a href="https://www.dfrobot.com/product-1941.html">DFRobot‚Äôs
ESP32-PICO-KIT</a> or <a href="https://www.amazon.de/Espressif-ESP32-ESP32-PICO-KIT-Board-ESP32-PICO-D4/dp/B07J1YMB8R">Espressif‚Äôs own
ESP32-PICO-KIT</a>.</p>
<h2 id="prototype">Prototype</h2>
<p>After testing everything on a breadboard, I soldered a horizontal pin header
onto the QT Py, connected it to my Sparkfun level shifter board and soldered the
remaining voltage divider components ‚Äúflying‚Äù. The result barely fit into the
case, but worked flawlessly for weeks:</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype_hu9e7bb0ca740035a832123149efe1ff0b_1457519_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype_hu9e7bb0ca740035a832123149efe1ff0b_1457519_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype_hu9e7bb0ca740035a832123149efe1ff0b_1457519_600x0_resize_q75_box.jpg"
  alt="prototype" title="prototype"
  width="600"
  height="527"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="backpack-pcb-for-the-qt-py">Backpack PCB for the QT Py</h2>
<p>After verifying this prototype works well in practice, I miniaturized it into a
‚Äúbackpack‚Äù PCB.</p>
<p>The backpack contains all the same parts as the prototype, but with fewer bulky
wires and connectors, and using only SMD parts. The build you see below uses
0602 SMD parts, but if I made another revision I would probably chose the larger
0805 parts for easier soldering.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">If you only wanted to drive the Nuki Opener (without any networking), you could
easily do that from the QT Py itself and skip the TinyPICO.</div>
  </div>
</aside>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack_hu6792fa18b3c27ff7621846a3ddcd41b1_1436932_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack_hu6792fa18b3c27ff7621846a3ddcd41b1_1436932_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack_hu6792fa18b3c27ff7621846a3ddcd41b1_1436932_600x0_resize_q75_box.jpg"
  alt="QT Py with backpack" title="QT Py with backpack"
  width="600"
  height="462"
  style="border: 1px solid #000"
  
  loading="lazy"></a>


















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb_hu7c3948370bbbb36c4b0624284e90cf21_991666_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb_hu7c3948370bbbb36c4b0624284e90cf21_991666_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb_hu7c3948370bbbb36c4b0624284e90cf21_991666_600x0_resize_q75_box.jpg"
  alt="QT Py with backpack PCB" title="QT Py with backpack PCB"
  width="600"
  height="346"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="assembly">Assembly</h2>
<p>To save some space in the intercom unit case, I decided to solder the jumper
wires directly onto the TinyPICO instead of using a pin header. I could have
gone one step further by cutting the wires at length and soldering them directly
on both ends, without any connectors, but I wanted to be able to easily unplug
and re-combine the parts of this project.</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires_hu0ea0facd5de8df5b7e0832eec5ec06a2_2526440_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires_hu0ea0facd5de8df5b7e0832eec5ec06a2_2526440_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires_hu0ea0facd5de8df5b7e0832eec5ec06a2_2526440_600x0_resize_q75_box.jpg"
  alt="wires soldered directly into the TinyPICO" title="wires soldered directly into the TinyPICO"
  width="600"
  height="678"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>From top to bottom, I made the following connections:</p>
<table>
<thead>
<tr>
<th>Pin</th>
<th>Color</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>25</td>
<td><span style="background-color: #ff4136; padding: 0 .5em 0 .5em">red</span></td>
<td><code>SCSRX_3V3</code></td>
</tr>
<tr>
<td>27</td>
<td><span style="background-color: #2ecc40; padding: 0 .5em 0 .5em">green</span></td>
<td><code>OPEN_3V3</code></td>
</tr>
<tr>
<td>15</td>
<td><span style="background-color: #0074d9; color: white; padding: 0 .5em 0 .5em">blue</span></td>
<td>Nuki Opener blue cable</td>
</tr>
<tr>
<td>14</td>
<td><span style="background-color: #ffdc00; padding: 0 .5em 0 .5em">yellow</span></td>
<td>Nuki Opener yellow cable</td>
</tr>
<tr>
<td>4</td>
<td><span style="background-color: #b10dc9; color: white; padding: 0 .5em 0 .5em">purple</span></td>
<td>floor ring button pushed</td>
</tr>
<tr>
<td>3V3</td>
<td><span style="background-color: white; padding: 0 .5em 0 .5em">white</span></td>
<td>3.3V for the floor ring button</td>
</tr>
<tr>
<td>5V</td>
<td><span style="background-color: #ff851b; padding: 0 .5em 0 .5em">orange</span></td>
<td>power for the TinyPICO</td>
</tr>
<tr>
<td>GND</td>
<td><span style="background-color: brown; color: white; padding: 0 .5em 0 .5em">brown</span></td>
<td>ground for the TinyPICO</td>
</tr>
<tr>
<td>GND</td>
<td><span style="background-color: brown; color: white; padding: 0 .5em 0 .5em">brown</span></td>
<td>ground to the QT Py</td>
</tr>
<tr>
<td>GND</td>
<td><span style="background-color: brown; color: white; padding: 0 .5em 0 .5em">brown</span></td>
<td>ground to the Nuki Opener</td>
</tr>
</tbody>
</table>
<p>The TinyPICO USB port is still usable for updating the software and serial console
debugging.</p>
<p>Here‚Äôs the TinyPICO connected to the QT Py inside the intercom unit:</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_600x0_resize_q75_box.jpg"
  alt="modified BTicino" title="modified BTicino"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>The QT Py is powered by the intercom unit‚Äôs supply, and the TinyPICO I‚Äôm
powering with an external USB power supply and a cut-open USB cable. This allows
me to route the jumper wires through the intercom unit‚Äôs hole in the back,
through which a USB plug doesn‚Äôt fit:</p>















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation_hu026d112f6291a36ec32cbedad99b0fdb_1989526_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation_hu026d112f6291a36ec32cbedad99b0fdb_1989526_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation_hu026d112f6291a36ec32cbedad99b0fdb_1989526_600x0_resize_q75_box.jpg"
  alt="final installation" title="final installation"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="software--artifacts">Software / Artifacts</h2>
<p>You can find the Arduino sketches and KiCad files for this project at
<a href="https://github.com/stapelberg/intercom-backpack">https://github.com/stapelberg/intercom-backpack</a></p>
<p>For debugging, I found it useful to publish every single byte received from the
SCS bus on the <code>doorbell/debug/scsrx</code> MQTT topic. Full SCS telegrams are
published to <code>doorbell/events/scs</code>, so by observing both, you can verify that
retransmission suppression and SCS decoding work correctly.</p>
<p>Similarly, signaling a doorbell ring to the Nuki Opener can be debugged by
sending a message to MQTT topic <code>doorbell/debug/cmd/ring</code>.</p>
<p>Initially, it wasn‚Äôt clear to me whether the WiFi library would maintain the
connection indefinitely. After observing my microcontroller eventually
disappearing from my network, I added the <code>taskreconnect</code> FreeRTOS task, and
things have been stable since.</p>
<h2 id="nuki-opener-verdict">Nuki Opener: verdict</h2>
<p>I now have a Nuki Opener running next to my own microcontroller, so I can see
how well it works.</p>
<h3 id="setup">setup</h3>
<p>Setting up the Nuki is the worst part: their colorful cable is super flimsy and
loose, often losing contact. They should definitely switch to a cable with a
mechanical lock.</p>
<p>The software part of the setup is okay, but the compatibility with the SCS bus
is poor: I couldn‚Äôt get the device to work at all (see my initial post), and had
to resort to using my own microcontroller to drive the Nuki in analogue mode.</p>
<p>I‚Äôm disappointed that the Nuki developers aren‚Äôt interested in improving their
device‚Äôs compatibility and reliability with the SCS bus. They seem to
capture/replay the entire signal (including re-transmissions) instead of
actually decoding the signal.</p>
<h3 id="in-my-day-to-day">in my day-to-day</h3>
<p>The push notifications I get on my iPhone from the Nuki are often
delayed. Usually the delay is a few seconds, but sometimes notifications arrive
hours later or just don‚Äôt arrive at all!</p>
<p>While the push notifications are sent from a Nuki server and hence need the
internet to function, the Nuki Bridge (translating Bluetooth Low Energey from
the Nuki Opener to WiFi) allows configuring notifications in the local network
via web hooks.</p>
<p>The Nuki Bridge‚Äôs notifications are much more reliable in my experience.</p>
<p>People sometimes ask why I use the Nuki Opener at all, given that I have some
infrastructure of my own, too. While opening the door and receiving
notifications is something I can do without the Nuki, too, I don‚Äôt want to spend
my spare time re-implementing the Nuki app (on multiple platforms) with its geo
fencing, friend invitations, ring to open, etc. In addition, the Nuki Opener
physical device has a nice ring sound and large push button to open the door,
both of which are convenient.</p>
<h2 id="conclusion">Conclusion</h2>
<p>My intercom is now much smarter! Doorbell notifications make their way to my
various devices via MQTT, and I can conveniently open the door from any device,
as opposed to rushing to the intercom unit in the hallway.</p>
<p>Compared to the previous proof-of-concepts and development installations, I feel
more confident in the current solution because it re-uses the intercom unit for
the nitty-gritty SCS bus communication details.</p>
<p>The overall strategy should be widely applicable regardless of the specific
intercom vendor/unit you have. Be sure to buy your own unit (don‚Äôt solder into
your landlord‚Äôs intercom unit!) and test in a separate lab setup first, of
course!</p>
<h2 id="appendix-a-troubleshooting">Appendix A: Troubleshooting</h2>
<p>To debug the problem of ring detection no longer working, check:</p>
<ul>
<li>Is the ESP32 still working?
<ul>
<li><code>ping doorbelltp</code></li>
<li><code>mosquitto_pub -h dr -t 'doorbell/debug/cmd/ring' -m '3'</code> should signal a
ring to the Nuki Opener and result in events on the MQTT bus</li>
</ul>
</li>
<li>Is the QT Py still working?
<ul>
<li>Its power LED should be off. If the LED is on, the QT Py is in the bootloader.</li>
<li>Unplug and replug the <code>+5V</code> wire to the QT Py, see if that fixes it.</li>
<li>Connect a USB-to-serial adapter and see if triggering a door open results in SCS bytes on the serial interface.</li>
<li>See if ringing the bell results in SCS bytes on the serial interface. If no, re-solder cable to <code>SCSRX5V</code>.</li>
</ul>
</li>
</ul>
<p>To debug the problem of door opening no longer working, check:</p>
<ul>
<li>Does it work when triggering it via the button on the BTicino? If yes, re-solder cable to <code>OPEN5V</code>.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Debian Code Search: OpenAPI now available]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-03-06-debian-code-search-openapi/"/>
    <id>https://michael.stapelberg.ch/posts/2021-03-06-debian-code-search-openapi/</id>
    <published>2021-03-06T11:15:11+01:00</published>
    <content type="html"><![CDATA[<p><a href="https://codesearch.debian.net/">Debian Code Search</a> now offers an OpenAPI-based API!</p>
<p>Various developers have created ad-hoc client libraries based on how the web
interface works.</p>
<p>The goal of offering an OpenAPI-based API is to provide developers with
automatically generated client libraries for a large number of programming
languages, that target a stable interface independent of the web interface‚Äôs
implementation details.</p>
<h2 id="getting-started">Getting started</h2>
<ol>
<li>
<p>Visit <a href="https://codesearch.debian.net/apikeys/">https://codesearch.debian.net/apikeys/</a> to download your personal API
key. Login via <a href="https://salsa.debian.org/">Debian‚Äôs GitLab instance
salsa.debian.org</a>; register there if you have no
account yet.</p>
</li>
<li>
<p>Find the Debian Code Search client library for your programming language. If
none exists yet, <a href="https://editor.swagger.io/?url=https://codesearch.debian.net/openapi2.yaml">auto-generate a client library on editor.swagger.io: click
‚ÄúGenerate
Client‚Äù</a>.</p>
</li>
<li>
<p>Search all code in Debian from your own analysis tool, migration tracking
dashboard, etc.</p>
</li>
</ol>
<h2 id="curl-example">curl example</h2>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  -H <span style="color:#4070a0">&#34;x-dcs-apikey: </span><span style="color:#007020;font-weight:bold">$(</span>cat dcs-apikey-stapelberg.txt<span style="color:#007020;font-weight:bold">)</span><span style="color:#4070a0">&#34;</span> <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  -X GET <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  <span style="color:#4070a0">&#34;https://codesearch.debian.net/api/v1/search?query=i3Font&amp;match_mode=regexp&#34;</span> 
</code></pre></div><h2 id="web-browser-example">Web browser example</h2>
<p>You can try out the API in your web browser in the <a href="https://codesearch.debian.net/apikeys/#openapi-doc-browser">OpenAPI
documentation</a>.</p>
<h2 id="code-example-go">Code example (Go)</h2>
<p>Here‚Äôs an example program that demonstrates how to set up an auto-generated Go
client for the Debian Code Search OpenAPI, run a query, and aggregate the results:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">burndown</span>() <span style="color:#902000">error</span> {
	cfg <span style="color:#666">:=</span> openapiclient.<span style="color:#06287e">NewConfiguration</span>()
	cfg.<span style="color:#06287e">AddDefaultHeader</span>(<span style="color:#4070a0">&#34;x-dcs-apikey&#34;</span>, apiKey)
	client <span style="color:#666">:=</span> openapiclient.<span style="color:#06287e">NewAPIClient</span>(cfg)
	ctx <span style="color:#666">:=</span> context.<span style="color:#06287e">Background</span>()

	<span style="color:#60a0b0;font-style:italic">// Search through the full Debian Code Search corpus, blocking until all
</span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// results are available:
</span><span style="color:#60a0b0;font-style:italic"></span>	results, _, err <span style="color:#666">:=</span> client.SearchApi.<span style="color:#06287e">Search</span>(ctx, <span style="color:#4070a0">&#34;fmt.Sprint(err)&#34;</span>, <span style="color:#666">&amp;</span>openapiclient.SearchApiSearchOpts{
		<span style="color:#60a0b0;font-style:italic">// Literal searches are faster and do not require escaping special
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// characters, regular expression searches are more powerful.
</span><span style="color:#60a0b0;font-style:italic"></span>		MatchMode: optional.<span style="color:#06287e">NewString</span>(<span style="color:#4070a0">&#34;literal&#34;</span>),
	})
	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		<span style="color:#007020;font-weight:bold">return</span> err
	}

	<span style="color:#60a0b0;font-style:italic">// Print to stdout a CSV file with the path and number of occurrences:
</span><span style="color:#60a0b0;font-style:italic"></span>	wr <span style="color:#666">:=</span> csv.<span style="color:#06287e">NewWriter</span>(os.Stdout)
	header <span style="color:#666">:=</span> []<span style="color:#902000">string</span>{<span style="color:#4070a0">&#34;path&#34;</span>, <span style="color:#4070a0">&#34;number of occurrences&#34;</span>}
	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> wr.<span style="color:#06287e">Write</span>(header); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		<span style="color:#007020;font-weight:bold">return</span> err
	}
	occurrences <span style="color:#666">:=</span> <span style="color:#007020">make</span>(<span style="color:#007020;font-weight:bold">map</span>[<span style="color:#902000">string</span>]<span style="color:#902000">int</span>)
	<span style="color:#007020;font-weight:bold">for</span> _, result <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> results {
		occurrences[result.Path]<span style="color:#666">++</span>
	}
	<span style="color:#007020;font-weight:bold">for</span> _, result <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> results {
		o, ok <span style="color:#666">:=</span> occurrences[result.Path]
		<span style="color:#007020;font-weight:bold">if</span> !ok {
			<span style="color:#007020;font-weight:bold">continue</span>
		}
		<span style="color:#60a0b0;font-style:italic">// Print one CSV record per path:
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#007020">delete</span>(occurrences, result.Path)
		record <span style="color:#666">:=</span> []<span style="color:#902000">string</span>{result.Path, strconv.<span style="color:#06287e">Itoa</span>(o)}
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> wr.<span style="color:#06287e">Write</span>(record); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			<span style="color:#007020;font-weight:bold">return</span> err
		}
	}
	wr.<span style="color:#06287e">Flush</span>()
	<span style="color:#007020;font-weight:bold">return</span> wr.<span style="color:#06287e">Error</span>()
}
</code></pre></div><p>The full example can be found under
<a href="https://github.com/Debian/dcs/blob/3d6a18f010e915f77b4833189286100308c539cb/_example/burndown.go"><code>burndown.go</code></a>.</p>
<h2 id="feedback">Feedback?</h2>
<p>File a <a href="https://github.com/Debian/dcs/issues">GitHub issue on
<code>github.com/Debian/dcs</code></a> please!</p>
<h2 id="migration-status">Migration status</h2>
<p>I‚Äôm aware of the following <a href="https://codesearch.debian.net/thirdparty">third-party projects using Debian Code
Search</a>:</p>
<table>
<thead>
<tr>
<th>Tool</th>
<th>Migration status</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://salsa.debian.org/debian/codesearch-cli">Debian Code Search CLI tool</a></td>
<td><a href="https://salsa.debian.org/debian/codesearch-cli/-/merge_requests/1">Updated to OpenAPI</a></td>
</tr>
<tr>
<td><a href="https://salsa.debian.org/aviau/identify-incomplete-xs-go-import-path">identify-incomplete-xs-go-import-path</a></td>
<td><a href="https://salsa.debian.org/aviau/identify-incomplete-xs-go-import-path/-/merge_requests/1">Update pending</a></td>
</tr>
<tr>
<td><a href="https://gitlab.gnome.org/nbenitez/gnome-codesearch">gnome-codesearch</a></td>
<td>makes no API queries</td>
</tr>
</tbody>
</table>
<p>If you find any others, please point them to this post in case they are not
using Debian Code Search‚Äôs OpenAPI yet.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[A quick introduction to MQTT for IOT]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-01-10-mqtt-introduction/"/>
    <id>https://michael.stapelberg.ch/posts/2021-01-10-mqtt-introduction/</id>
    <published>2021-01-10T15:26:00+01:00</published>
    <content type="html"><![CDATA[<p>While I had heard the abbreviation <a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a>
many times, I never had a closer look at what MQTT is.</p>
<p>Here are a few quick notes about using MQTT as <a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Pub/Sub
bus</a> in a home
IOT network.</p>
<h2 id="motivation">Motivation</h2>
<p>Once you have a few <a href="https://en.wikipedia.org/wiki/Internet_of_things">IOT
devices</a>, an obvious question
is how to network them.</p>
<p>If all your devices are from the same vendor, the vendor takes care of it.</p>
<p>In my home, I have many different vendors/devices, such as (incomplete list):</p>
<ul>
<li><a href="https://nuki.io/en/opener/">Nuki Opener</a> Smart Intercom</li>
<li><a href="https://www.itead.cc/sonoff-s26-wifi-smart-plug.html">Sonoff S26 Smart Plug</a> (WiFi-controlled socket outlet)</li>
<li><a href="https://www.aqara.com/en/door_and_window_sensor.html">Aqara Door &amp; Window Sensors</a></li>
<li><a href="https://en.wikipedia.org/wiki/IKEA#Smart_home">IKEA Home Smart</a> (formerly TR√ÖDFRI) Smart Lights</li>
</ul>
<p>Here is how I combine these devices:</p>
<ul>
<li>When I‚Äôm close to my home (geo-fencing), the Nuki Opener enables Ring To Open (RTO): when I ring the door bell, it opens the door for me.</li>
<li>When I open the apartment door, the Smart Lights in the hallway turn on.</li>
<li>When I‚Äôm home, my stereo speakers should be powered on so I can play music.</li>
</ul>
<p>A conceptually simple way to hook this up is to connect things directly: listen
to the Aqara Door Sensor and instruct the Smart Lights to turn on, for example.</p>
<p>But, connecting everything to an MQTT bus has a couple of advantages:</p>
<ol>
<li>Unification: everything is visible in one place, the same tools work for all
devices.</li>
<li>Your custom logic is uncoupled from vendor details: you can receive and send
MQTT.</li>
<li>Compatibility with existing software, such as <a href="https://www.home-assistant.io/">Home
Assistant</a> or
<a href="https://www.openhab.org/">openHAB</a></li>
</ol>
<h2 id="step-1-set-up-an-mqtt-broker-server">Step 1. Set up an MQTT broker (server)</h2>
<p>A broker is what relays messages between publishers and subscribers. As an
optimization, the most recent value of a topic can be retained, so that e.g. a
subscriber does not need to wait for the next change to obtain the current
state.</p>
<p>The most popular choice for broker software seems to be
<a href="https://mosquitto.org/">Mosquitto</a>, but since I like to run Go software on
<a href="https://gokrazy.org/,">https://gokrazy.org/,</a> I kept looking and found <a href="https://github.com/fhmq/hmq">https://github.com/fhmq/hmq</a>.</p>
<p>One downside of <code>hmq</code> might be that it does not seem to support persisting
retained messages to disk. I‚Äôll treat this as a feature for the time being,
enforcing a fresh start on every daily reboot.</p>
<p>To restrict hmq to only listen in my local network, I‚Äôm using <a href="https://github.com/gokrazy/tools/commit/fdd90fc6817876e08b352fae84f2a2794524ccc0">gokrazy‚Äôs flag
file
feature</a>:</p>
<pre tabindex="0"><code>mkdir -p flags/github.com/fhmq/hmq
echo --host=10.0.0.217 &gt; flags/github.com/fhmq/hmq/flags.txt
</code></pre><p>Note that you‚Äôll need <a href="https://github.com/fhmq/hmq/pull/105">https://github.com/fhmq/hmq/pull/105</a> in case your network
does not come up quickly.</p>
<h3 id="mqtt-broker-setup-displayingsending-test-messages">MQTT broker setup: displaying/sending test messages</h3>
<p>To display all messages going through your MQTT broker, subscribe using the
<a href="https://mosquitto.org/">Mosquitto</a> tools:</p>
<pre tabindex="0"><code>% sudo pacman -S mosquitto
% mosquitto_sub --id &quot;${HOST}_all&quot; --host dr.lan --topic '#' --verbose
</code></pre><p>The <code>#</code> sign denotes an <a href="https://subscription.packtpub.com/book/application_development/9781787287815/1/ch01lvl1sec18/understanding-wildcards">MQTT
wildcard</a>,
meaning subscribe to all topics in this case.</p>
<p>Be sure to set a unique id for each <code>mosquitto_sub</code> command you run, so that you
can see which subscribers are connected to your MQTT bus. Avoid id clashes,
otherwise the subscribers will disconnect each other!</p>
<p>Now, when you send a test message, you should see it:</p>
<pre tabindex="0"><code>% mosquitto_pub --host dr.lan --topic 'cmnd/tasmota_68462F/Power' -m 'ON'
</code></pre><p>Tip: If you have binary data on your MQTT bus, you can display it in hex with
timestamps:</p>
<pre tabindex="0"><code>% mosquitto_sub \
  --id &quot;${HOST}_bell&quot; \
  --host dr.lan \
  --topic 'doorbell/#' \
  -F '@Y-@m-@dT@H:@M:@S@z : %t : %x'
</code></pre><h2 id="step-2-integrate-with-mqtt">Step 2. Integrate with MQTT</h2>
<p>Now that communication via the bus works, what messages do we publish on which
topics?</p>
<p>MQTT only defines that topics are hierarchical; messages are arbitrary byte
sequences.</p>
<p>There are a few popular conventions for what to put onto MQTT:</p>
<ul>
<li>
<p><a href="https://homieiot.github.io/">The Homie convention</a></p>
</li>
<li>
<p>Home Assistant has its own convention, but <a href="https://www.home-assistant.io/integrations/switch.mqtt/#full-configuration">allows full configuration</a>. Home Assistant does <a href="https://community.home-assistant.io/t/home-assistant-homie-compatibility/17135/8">not support the homie convention yet</a>.</p>
</li>
<li>
<p>openHAB <a href="https://www.openhab.org/addons/bindings/mqtt.generic/">refers to Home Assistant and
Homie</a>.</p>
</li>
</ul>
<p>If you design everything yourself, Homie seems like a good option. If you plan to
use Home Assistant or similar, stick to the Home Assistant convention.</p>
<h3 id="best-practices-for-your-own-structure">Best practices for your own structure</h3>
<p>In case you want/need to define your own topics, keep these tips in mind:</p>
<ul>
<li>devices publish their state on a single, retained topic
<ul>
<li>the topic name could be e.g. <code>stat/tasmota_68462F/POWER</code></li>
<li>retaining the topic allows consumers to catch up after (re-)connecting to the bus</li>
</ul>
</li>
<li>publish commands on a single, possibly-retained topic
<ul>
<li>e.g. publish <code>ON</code> to topic <code>cmnd/tasmota_68462F/Power</code></li>
<li>publish the desired state: publish <code>ON</code> or <code>OFF</code> instead of <code>TOGGLE</code></li>
<li>if you retain the topic and publish <code>TOGGLE</code> commands, your lights will mysteriously go off/on when they unexpectedly re-establish their MQTT connection</li>
</ul>
</li>
</ul>
<h3 id="integration-shelly-devices-with-mqtt-built-in">Integration: Shelly devices with MQTT built-in</h3>
<p><a href="https://shelly.cloud/">Shelly</a> has a number of smart devices that come with
MQTT out of the box! This sounds like the easiest solution if you‚Äôre starting
from scratch.</p>
<p>I haven‚Äôt used these devices personally, but I hear good things about them.</p>
<h3 id="integration-zigbee2mqtt-for-zigbee-devices">Integration: Zigbee2MQTT for Zigbee devices</h3>
<p><a href="https://www.zigbee2mqtt.io/">Zigbee2MQTT</a> supports well <a href="https://www.zigbee2mqtt.io/information/supported_devices.html">over 1000 Zigbee
devices</a> and
exposes them on the MQTT bus.</p>
<p>For example, this is what you would use to connect your IKEA TR√ÖDFRI Smart
Lights to MQTT.</p>
<h3 id="integration-esphome-for-micro-controllers--sensors">Integration: ESPHome for micro controllers + sensors</h3>
<p>The <a href="https://esphome.io/">ESPHome</a> system is a ready-made solution to connect a
wide array of sensors and devices to your home network via MQTT.</p>
<p>If you want to use your own ESP-based micro controllers and sensors, this seems
like the easiest way to get them programmed.</p>
<h3 id="integration-mongoose-os-for-micro-controllers">Integration: Mongoose OS for micro controllers</h3>
<p>Mongoose OS is an IOT firmware development framework, taking care of device
management, Over-The-Air updates, and more.</p>
<p><a href="https://mongoose-os.com/docs/mongoose-os/cloud/mqtt.md">Mongoose comes with MQTT
support</a>, and with just
a few lines you can build, flash and configure your device. Here‚Äôs an example
for the NodeMCU (ESP8266-based):</p>
<pre tabindex="0"><code>% yay -S mos-bin
% mos clone https://github.com/mongoose-os-apps/demo-js app1
% cd app1
% mos --platform esp8266 build
% mos --platform esp8266 --port /dev/ttyUSB1 flash
% mos --port /dev/ttyUSB1 config-set mqtt.enable=true mqtt.server=dr.lan:1883
</code></pre><p>Pressing the button on the NodeMCU publishes a message to MQTT:</p>
<pre tabindex="0"><code>% mosquitto_sub --host dr.lan --topic devices/esp8266_F4B37C/events
{&quot;ram_free&quot;:31260,&quot;uptime&quot;:27.168680,&quot;btnCount&quot;:2,&quot;on&quot;:false}
</code></pre><h3 id="integration-arduino-for-custom-micro-controller-firmware">Integration: Arduino for custom micro controller firmware</h3>
<p>Arduino has an <a href="https://www.arduino.cc/reference/en/libraries/mqtt-client/">MQTT Client
library</a>. If your
microcontroller is networked, e.g. an ESP32 with WiFi, you can publish MQTT
messages from your Arduino sketch:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#include</span> <span style="color:#007020">&lt;WiFi.h&gt;</span><span style="color:#007020">
</span><span style="color:#007020">#include</span> <span style="color:#007020">&lt;PubSubClient.h&gt;</span><span style="color:#007020">
</span><span style="color:#007020"></span>
WiFiClient wificlient;
PubSubClient <span style="color:#06287e">client</span>(wificlient);

<span style="color:#902000">void</span> <span style="color:#06287e">callback</span>(<span style="color:#902000">char</span><span style="color:#666">*</span> topic, byte<span style="color:#666">*</span> payload, <span style="color:#902000">unsigned</span> <span style="color:#902000">int</span> length) {
    Serial.print(<span style="color:#4070a0">&#34;Message arrived [&#34;</span>);
    Serial.print(topic);
    Serial.print(<span style="color:#4070a0">&#34;] &#34;</span>);
    <span style="color:#007020;font-weight:bold">for</span> (<span style="color:#902000">int</span> i <span style="color:#666">=</span> <span style="color:#40a070">0</span>; i <span style="color:#666">&lt;</span> length; i<span style="color:#666">++</span>) {
      Serial.print((<span style="color:#902000">char</span>)payload[i]);
    }
    Serial.println();
  
    <span style="color:#007020;font-weight:bold">if</span> (strcmp(topic, <span style="color:#4070a0">&#34;doorbell/cmd/unlock&#34;</span>) <span style="color:#666">==</span> <span style="color:#40a070">0</span>) {
  		<span style="color:#60a0b0;font-style:italic">// ‚Ä¶
</span><span style="color:#60a0b0;font-style:italic"></span>    }
}

<span style="color:#902000">void</span> <span style="color:#06287e">taskmqtt</span>(<span style="color:#902000">void</span> <span style="color:#666">*</span>pvParameters) {
	<span style="color:#007020;font-weight:bold">for</span> (;;) {
		<span style="color:#007020;font-weight:bold">if</span> (<span style="color:#666">!</span>client.connected()) {
			client.connect(<span style="color:#4070a0">&#34;doorbell&#34;</span> <span style="color:#60a0b0;font-style:italic">/* clientid */</span>);
			client.subscribe(<span style="color:#4070a0">&#34;doorbell/cmd/unlock&#34;</span>);
		}

		<span style="color:#60a0b0;font-style:italic">// Poll PubSubClient for new messages and invoke the callback.
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// Should be called as infrequent as one is willing to delay
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// reacting to MQTT messages.
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// Should not be called too frequently to avoid strain on
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// the network hardware:
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// https://github.com/knolleary/pubsubclient/issues/756#issuecomment-654335096
</span><span style="color:#60a0b0;font-style:italic"></span>		client.loop();
		vTaskDelay(pdMS_TO_TICKS(<span style="color:#40a070">100</span>));
	}
}

<span style="color:#902000">void</span> <span style="color:#06287e">setup</span>() {
	connectToWiFi(); <span style="color:#60a0b0;font-style:italic">// WiFi configuration omitted for brevity
</span><span style="color:#60a0b0;font-style:italic"></span>
	client.setServer(<span style="color:#4070a0">&#34;dr.lan&#34;</span>, <span style="color:#40a070">1883</span>);
	client.setCallback(callback);

	xTaskCreatePinnedToCore(taskmqtt, <span style="color:#4070a0">&#34;MQTT&#34;</span>, <span style="color:#40a070">2048</span>, <span style="color:#007020">NULL</span>, <span style="color:#40a070">1</span>, <span style="color:#007020">NULL</span>, PRO_CPU_NUM);
}

<span style="color:#902000">void</span> <span style="color:#06287e">processEvent</span>(<span style="color:#902000">void</span> <span style="color:#666">*</span>buf, <span style="color:#902000">int</span> telegramLen) {
	client.publish(<span style="color:#4070a0">&#34;doorbell/events/scs&#34;</span>, buf, telegramLen);
}
</code></pre></div><h2 id="integration-webhook-to-mqtt">Integration: Webhook to MQTT</h2>
<p>The Nuki Opener doesn‚Äôt support MQTT out of the box, but the Nuki Bridge can
send Webhook requests. In a few lines of Go, you can forward what the Nuki
Bridge sends to MQTT:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">package</span> main

<span style="color:#007020;font-weight:bold">import</span> (
	<span style="color:#4070a0">&#34;fmt&#34;</span>
	<span style="color:#4070a0">&#34;io/ioutil&#34;</span>
	<span style="color:#4070a0">&#34;log&#34;</span>
	<span style="color:#4070a0">&#34;net/http&#34;</span>

	mqtt <span style="color:#4070a0">&#34;github.com/eclipse/paho.mqtt.golang&#34;</span>
)

<span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">nukiBridge</span>() <span style="color:#902000">error</span> {
	opts <span style="color:#666">:=</span> mqtt.<span style="color:#06287e">NewClientOptions</span>().<span style="color:#06287e">AddBroker</span>(<span style="color:#4070a0">&#34;tcp://dr.lan:1883&#34;</span>)
	opts.<span style="color:#06287e">SetClientID</span>(<span style="color:#4070a0">&#34;nuki2mqtt&#34;</span>)
	opts.<span style="color:#06287e">SetConnectRetry</span>(<span style="color:#007020;font-weight:bold">true</span>)
	mqttClient <span style="color:#666">:=</span> mqtt.<span style="color:#06287e">NewClient</span>(opts)
	<span style="color:#007020;font-weight:bold">if</span> token <span style="color:#666">:=</span> mqttClient.<span style="color:#06287e">Connect</span>(); token.<span style="color:#06287e">Wait</span>() <span style="color:#666">&amp;&amp;</span> token.<span style="color:#06287e">Error</span>() <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;MQTT connection failed: %v&#34;</span>, token.<span style="color:#06287e">Error</span>())
	}

	mux <span style="color:#666">:=</span> http.<span style="color:#06287e">NewServeMux</span>()
	mux.<span style="color:#06287e">HandleFunc</span>(<span style="color:#4070a0">&#34;/nuki&#34;</span>, <span style="color:#007020;font-weight:bold">func</span>(w http.ResponseWriter, r <span style="color:#666">*</span>http.Request) {
		b, err <span style="color:#666">:=</span> ioutil.<span style="color:#06287e">ReadAll</span>(r.Body)
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			log.<span style="color:#06287e">Print</span>(err)
			http.<span style="color:#06287e">Error</span>(w, err.<span style="color:#06287e">Error</span>(), http.StatusInternalServerError)
			<span style="color:#007020;font-weight:bold">return</span>
		}

		mqttClient.<span style="color:#06287e">Publish</span>(
			<span style="color:#4070a0">&#34;zkj-nuki/webhook&#34;</span>, <span style="color:#60a0b0;font-style:italic">// topic
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#40a070">0</span>, <span style="color:#60a0b0;font-style:italic">// qos
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#007020;font-weight:bold">true</span>, <span style="color:#60a0b0;font-style:italic">// retained
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#007020">string</span>(b)) <span style="color:#60a0b0;font-style:italic">// payload
</span><span style="color:#60a0b0;font-style:italic"></span>	})

	<span style="color:#007020;font-weight:bold">return</span> http.<span style="color:#06287e">ListenAndServe</span>(<span style="color:#4070a0">&#34;:8319&#34;</span>, mux)
}

<span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">nukiBridge</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		log.<span style="color:#06287e">Fatal</span>(err)
	}
}
</code></pre></div><p>See <a href="https://developer.nuki.io/t/bridge-http-api/26">Nuki‚Äôs Bridge HTTP-API</a>
document for details on how to configure your bridge to send webhook callbacks.</p>
<h2 id="step-3-express-your-logic">Step 3. Express your logic</h2>
<p><a href="https://www.home-assistant.io/">Home Assistant</a> and
<a href="https://nodered.org/">Node-RED</a> are both popular options, but also large
software packages.</p>
<p>Personally, I find it more fun to express my logic directly in a full
programming language (Go).</p>
<p>I call the <a href="https://github.com/stapelberg/regelwerk">resulting program <code>regelwerk</code> (‚Äúcollection of
rules‚Äù)</a>. The program consists of:</p>
<ol>
<li>various control loops that progress independently from each other</li>
<li>an MQTT message dispatcher feeding these control loops</li>
<li>a debugging web interface to visualize state</li>
</ol>
<p>This architecture is by no means a new approach: as
<a href="https://github.com/rs/moquette">moquette</a> describes it, this is to MQTT what
<code>inetd</code> is to IP. I find <code>moquette</code>‚Äôs one-process-per-message model to be too
heavyweight and clumsy to deploy to <a href="https://gokrazy.org">https://gokrazy.org</a>, so <code>regelwerk</code> is
entirely in-process and a single, easy-to-deploy binary, both to computers for
notifications, or to headless Raspberry Pis.</p>
<h3 id="regelwerk-control-loops-definition">regelwerk: control loops definition</h3>
<p><code>regelwerk</code> defines a control loop as a stateful function that accepts an event
(from MQTT) and returns messages to publish to MQTT, if any:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">type</span> controlLoop <span style="color:#007020;font-weight:bold">interface</span> {
	sync.Locker

	<span style="color:#06287e">StatusString</span>() <span style="color:#902000">string</span> <span style="color:#60a0b0;font-style:italic">// for human introspection
</span><span style="color:#60a0b0;font-style:italic"></span>
	<span style="color:#06287e">ProcessEvent</span>(MQTTEvent) []MQTTPublish
}

<span style="color:#60a0b0;font-style:italic">// Like mqtt.Message, but with timestamp
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">type</span> MQTTEvent <span style="color:#007020;font-weight:bold">struct</span> {
	Timestamp time.Time
	Topic     <span style="color:#902000">string</span>
	Payload   <span style="color:#007020;font-weight:bold">interface</span>{}
}

<span style="color:#60a0b0;font-style:italic">// Parameters for mqtt.Client.Publish()
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">type</span> MQTTPublish <span style="color:#007020;font-weight:bold">struct</span> {
	Topic    <span style="color:#902000">string</span>
	Qos      <span style="color:#902000">byte</span>
	Retained <span style="color:#902000">bool</span>
	Payload  <span style="color:#007020;font-weight:bold">interface</span>{}
}
</code></pre></div><h3 id="regelwerk-mqtt-dispatcher">regelwerk: MQTT dispatcher</h3>
<p>Our MQTT message handler dispatches each incoming message to all control loops,
in one goroutine per message and loop. With typical message volumes on a
personal MQTT bus, this is a simple yet effective design that brings just enough
isolation.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">type</span> mqttMessageHandler <span style="color:#007020;font-weight:bold">struct</span> {
	dryRun <span style="color:#902000">bool</span>
	loops  []controlLoop
}

<span style="color:#007020;font-weight:bold">func</span> (h <span style="color:#666">*</span>mqttMessageHandler) <span style="color:#06287e">handle</span>(client mqtt.Client, m mqtt.Message) {
	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;received message %q on %q&#34;</span>, m.<span style="color:#06287e">Payload</span>(), m.<span style="color:#06287e">Topic</span>())
	ev <span style="color:#666">:=</span> MQTTEvent{
		Timestamp: time.<span style="color:#06287e">Now</span>(), <span style="color:#60a0b0;font-style:italic">// consistent for all loops
</span><span style="color:#60a0b0;font-style:italic"></span>		Topic:     m.<span style="color:#06287e">Topic</span>(),
		Payload:   m.<span style="color:#06287e">Payload</span>(),
	}

	<span style="color:#007020;font-weight:bold">for</span> _, l <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> h.loops {
		l <span style="color:#666">:=</span> l <span style="color:#60a0b0;font-style:italic">// copy
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#007020;font-weight:bold">go</span> <span style="color:#007020;font-weight:bold">func</span>() {
			<span style="color:#60a0b0;font-style:italic">// For reliability, we call each loop in its own goroutine
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#60a0b0;font-style:italic">// (yes, one per message), so that when one loop gets stuck,
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#60a0b0;font-style:italic">// the others still make progress.
</span><span style="color:#60a0b0;font-style:italic"></span>			l.<span style="color:#06287e">Lock</span>()
			results <span style="color:#666">:=</span> l.<span style="color:#06287e">ProcessEvent</span>(ev)
			l.<span style="color:#06287e">Unlock</span>()
			<span style="color:#007020;font-weight:bold">if</span> <span style="color:#007020">len</span>(results) <span style="color:#666">==</span> <span style="color:#40a070">0</span> {
				<span style="color:#007020;font-weight:bold">return</span>
			}
			<span style="color:#007020;font-weight:bold">for</span> _, r <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> results {
				log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;publishing: %+v&#34;</span>, r)
				<span style="color:#007020;font-weight:bold">if</span> !h.dryRun {
					client.<span style="color:#06287e">Publish</span>(r.Topic, r.Qos, r.Retained, r.Payload)
				}
			}
			<span style="color:#60a0b0;font-style:italic">// ‚Ä¶input/output logging omitted for brevity‚Ä¶
</span><span style="color:#60a0b0;font-style:italic"></span>		}()
	}
}
</code></pre></div><h3 id="regelwerk-control-loop-example">regelwerk: control loop example</h3>
<p>Now that we have the definition and dispatching out of the way, let‚Äôs take a
look at an actual example control loop.</p>
<p>This control loops looks at whether my PC is unlocked (in use) or whether my
phone is home, and then turns off/on my stereo speakers accordingly.</p>
<p>The inputs come from
<a href="https://github.com/stapelberg/zkj-nas-tools/blob/master/runstatus/runstatus.go">runstatus</a>
and
<a href="https://github.com/rtr7/router7/blob/c30bf38438b3ba00ae13dff914f0ef4f05684250/cmd/dhcp4d/dhcp4d.go#L405-L433">dhcp4d</a>,
the output goes to a Sonoff S26 Smart Power Plug running
<a href="https://tasmota.github.io/docs/">Tasmota</a>.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">type</span> avrPowerLoop <span style="color:#007020;font-weight:bold">struct</span> {
	statusLoop <span style="color:#60a0b0;font-style:italic">// for l.statusf() debugging
</span><span style="color:#60a0b0;font-style:italic"></span>
	midnaUnlocked          <span style="color:#902000">bool</span>
	michaelPhoneExpiration time.Time
}

<span style="color:#007020;font-weight:bold">func</span> (l <span style="color:#666">*</span>avrPowerLoop) <span style="color:#06287e">ProcessEvent</span>(ev MQTTEvent) []MQTTPublish {
	<span style="color:#60a0b0;font-style:italic">// Update loop state based on inputs:
</span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">switch</span> ev.Topic {
	<span style="color:#007020;font-weight:bold">case</span> <span style="color:#4070a0">&#34;runstatus/midna/i3lock&#34;</span>:
		<span style="color:#007020;font-weight:bold">var</span> status <span style="color:#007020;font-weight:bold">struct</span> {
			Running <span style="color:#902000">bool</span> <span style="color:#4070a0">`json:&#34;running&#34;`</span>
		}
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> json.<span style="color:#06287e">Unmarshal</span>(ev.Payload.([]<span style="color:#902000">byte</span>), <span style="color:#666">&amp;</span>status); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			l.<span style="color:#06287e">statusf</span>(<span style="color:#4070a0">&#34;unmarshaling runstatus: %v&#34;</span>, err)
			<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span>
		}
		l.midnaUnlocked = !status.Running

	<span style="color:#007020;font-weight:bold">case</span> <span style="color:#4070a0">&#34;router7/dhcp4d/lease/Michaels-iPhone&#34;</span>:
		<span style="color:#007020;font-weight:bold">var</span> lease <span style="color:#007020;font-weight:bold">struct</span> {
			Expiration time.Time <span style="color:#4070a0">`json:&#34;expiration&#34;`</span>
		}
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> json.<span style="color:#06287e">Unmarshal</span>(ev.Payload.([]<span style="color:#902000">byte</span>), <span style="color:#666">&amp;</span>lease); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			l.<span style="color:#06287e">statusf</span>(<span style="color:#4070a0">&#34;unmarshaling router7 lease: %v&#34;</span>, err)
			<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span>
		}
		l.michaelPhoneExpiration = lease.Expiration

	<span style="color:#007020;font-weight:bold">default</span>:
		<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#60a0b0;font-style:italic">// event did not influence our state
</span><span style="color:#60a0b0;font-style:italic"></span>	}

	<span style="color:#60a0b0;font-style:italic">// Publish desired state changes:
</span><span style="color:#60a0b0;font-style:italic"></span>	now <span style="color:#666">:=</span> ev.Timestamp
	phoneHome <span style="color:#666">:=</span> l.michaelPhoneExpiration.<span style="color:#06287e">After</span>(now)
	anyoneHome <span style="color:#666">:=</span> l.midnaUnlocked <span style="color:#666">||</span> (now.<span style="color:#06287e">Hour</span>() &gt; <span style="color:#40a070">8</span> <span style="color:#666">&amp;&amp;</span> phoneHome)
	l.<span style="color:#06287e">statusf</span>(<span style="color:#4070a0">&#34;midnaUnlocked=%v || (now.Hour=%v &gt; 8 &amp;&amp; phoneHome=%v)&#34;</span>,
		l.midnaUnlocked, now.<span style="color:#06287e">Hour</span>(), phoneHome)

	payload <span style="color:#666">:=</span> <span style="color:#4070a0">&#34;OFF&#34;</span>
	<span style="color:#007020;font-weight:bold">if</span> anyoneHome {
		payload = <span style="color:#4070a0">&#34;ON&#34;</span>
	}
	<span style="color:#007020;font-weight:bold">return</span> []MQTTPublish{
		{
			Topic:    <span style="color:#4070a0">&#34;cmnd/tasmota_68462F/Power&#34;</span>,
			Payload:  payload,
			Retained: <span style="color:#007020;font-weight:bold">true</span>,
		},
	}
}

</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I like the Pub/Sub pattern for home automation, as it nicely uncouples all
components.</p>
<p>It‚Äôs a shame that standards such as <a href="https://homieiot.github.io/">The Homie
convention</a> aren‚Äôt more widely supported, but it
looks like software makes up for that via configuration options.</p>
<p>There are plenty of existing integrations that should cover most needs.</p>
<p>Ideally, more Smart Home and IOT vendors would add MQTT support out of the box,
like <a href="https://shelly.cloud/">Shelly</a>.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Fixing the Nuki Opener smart intercom IOT device (on the BTicino SCS bus intercom system)]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/"/>
    <id>https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/</id>
    <published>2020-11-30T08:12:00+01:00</published>
    <content type="html"><![CDATA[<p>I recently bought a <a href="https://nuki.io/en/opener/">Nuki Opener, which ‚Äúturns your existing intercom into a
smart door opener‚Äù</a>.</p>
<p>Unfortunately, I have had a lot of trouble getting it to work.</p>
<p>I finally got the device working by interjecting my own micro controller between
the intercom bus and the Nuki Opener, then driving the Nuki Opener in its
Analogue mode:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured_hu46bb619362d02271ee9d454f3a246020_1421516_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured_hu46bb619362d02271ee9d454f3a246020_1421516_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured_hu46bb619362d02271ee9d454f3a246020_1421516_600x0_resize_q75_box.jpg"
  
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>The rest of this article outlines how this setup works at a high level.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><p><strong>Warning:</strong> The SCS bus‚Äôs voltage is dangerously high!</p>
<p>I accidentally broke a Teensy and an intercom unit while working with the SCS
bus, which is specified at 27 Vdc, but my measurements show 28 volts. Please be
extra careful!</p>
</div>
  </div>
</aside>

<h2 id="prerequisites">Prerequisites</h2>
<p>For reliable interpretation and transmission of SCS bus data, we‚Äôll need:</p>
<ol>
<li>
<p>SCS receive/transmit circuits. These can be prototyped on a breadboard if you
have the required diodes, transistors, resistors and capacitors.</p>
</li>
<li>
<p>A microcontroller with an Analog Comparator. If your microcontroller has one,
you‚Äôll find a corresponding section in the datasheet. This function is
sometimes abbreviated to <code>CMP</code> or <code>AC</code>, or might be part of a larger
Analog/Digital Converter (<code>ADC</code>).</p>
</li>
<li>
<p>A UART (serial) decoder. Most microcontrollers have at least one UART, but if
you don‚Äôt have one available for whichever reason, you could use a software
UART implementation, too.</p>
</li>
</ol>
<h3 id="scs-receive-circuit">SCS receive circuit</h3>




<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-rx.svg"><img
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-rx.svg"
  alt="SCS receive circuit" title="SCS receive circuit"
  style="border: 1px solid #000; margin-right: 1rem"
  
  align="left"
  
  loading="lazy"></a>


<p>An R-C network, directly connected to the SCS bus, is used for incoming signal
conditioning.</p>
<p>The resistor values have been chosen to divide the voltage of the input signal
from 28V down to approx. 2V, i.e. well within the 0-3.3V range for modern
microcontroller GPIO pins.</p>
<p>A zener diode limits the 28V level to 3.3V, which should be safe for most
microcontrollers.</p>
<p>Simulation: <a href="https://tinyurl.com/yxhrkejn">https://tinyurl.com/yxhrkejn</a></p>
<br clear="all">
<h3 id="scs-transmit-circuit">SCS transmit circuit</h3>




<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-tx.svg"><img
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-tx.svg"
  alt="SCS transmit circuit" title="SCS transmit circuit"
  style="border: 1px solid #000; margin-right: 1rem"
  
  align="left"
  
  loading="lazy"></a>


<p>We directly connect the gate of a mosfet transistor to a GPIO pin of our
microcontroller, so that when the microcontroller drives the pin high, we use
the 100Œ© resistor to attach a load to the SCS bus.</p>
<p>For comparison, the KNX bus, which is similar to the SCS bus, uses a 68Œ©
resistor here.</p>
<p>Simulation: <a href="https://tinyurl.com/y6nv4yg7">https://tinyurl.com/y6nv4yg7</a></p>
<br clear="all">
<h3 id="scs-lab-setup">SCS lab setup</h3>
<p>Use a lab power supply to generate 28V DC. I‚Äôm using the <a href="https://www.galaxus.ch/de/s1/product/velleman-labornetzgeraet-labornetzgeraet-5779537">Velleman LABPS3005SM</a> because it was in stock at Galaxus, but any power supply rated for at least 30V DC will do.</p>
<p>As <a href="https://www.open-homeautomation.com/2016/05/11/a-minimal-knx-setup/">the DIY home automation blog entry ‚ÄúA minimal KNX setup‚Äù</a> describes, you‚Äôll need to place a 47Œ© resistor between the power line and your components.</p>
<p>Afterwards, just connect your components to the bus. The supply/ground line of a <a href="https://en.wikipedia.org/wiki/Breadboard">breadboard</a> will work nicely.</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup_huf43c3b3dca98c428537fa46c6d1931d3_1264545_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup_huf43c3b3dca98c428537fa46c6d1931d3_1264545_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup_huf43c3b3dca98c428537fa46c6d1931d3_1264545_600x0_resize_q75_box.jpg"
  alt="SCS lab setup" title="SCS lab setup"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="micro-controller-choice">Micro Controller choice</h3>
<p>In this blog post, I‚Äôm using a <a href="https://www.pjrc.com/store/teensy40.html">Teensy
4</a> development board that is widely
available for ‚âà20 USD:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4_hu855bbe0a9c47ac557e5b09db74fa3b06_1510905_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4_hu855bbe0a9c47ac557e5b09db74fa3b06_1510905_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4_hu855bbe0a9c47ac557e5b09db74fa3b06_1510905_600x0_resize_q75_box.jpg"
  alt="Teensy 4" title="Teensy 4"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>With its 600 MHz, the Teensy 4 has enough sheer clock frequency to allow for
sloppier coding while still achieving high quality input/output.</p>
<p>The teensy tiny form factor (3.5 x 1.7 cm) works well for this project and will
allow me to store the microcontroller in an existing intercom case.</p>
<p>The <strong>biggest downside is that NXP‚Äôs own MCUXpresso IDE cannot target the
Teensy 4</strong>!</p>
<p>The only officially supported development environment for the Teensy 4 is
Teensyduino, which is a board support package for the Arduino IDE. Having
Arduino support is great, but let‚Äôs compare:</p>
<p>I also have NXP‚Äôs <a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/mimxrt1060-evk-i-mx-rt1060-evaluation-kit:MIMXRT1060-EVK?&amp;&amp;tid=vanMIMXRT1060-EVK">MIMXRT1060-EVK eval
kit</a>,
which uses the same i.MX RT1060 micro controller family as the Teensy 4, but is
much larger and comes with all the bells and whistles; notably:</p>
<ol>
<li>The MCUXpresso IDE works with the eval kit‚Äôs built-in debugger out of the box!
Being able to inspect a stack trace, set breakpoints and look at register
contents are invaluable tools when doing micro controller development.</li>
<li>The MCUXpresso IDE comes with convenient graphical Pin and Clock config
tools. Setting a pin‚Äôs alternate function becomes a few clicks instead of
hours of fumbling around.</li>
<li>The NXP SDK contains a number of drivers and examples that are tested on the
eval kit. That makes it really easy to get started!</li>
</ol>
<p>Each of these points is very attractive on their own, but together they make the
whole experience so different!</p>
<p>Being able to deploy to the Teensy from MCUXpresso would be a killer feature! So
many NXP SDK examples would suddenly become available, filling the Teensy
community‚Äôs gaps.</p>
<h2 id="signal-setup">Signal Setup</h2>
<p>On a high level, this is how we are going to connect the various signals:</p>
<p>Step 1. We start with the SCS intercom bus signal (28V high, 22V low):</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus_hucbd1cf38e2c23c2f6ccc4d43d53e5fa3_262726_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus_hucbd1cf38e2c23c2f6ccc4d43d53e5fa3_262726_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus_hucbd1cf38e2c23c2f6ccc4d43d53e5fa3_262726_600x0_resize_q75_box.jpg"
  
  width="600"
  height="160"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Step 2. Our SCS receive circuit takes the bus signal and divides it down to 2V:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx_huda44e0426bfee0fc7f10a0aefe6154d7_193510_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx_huda44e0426bfee0fc7f10a0aefe6154d7_193510_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx_huda44e0426bfee0fc7f10a0aefe6154d7_193510_600x0_resize_q75_box.jpg"
  alt="voltage-divided SCS signal" title="voltage-divided SCS signal"
  width="600"
  height="447"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Step 3. We convert the voltage-divided analog signal into a digital <code>SCSRXOUT</code> signal:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_600x0_resize_q75_box.jpg"
  alt="Analog Comparator output signal" title="Analog Comparator output signal"
  width="600"
  height="104"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Step 4. We modify our <code>SCSRXOUT</code> signal so that it can be sampled at 50%:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs_huf442b516588f4a97de6b824c24ce97c9_400929_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs_huf442b516588f4a97de6b824c24ce97c9_400929_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs_huf442b516588f4a97de6b824c24ce97c9_400929_600x0_resize_q75_box.jpg"
  alt="modified SCS signal" title="modified SCS signal"
  width="600"
  height="422"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<p>Step 5. We decode the signal using our micro controller‚Äôs UART:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex_hu39435dced393ae623f524c34c9d5a9f1_269597_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex_hu39435dced393ae623f524c34c9d5a9f1_269597_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex_hu39435dced393ae623f524c34c9d5a9f1_269597_600x0_resize_q75_box.jpg"
  alt="Teensy 4 UART decodes SCS" title="Teensy 4 UART decodes SCS"
  width="600"
  height="424"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h2 id="micro-controller-firmware">Micro Controller firmware</h2>
<p>Once I complete the next revision of the SCS interface PCB, I plan to release
all design files, schematics, sources, etc. in full.</p>
<p>Until then, the following sections describe how the most important parts work,
but skip over the implementation-specific glue code that wires everything
together.</p>
<h3 id="analog-comparator">Analog Comparator</h3>
<p>The Analog Comparator in our microcontroller lets us know whether a voltage is
above or below a configured threshold voltage by raising an interrupt. A good
threshold is 1.65V in my case.</p>
<p>In response to the voltage change, we set GPIO pin 15 to a digital high (3.3V) or
low (0V) level:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020;font-weight:bold">volatile</span> <span style="color:#902000">uint32_t</span> cmpflags;

<span style="color:#60a0b0;font-style:italic">// ISR (Interrupt Service Routine), called by the Analog Comparator:
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#902000">void</span> <span style="color:#06287e">acmp1_isr</span>() {
  cmpflags <span style="color:#666">=</span> CMP1_SCR;

  { <span style="color:#60a0b0;font-style:italic">// clear interrupt status flags:
</span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#902000">uint8_t</span> scr <span style="color:#666">=</span> (CMP1_SCR <span style="color:#666">&amp;</span> <span style="color:#666">~</span>(CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK));
    CMP1_SCR <span style="color:#666">=</span> scr <span style="color:#666">|</span> CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK;
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFR_MASK) {
    <span style="color:#60a0b0;font-style:italic">// See below! This line will be modified:
</span><span style="color:#60a0b0;font-style:italic"></span>    digitalWrite(<span style="color:#40a070">15</span>, HIGH);
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFF_MASK) {
    digitalWrite(<span style="color:#40a070">15</span>, LOW);
  }
}
</code></pre></div><p>This signal can easily be verified by attaching an oscilloscope probe each to
the <code>SCSRX</code> voltage-regulated bus signal input and to the <code>SCSRXOUT</code> GPIO pin
output:</p>















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_600x0_resize_q75_box.jpg"
  alt="Analog Comparator output signal" title="Analog Comparator output signal"
  width="600"
  height="104"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<h3 id="analog-comparator-modification">Analog Comparator Modification</h3>
<p>There is one crucial difference between SCS and UART:</p>
<p>To transmit a 0 (or start bit):</p>
<ul>
<li>SCS is low 34Œºs, then high 70Œºs</li>
<li>UART is low the entire 104Œºs</li>
</ul>
<p>UART implementations typically sample at 50%, the middle of the bit period.</p>
<p>For SCS, we would need to sample at 20%, because the signal returns to high so
quickly.</p>
<p>While setting a custom sample point is <em>possible</em> in
e.g. <a href="https://sigrok.org/">sigrok</a>‚Äôs UART decoder, neither software nor hardware
serial implementations on micro controllers typically support it.</p>
<p>On a micro controller it is much easier to just modify the signal so that it can
be sampled at 50%.</p>
<p>In practical terms, this means modifying the <code>acmp1_isr</code> function to return to
high later than the Analog Comparator indicates:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020;font-weight:bold">volatile</span> <span style="color:#902000">uint32_t</span> cmpflags;

<span style="color:#60a0b0;font-style:italic">// ISR (Interrupt Service Routine), called by the Analog Comparator:
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#902000">void</span> <span style="color:#06287e">acmp1_isr</span>() {
  cmpflags <span style="color:#666">=</span> CMP1_SCR;

  { <span style="color:#60a0b0;font-style:italic">// clear interrupt status flags:
</span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#902000">uint8_t</span> scr <span style="color:#666">=</span> (CMP1_SCR <span style="color:#666">&amp;</span> <span style="color:#666">~</span>(CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK));
    CMP1_SCR <span style="color:#666">=</span> scr <span style="color:#666">|</span> CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK;
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFR_MASK) {
    <span style="color:#60a0b0;font-style:italic">// Instead of setting our output pin high immediately,
</span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#60a0b0;font-style:italic">// we delay going up by approx. 40us,
</span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#60a0b0;font-style:italic">// turning the SCS signal into a UART signal:
</span><span style="color:#60a0b0;font-style:italic"></span>    delayMicroseconds(<span style="color:#40a070">40</span>);
    digitalWrite(<span style="color:#40a070">15</span>, HIGH);
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFF_MASK) {
    digitalWrite(<span style="color:#40a070">15</span>, LOW);
  }
}
</code></pre></div><p>You can now read this signal using your laptop and a USB-to-serial adapter!</p>
<p>On a micro controller, we now feed this signal back into a UART decoder. For
prototyping, this can literally mean a jumper wire connecting the output GPIO
pin with a serial RX pin. Some micro controllers also support internal wiring of
peripherals, allowing you to get rid of that cable.</p>
<h3 id="scs-rx-receive">SCS RX (receive)</h3>
<p>With the SCS intercom bus signal bytes now available through the UART decoder,
we can design a streaming SCS decoder. The decoder self-synchronizes and skips
invalid SCS telegrams by checking their checksum. We start with a ring buffer
and a convenience working copy:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">constexpr <span style="color:#902000">int</span> telegramLen <span style="color:#666">=</span> <span style="color:#40a070">7</span>;

<span style="color:#007020;font-weight:bold">typedef</span> <span style="color:#007020;font-weight:bold">struct</span> {
  <span style="color:#60a0b0;font-style:italic">// circular buffer for incoming bytes, indexed using cur
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#902000">uint8_t</span> buf[telegramLen];
  <span style="color:#902000">int</span> cur;

  <span style="color:#902000">uint8_t</span> tbuf[telegramLen];
} scsfilter;
</code></pre></div><p>Each byte we receive from the UART, we store in our ring buffer:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">void</span> <span style="color:#06287e">sf_WriteByte</span>(scsfilter <span style="color:#666">*</span>sf, <span style="color:#902000">uint8_t</span> b) {
  sf<span style="color:#666">-&gt;</span>buf[sf<span style="color:#666">-&gt;</span>cur] <span style="color:#666">=</span> b;
  sf<span style="color:#666">-&gt;</span>cur <span style="color:#666">=</span> (sf<span style="color:#666">-&gt;</span>cur <span style="color:#666">+</span> <span style="color:#40a070">1</span>) <span style="color:#666">%</span> telegramLen;
}
</code></pre></div><p>After every byte, we can check if the ring buffer decodes to a valid ring signal
SCS bus telegram:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">bool</span> <span style="color:#06287e">sf_completeAndValid</span>(scsfilter <span style="color:#666">*</span>sf) {
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint8_t</span> prev <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>buf[(sf<span style="color:#666">-&gt;</span>cur<span style="color:#666">+</span>(telegramLen<span style="color:#666">-</span><span style="color:#40a070">1</span>))<span style="color:#666">%</span>telegramLen];
  <span style="color:#007020;font-weight:bold">if</span> (prev <span style="color:#666">!=</span> <span style="color:#40a070">0xa3</span>) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">false</span>; <span style="color:#60a0b0;font-style:italic">// incomplete: previous byte not a telegram termination
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#60a0b0;font-style:italic">// Copy the whole telegram into tbuf; makes working with it easier:
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">for</span> (<span style="color:#902000">int</span> i <span style="color:#666">=</span> <span style="color:#40a070">0</span>; i <span style="color:#666">&lt;</span> telegramLen; i<span style="color:#666">++</span>) {
    sf<span style="color:#666">-&gt;</span>tbuf[i] <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>buf[(sf<span style="color:#666">-&gt;</span>cur<span style="color:#666">+</span>i)<span style="color:#666">%</span>telegramLen];
  }

  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint8_t</span> stored <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">5</span>];
  <span style="color:#007020;font-weight:bold">const</span> <span style="color:#902000">uint8_t</span> computed <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">1</span>] <span style="color:#666">^</span>
    sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">2</span>] <span style="color:#666">^</span>
	sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">3</span>] <span style="color:#666">^</span>
	sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">4</span>];
  <span style="color:#007020;font-weight:bold">if</span> (stored <span style="color:#666">!=</span> computed) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">false</span>; <span style="color:#60a0b0;font-style:italic">// corrupt? checksum mismatch
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">true</span>;
}

<span style="color:#902000">int</span> <span style="color:#06287e">sf_ringForApartment</span>(scsfilter <span style="color:#666">*</span>sf) {
  <span style="color:#007020;font-weight:bold">if</span> (<span style="color:#666">!</span>sf_completeAndValid(sf)) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#666">-</span><span style="color:#40a070">1</span>;
  }

  <span style="color:#007020;font-weight:bold">if</span> (sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">3</span>] <span style="color:#666">!=</span> <span style="color:#40a070">0x60</span>) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#666">-</span><span style="color:#40a070">1</span>; <span style="color:#60a0b0;font-style:italic">// not a ring command
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#007020;font-weight:bold">if</span> (sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">1</span>] <span style="color:#666">!=</span> <span style="color:#40a070">0x91</span>) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#666">-</span><span style="color:#40a070">1</span>; <span style="color:#60a0b0;font-style:italic">// not sent by the intercom house station
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#007020;font-weight:bold">return</span> (<span style="color:#902000">int</span>)(sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">2</span>]); <span style="color:#60a0b0;font-style:italic">// apartment id
</span><span style="color:#60a0b0;font-style:italic"></span>}
</code></pre></div><h3 id="scs-tx-send">SCS TX (send)</h3>
<p>Conceptually, writing serial data to a GPIO output from software is done with
<a href="https://www.arduino.cc/en/Reference/SoftwareSerial">e.g. the Arduino SoftwareSerial
library</a>, but there are
plenty of implementations for different micro controllers. This technique is
also sometimes called <a href="https://en.wikipedia.org/wiki/Bit_banging">‚ÄúBit banging‚Äù</a>.</p>
<p>I started with the <a href="https://github.com/PaulStoffregen/SoftwareSerial/blob/63f9b1aae6564d301d7ba31261d1f2390e2a7359/SoftwareSerial.cpp#L218">the Teensy <code>SoftwareSerial::write</code>
implementation</a>
and modified it to:</p>
<ol>
<li>
<p>Invert the output to drive the <a href="#scs-transmit-circuit">SCS transmit circuit‚Äôs Mosfet
transistor</a> gate, i.e. low on idle and high on
transmitting a 0 bit.</p>
</li>
<li>
<p>Return to idle 70Œºs earlier than the signal would, i.e. after ‚âà34Œºs already.</p>
</li>
</ol>
<p>The modified <code>write</code> function looks like this:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#define V27 LOW
</span><span style="color:#007020">#define V22 HIGH
</span><span style="color:#007020"></span>
<span style="color:#007020">#define scs0() do { \
</span><span style="color:#007020">  while (ARM_DWT_CYCCNT - begin_cycle &lt; (target-43750</span><span style="color:#60a0b0;font-style:italic">/*70us*/</span><span style="color:#007020">)) ; \
</span><span style="color:#007020">  digitalWriteFast(11, V27); \
</span><span style="color:#007020">} while (0)
</span><span style="color:#007020"></span>
size_t SCSSerial<span style="color:#666">::</span>write(<span style="color:#902000">uint8_t</span> b)
{
  elapsedMicros elapsed;
  <span style="color:#902000">uint32_t</span> target;
  <span style="color:#902000">uint8_t</span> mask;
  <span style="color:#902000">uint32_t</span> begin_cycle;

  ARM_DEMCR <span style="color:#666">|=</span> ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL <span style="color:#666">|=</span> ARM_DWT_CTRL_CYCCNTENA;
  ARM_DWT_CYCCNT <span style="color:#666">=</span> <span style="color:#40a070">0</span>;

  <span style="color:#60a0b0;font-style:italic">// start bit
</span><span style="color:#60a0b0;font-style:italic"></span>  target <span style="color:#666">=</span> cycles_per_bit;
  noInterrupts();
  begin_cycle <span style="color:#666">=</span> ARM_DWT_CYCCNT;
  digitalWriteFast(<span style="color:#40a070">11</span>, V22);
  scs0();
  wait_for_target(begin_cycle, target);

  <span style="color:#60a0b0;font-style:italic">// 8 data bits
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">for</span> (mask <span style="color:#666">=</span> <span style="color:#40a070">1</span>; mask; mask <span style="color:#666">&lt;&lt;=</span> <span style="color:#40a070">1</span>) {
    <span style="color:#007020;font-weight:bold">if</span> (b<span style="color:#666">&amp;</span>mask) {
      digitalWriteFast(<span style="color:#40a070">11</span>, V27);
    } <span style="color:#007020;font-weight:bold">else</span> {
      digitalWriteFast(<span style="color:#40a070">11</span>, V22);
    }
    target <span style="color:#666">+=</span> cycles_per_bit;
    scs0();
    wait_for_target(begin_cycle, target);
  }

  <span style="color:#60a0b0;font-style:italic">// stop bit
</span><span style="color:#60a0b0;font-style:italic"></span>  digitalWriteFast(<span style="color:#40a070">11</span>, V27);
  interrupts();
  target <span style="color:#666">+=</span> cycles_per_bit;
  scs0();
  <span style="color:#007020;font-weight:bold">while</span> (ARM_DWT_CYCCNT <span style="color:#666">-</span> begin_cycle <span style="color:#666">&lt;</span> target) ; <span style="color:#60a0b0;font-style:italic">// wait
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">return</span> <span style="color:#40a070">1</span>;
}
</code></pre></div><h2 id="it-works">It works!</h2>
<p>With the approach described above, I now have a micro controller that recognizes
doorbell rings for my apartment and ignores doorbell rings for my neighbors. The
micro controller can unlock the door, too, and both features are available
through the Nuki Opener.</p>
<h2 id="how-is-the-nuki-opener">How is the Nuki Opener?</h2>
<p>It took over 2 months before I saw the Nuki Opener working correctly for the
first time.</p>
<p>I really hope the Nuki developers can work with what I described above and
improve their product‚Äôs reliability for all customers with an SCS intercom
system!</p>
<p>The device itself seems useful and usable, but time will tell how reliable it
turns out in practice. I think I noticed push notifications when the door rang
coming in rather late (many seconds later).</p>
<p>I‚Äôll keep an eye on this and explore the various Nuki APIs more.</p>
<h2 id="appendix-project-journal">Appendix: Project Journal</h2>
<ul>
<li>2020-09-26: I buy a Nuki Opener (Nuki Opener #1), but despite connecting it correctly, it never successfully opens the door. I start learning about <a href="https://en.wikipedia.org/wiki/Bus_SCS">the SCS home automation bus system that our intercom uses</a>.</li>
<li>2020-09-28: I publish an <a href="/posts/2020-09-28-nuki-scs-bticino-decoding/">SCS bus decoder for sigrok</a> and contact the Nuki Support.</li>
<li>2020-10-15: I buy another Nuki Opener (Nuki Opener #2) to test their old firmware version, because downgrading firmware versions is impossible. Opener #2 actually opens the door, so I assume we are dealing with a firmware problem [turns out incorrect later].</li>
<li>2020-10-16: I publish a detailed <a href="/posts/2020-10-16-nuki-bug-writeup/">analysis of the Nuki Opener not sending the correct signal</a> for the Nuki developers to go through.</li>
<li>2020-11-03: I update my new Nuki Opener #2 to the latest firmware and realize that my old Nuki Opener #1 most likely just has some sort of hardware defect. However, Opener #2 has trouble detecting the ring signal: either it doesn‚Äôt detect any rings at all, or it detects all rings, including those for my neighbors!</li>
<li>2020-11-16: In their 13th (!) email reply, Nuki Support confirms that the Opener firmware is capturing and matching the incoming ring signal, if I understand their developers correctly.</li>
<li>2020-11-18: I suggest to Nuki developers (via Nuki Support) to decode the SCS signal with a UART decoder instead of comparing waveforms. This should be a lot more reliable!</li>
<li>2020-11-23: My self-designed SCS receiver/transmitter/power supply PCB arrives. The schematics are based on existing SCS DIY work, but I created my own KiCad files because I was only interested in the SCS bus interface, not the PIC microcontroller they used.</li>
<li>2020-11-25: Working on the intercom, I assume some wire touched an unlucky spot, and my BTicino intercom went up in smoke. We enabled the Nuki Opener‚Äôs ring sound and started using it as our main door bell. This meant we now started hearing the ring sound for (some) of our neighbors as well.</li>
<li>2020-11-26: My Teensy 4 microcontroller <a href="https://twitter.com/zekjur/status/1332021864206626817">successfully decodes the SCS bus signal with its Analog Comparator and UART decoder</a>.</li>
<li>2020-11-28: My Teensy 4 microcontroller <a href="https://twitter.com/zekjur/status/1332740378907250693">is deployed to filter the SCS bus ring signal and drive the Nuki Opener in analogue mode</a>.</li>
</ul>
]]></content>
  </entry>
</feed>
