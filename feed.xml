<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael Stapelbergs Website</title>
  <link href="https://michael.stapelberg.ch/feed.xml" rel="self"/>
  <link href="https://michael.stapelberg.ch/"/>
  <id>https://michael.stapelberg.ch/</id>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[Eclipse: Enabling Compilation Database (CDB, compile_commands.json) in NXP MCUXpresso v11.3]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/"/>
    <id>https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/</id>
    <published>2021-04-01T11:59:23+02:00</published>
    <content type="html"><![CDATA[

<p>NXP’s Eclipse-based MCUXpresso IDE is the easiest way to make full use of the
hardware debugging features of modern NXP micro controllers such as the <a href="https://www.nxp.com/products/processors-and-microcontrollers/arm-microcontrollers/i-mx-rt-crossover-mcus/i-mx-rt1060-crossover-mcu-with-arm-cortex-m7-core:i.MX-RT1060">i.MX
RT1060</a>
found on the <a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/mimxrt1060-evk-i-mx-rt1060-evaluation-kit:MIMXRT1060-EVK">NXP i.MX RT1060 Evaluation Kit
(<code>MIMXRT1060-EVK</code>)</a>,
which I use for Teensy 4 development.</p>

<p>For projects that are fully under your control, such as imported SDK examples,
or anything you created within Eclipse, you wouldn’t necessarily need
Compilation Database support.</p>

<p>When working with projects of type <code>Makefile Project with Existing Code</code>,
however, Eclipse doesn’t know about preprocessor definition flags and include
directories, unless you would manually duplicate them. In large and
fast-changing projects, this is not an option.</p>

<p>The lack of compiler configuration knowledge (defines and include directories)
breaks various C/C++ tooling features, such as Macro Expansion or the <code>Open
Declaration</code> feature, both of which are an essential tool in my toolbelt, and
particularly useful in large code bases such as micro controller projects with
various SDKs etc.</p>

<p>In some configurations, Eclipse might be able to parse GCC build output, but
when I was working with the <a href="https://qmk.fm/">QMK keyboard firmware</a>, I couldn’t
get the QMK makefiles to print commands that Eclipse would understand, not even
with <code>VERBOSE=true</code>.</p>

<p>Luckily, there is a solution! <a href="https://wiki.eclipse.org/CDT/User/NewIn910#Build">Eclipse CDT 9.10 introduced Compilation Database
support</a> in 2019. MCUXpresso
v11.3.0 ships with CDT 9.11.1.202006011430, meaning it does contain Compilation
Database support.</p>

<p>In case you want to check which version your installed IDE has, open <code>Help</code> →
<code>About MCUXpresso IDE</code>, click <code>Installation Details</code>, open the <code>Features</code> tab,
then locate the <code>Eclipse CDT</code>, <code>C/C++ Development Platform</code> line.</p>

<p>For comparison, Eclipse IDE 2021-03 contains 10.2.0.202103011047, if you want to
verify that the issues I reference below are indeed fixed.</p>

<h2 id="bug-command-vs-arguments">Bug: command vs. arguments</h2>

<p>Before we can enable Compilation Database support, we need to ensure we have a
compatible <code>compile_commands.json</code> database file. Eclipse CDT’s Compilation
Database support before version CDT 10 suffered from <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=563006">Bug
563006</a>: it only
understood the <code>command</code> JSON property, not the <code>arguments</code> property.</p>

<p>Depending on your build system, this isn’t a problem. For example, Meson/ninja’s
<code>compile_commands.json</code> uses <code>command</code> and will work fine.</p>

<p>But, when using Make with <a href="https://github.com/rizsotto/Bear">Bear</a>, you will end
up with <code>arguments</code> by default.</p>

<p>Bear 3.0 allows generating a <code>compile_commands.json</code> Compilation Database with
<code>command</code>, but <a href="https://github.com/rizsotto/Bear/issues/196#issuecomment-691748584">requires multiple commands and config
files</a>,
which is a bit inconvenient with Eclipse.</p>

<p>So, let’s put the extra commands into a <code>commandbear.sh</code> script:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#007020">#!/bin/sh
</span><span style="color:#007020"></span>
<span style="color:#007020">set</span> -eux

intercept --output commands.json -- <span style="color:#4070a0">&#34;</span><span style="color:#bb60d5">$@</span><span style="color:#4070a0">&#34;</span>
citnames <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  --input commands.json <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  --output compile_commands.json <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  --config config.json</code></pre></div>
<p>The <code>&quot;command_as_array&quot;: false</code> option goes into <code>config.json</code>:</p>

<pre><code>{
  &quot;compilation&quot;: {
  },
  &quot;output&quot;: {
    &quot;content&quot;: {
      &quot;include_only_existing_source&quot;: true
    },
    &quot;format&quot;: {
      &quot;command_as_array&quot;: false,
      &quot;drop_output_field&quot;: false
    }
  }
}
</code></pre>

<p>Don’t forget to make the script executable:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chmod +x commandbear.sh</code></pre></div>
<p>Then configure Eclipse to use the <code>commandbear.sh</code> script to build:</p>

<ol>
<li>Open Project Properties by right-clicking your project in the Project
Explorer panel.</li>
<li>Select <code>C/C++ Build</code> and open the <code>Builder Settings</code> tab</li>
<li>In the <code>Builder</code> group, set the <code>Build command</code> text field to:
<code>${workspace_loc:/qmk_firmware}/commandbear.sh make -j16</code></li>
</ol>

<p>Verify your build is working by selecting <code>Project</code> → <code>Clean…</code> and triggering a
build.</p>

<h2 id="enabling-compilation-database-support">Enabling Compilation Database support</h2>

<ol>
<li>Open Project Properties by right-clicking your project in the Project
Explorer panel.</li>
<li>Expand <code>C/C++ General</code>, select <code>Preprocessor Include Paths, Macros etc.</code> and
open the <code>Providers</code> tab.</li>
<li>Untick everything but:

<ul>
<li>MCU GCC Built-in Compiler Parser</li>
<li>MCU GCC Build Output Parser</li>
<li>Compilation Database Parser</li>
</ul></li>
<li>Select <code>Compilation Database Parser</code>, click <code>Apply</code> to make the Compilation
Database text field editable.</li>
<li>Put a full path to your compile_commands.json file into the text field,
e.g. <code>/home/michael/kinx/workspace/qmk_firmware/compile_commands.json</code>. Note
that variables will not be expanded! Support for using variables was added
later in <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=559186">Bug 559186</a>.</li>
<li>Select <code>MCU GCC Build Output Parser</code> as <code>Build parser</code>.</li>
<li>Tick the <code>Exclude files not in the Compilation Database</code> checkbox.</li>
<li>Click <code>Apply and Close</code>.</li>
</ol>
















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1_hu2472da729552826bf692ea90f41fcb42_1282459_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1_hu2472da729552826bf692ea90f41fcb42_1282459_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-1_hu2472da729552826bf692ea90f41fcb42_1282459_600x0_resize_q75_box.jpg"
  alt="Compilation Database Parser settings" title="Compilation Database Parser settings"
  width="600"
  height="562"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>You will know Compilation Database support works when its progress view shows
up:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2_hu3785c06d044add2745f30f8a2a36e111_353949_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2_hu3785c06d044add2745f30f8a2a36e111_353949_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-2_hu3785c06d044add2745f30f8a2a36e111_353949_600x0_resize_q75_box.jpg"
  alt="Compilation Database progress" title="Compilation Database progress"
  width="600"
  height="179"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>If you have an incompatible or empty <code>compile_commands.json</code>, nothing visible
will happen (no progress indicator or error messages).</p>

<p>After indexing completes, you should see:</p>

<ol>
<li>Files that were not used as greyed out in the <code>Project Explorer</code></li>
<li><code>Open Declaration</code> in the context menu of a selected identifier (or <code>F3</code>)
should jump to the correct file. For example, my test sequence for this
feature in the QMK repository is:

<ul>
<li>in <code>tmk_core/protocol/chibios/main.c</code>, open <code>init_usb_driver</code></li>
<li>open <code>usbStart</code>, should bring up <code>lib/chibios</code> git submodule</li>
<li>open <code>usb_lld_start</code>, should bring up <code>MIMXRT1062</code> port</li>
</ul></li>
<li>Macros expanded correctly, e.g. <code>MIMXRT1062_USB_USE_USB1</code> in the following
example</li>
</ol>
















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6_hu9efc4b93b6aefec1d634e69f8dd62cd0_914059_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6_hu9efc4b93b6aefec1d634e69f8dd62cd0_914059_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-6_hu9efc4b93b6aefec1d634e69f8dd62cd0_914059_600x0_resize_q75_box.jpg"
  alt="Compilation Database in effect: files greyed out and macros expanded" title="Compilation Database in effect: files greyed out and macros expanded"
  width="600"
  height="301"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="slow-file-exclusion-in-projects-with-many-files">Slow file exclusion in projects with many files</h2>

<p><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=565457">Bug 565457</a> explains an
optimization in the algorithm used to generate the list of excluded paths, which
I would summarize as “use whole directories instead of individual files”.</p>

<p>This optimization was introduced later, so in MCUXpresso v11.3, we still have to
endure watching the slow algorithm for a few seconds:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4_hu3785c06d044add2745f30f8a2a36e111_391538_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4_hu3785c06d044add2745f30f8a2a36e111_391538_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-04-01-compilation-database-eclipse-mcuxpresso/cdb-4_hu3785c06d044add2745f30f8a2a36e111_391538_600x0_resize_q75_box.jpg"
  alt="Compilation Database exclusion slow" title="Compilation Database exclusion slow"
  width="600"
  height="179"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="conclusion">Conclusion</h2>

<p>NXP, please release a new MCUXpresso IDE with a more recent CDT version!</p>

<p>The improvements in the newer version would make the setup so much simpler.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Make your intercom smarter with an MQTT backpack]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/"/>
    <id>https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/</id>
    <published>2021-03-13T16:54:00+01:00</published>
    <content type="html"><![CDATA[

<p>I bought the cheapest compatible BTicino intercom device (BT 344232 for 32 €)
that I could find on eBay, then soldered in 4 wires and added microcontrollers
to make it smart. It now connects to my <a href="https://nuki.io/en/opener/">Nuki Opener Smart Intercom IOT
device</a>, and to <a href="/posts/2021-01-10-mqtt-introduction/">my local MQTT Pub/Sub
bus</a> (why not?).</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_600x0_resize_q75_box.jpg"
  alt="modified BTicino" title="modified BTicino"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="background">Background</h2>

<p>In my <a href="/posts/2020-11-30-scs-processing-microcontroller/">last post about the BTicino intercom from
November</a>, I described how to
use a Teensy microcontroller to reliably interpret SCS bus signals and drive a
Nuki Opener (Smart Intercom).</p>

<p>Originally, I had hoped the Nuki developers would be able to fix their device
based on my SCS bus research, but they don’t seem to be interested. Instead,
their support actually suggested I run my microcontroller workaround
indefinitely!</p>

<p>Hence, I decided to work on the next revision to clean up my setup in terms of
cable clutter. I also figured: if I already need to run my own microcontroller,
I also want to connect it to my local <a href="/posts/2021-01-10-mqtt-introduction/">MQTT Pub/Sub
bus</a> for maximum flexibility.</p>

<p>Unfortunately, the Teensy microcontroller lacks built-in WiFi, or any kind of
networking.</p>

<p>I switched to an ESP32-based microcontroller, but powering those from the SCS
bus seems like a bad idea: they draw a lot of power, and building small
high-quality power supplies is hard.</p>

<p>This made me scrap <a href="https://twitter.com/zekjur/status/1331646748989788160">my previous plans to make my own SCS send/receive
hardware</a>.</p>

<p>Instead, I wondered what the easiest yet most reliable approach might be to make
this intercom unit smart. Instead of building my own SCS hardware, could I use
the intercom unit itself to send the door unlock signal, and could I obtain the
unit’s already-decoded SCS bus signal?</p>

<h2 id="finding-the-signals">Finding the signals</h2>

<p>Based on my previous research, I roughly knew what to expect: closest to the bus
terminals, there will be some components that filter the bus signal and convert
the 27V into a lower voltage. Connected to that power supply is a
microcontroller which deals with all user interface.</p>

<p>To learn more about the components, I first identified all <a href="https://en.wikipedia.org/wiki/Integrated_circuit">ICs (Integrated
Circuits)</a> based on their
labeling. The following are relevant:</p>

<ul>
<li><a href="https://www.ti.com/lit/ds/symlink/lm393-n.pdf">TI LM393</a>: Dual Comparators</li>
<li><a href="https://www.ti.com/lit/ds/symlink/lp2951-q1.pdf">TI LP2951</a>: Adjustable Micropower Voltage Regulators, 5V output</li>
<li><a href="http://ww1.microchip.com/downloads/en/devicedoc/41202c.pdf">Microchip PIC16F684</a>: 8-bit microcontroller</li>
</ul>

<p>I connected my development intercom unit to <a href="/posts/2020-11-30-scs-processing-microcontroller/#scs-lab-setup">my SCS bus lab
setup</a> and used
my oscilloscope to confirm expected signal levels based on the pinout from the
IC datasheets.</p>

<p>I settled on the following 4 relatively easily accessible signals and soldered
jumper wires to them:</p>

<ul>
<li><code>5V</code> and <code>GND</code>: 5V, 100mA. Our QT Py microcontroller uses 7mA.</li>
<li><code>OPEN5V</code>: activates the button which unlocks the door</li>
<li><code>SCSRX5V</code>: converted SCS signal</li>
</ul>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals_huad180b5f717872783fbf44350a70ae1a_718323_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals_huad180b5f717872783fbf44350a70ae1a_718323_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/signals_huad180b5f717872783fbf44350a70ae1a_718323_600x0_resize_q75_box.jpg"
  alt="BTicino signals" title="BTicino signals"
  width="600"
  height="631"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="converting-the-signals">Converting the signals</h2>

<p>Because the BTicino intercom units runs at 5V, but more modern microcontrollers
run at 3.3V, we need to convert between the two voltages:</p>

<ol>
<li><p>We need to convert a 3.3V signal to <code>OPEN5V</code> to trigger opening the door.</p></li>

<li><p>We need to convert <code>SCSRX5V</code> signal to 3.3V so that I can use an ESP32
microcontroller to read the signal and place it on MQTT.</p></li>
</ol>

<p>Here’s the corresponding schematic:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic.png"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic_hucc6cb59bde9ea030d5dc2bcd00b21a79_47323_1200x0_resize_box_2.png 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic_hucc6cb59bde9ea030d5dc2bcd00b21a79_47323_1800x0_resize_box_2.png 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/schematic_hucc6cb59bde9ea030d5dc2bcd00b21a79_47323_600x0_resize_box_2.png"
  alt="schematic" title="schematic"
  width="600"
  height="564"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="microcontroller-selection">Microcontroller selection</h2>

<p>I eventually decided to task a dedicated microcontroller with the signal
conversion, instead of having the WiFi-enabled microcontroller do everything,
for multiple reasons:</p>

<ul>
<li><p>Reliability. It turns out that using a hardware analog comparator results in a
much higher signal quality than continuously sampling an ADC yourself, even
when using the ESP32’s <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/ulp.html">ULP (Ultra Low Power)
co-processor</a>
to do the sampling.</p></li>

<li><p>Easy implementation. Converting an SCS signal to a serial signal is literally
<a href="/posts/2020-11-30-scs-processing-microcontroller/#analog-comparator-modification">a single <code>delayMicroseconds(20);</code> call in the right
place</a>. Having
a whole microcontroller for only this task eliminates any concurrency
concerns. I have not had to debug or change the software even once in the last
few months.</p></li>

<li><p>Easy debugging/introspection. I can connect a standard USB-to-serial adapter
and verify the signal is read correctly. This quickly narrows down issues on
either side of the serial interface. Issues with the microcontroller side can
be reproduced by sending serial data.</p></li>
</ul>

<p>Here are the 2 microcontrollers I’m using in this project, plus the Teensy I
used previously:</p>

<table>
<thead>
<tr>
<th>Microcontroller</th>
<th>WiFi</th>
<th>Analog Comparator</th>
<th>Price</th>
</tr>
</thead>

<tbody>
<tr>
<td><a href="https://www.pjrc.com/store/teensy40.html">Teensy 4.0</a></td>
<td>no</td>
<td>yes</td>
<td>19 USD</td>
</tr>

<tr>
<td><a href="https://www.adafruit.com/product/4600">Adafruit QT Py</a></td>
<td>no</td>
<td>yes</td>
<td>6 USD</td>
</tr>

<tr>
<td><a href="https://www.tinypico.com/">TinyPICO</a></td>
<td>yes</td>
<td>no</td>
<td>20 USD</td>
</tr>
</tbody>
</table>

<p>If ESP32 boards such as the TinyPICO had a hardware Analog Comparator, I would
likely use just one microcontroller, but keep the serial interface on a GPIO for
easy debugging.</p>

<h3 id="why-the-adafruit-qt-py">Why the Adafruit QT Py?</h3>

<p>The minimal function we need for our signal conversion device is to convert an
SCS signal (5V) to a serial signal (3.3V). For this conversion, we need a
hardware analog comparator and an output GPIO that we can drive independently,
so that we can modify the signal.</p>

<p>Additionally, the device should use as little power as possible so that it can
comfortably fit in the left-over energy budget of the intercom unit’s power
supply.</p>

<p>The smallest microcontroller I know of that comes with a hardware analog
comparator is the <a href="https://www.adafruit.com/product/4600">Adafruit QT Py</a>. It’s
a 32-bit Cortex M0+ (SAMD21) that can be programmed using the Arduino IDE, or
MicroPython (hence the name).</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy_hud5b1d29bf03dbaef00ea80c4fff123ac_742679_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy_hud5b1d29bf03dbaef00ea80c4fff123ac_742679_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/qtpy_hud5b1d29bf03dbaef00ea80c4fff123ac_742679_600x0_resize_q75_box.jpg"
  alt="Adafruit QT Py" title="Adafruit QT Py"
  width="600"
  height="378"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>There are other SAMD21 boards with the same form factor, such as the <a href="https://wiki.seeedstudio.com/Seeeduino-XIAO/">Seeeduino
XIAO</a>.</p>

<h3 id="why-the-tinypico-esp32-board">Why the TinyPICO ESP32 board?</h3>

<p>When looking for a WiFi-enabled microcontroller, definitely go with something
ESP32-based!</p>

<p>The community around the Espressif ESP32 (and its predecessor ESP8266) is
definitely one of its biggest pluses: there are tons of Arduino sketches,
troubleshooting tips, YouTube videos, reference documentation, forum posts, and
so on.</p>

<p>The ESPs have been around since ≈2014, so many (largely-compatible) boards are
available. In fact, I started this project on an <a href="https://m5stack.com/collections/m5-core/products/basic-core-iot-development-kit">M5Stack ESP32 Basic Core IoT
Development
Kit</a>,
deployed it on an <a href="https://www.adafruit.com/product/4172">Adafruit HUZZAH32 Breakout
Board</a> and ultimately ported it to the
<a href="https://www.tinypico.com/">TinyPICO</a>. Porting between the different
microcontrollers was really smooth: the only adjustments were pin numbers and
dropping in a TinyPICO helper library for its RGB LED, which I chose to use as a
power LED.</p>

<p>I chose the TinyPICO ESP32 board specifically for its small form factor and
convenience:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison_hu6f8a665b92c49e3c59fd49dc9db9188f_1416694_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison_hu6f8a665b92c49e3c59fd49dc9db9188f_1416694_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-comparison_hu6f8a665b92c49e3c59fd49dc9db9188f_1416694_600x0_resize_q75_box.jpg"
  alt="TinyPICO comparison with Adafruit Huzzah32 and Teensy 4.0" title="TinyPICO comparison with Adafruit Huzzah32 and Teensy 4.0"
  width="600"
  height="415"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>The TinyPICO is only 18mm × 32mm, slightly smaller than the Teensy 4.0’s 18mm × 35mm.</p>

<p>In comparison, the <a href="https://www.adafruit.com/product/4172">Adafruit HUZZAH32 breakout
board</a> is gigantic with its 25mm ×
44mm. And that’s without the extra USB-to-serial adapter (FT232H in the picture
above) you need for programming, serial console and powering the board!</p>

<p>The TinyPICO does not need an extra adapter. You can plug it in and program it
immediately, just like the Teensy!</p>

<p>I’d like it if the next revision of the TinyPICO switched from Micro USB to USB
C.</p>

<p>If the TinyPICO is not for you (or unavailable), search for other boards that
contain the ESP32-PICO-D4 chip. For example, <a href="https://www.dfrobot.com/product-1941.html">DFRobot’s
ESP32-PICO-KIT</a> or <a href="https://www.amazon.de/Espressif-ESP32-ESP32-PICO-KIT-Board-ESP32-PICO-D4/dp/B07J1YMB8R">Espressif’s own
ESP32-PICO-KIT</a>.</p>

<h2 id="prototype">Prototype</h2>

<p>After testing everything on a breadboard, I soldered a horizontal pin header
onto the QT Py, connected it to my Sparkfun level shifter board and soldered the
remaining voltage divider components “flying”. The result barely fit into the
case, but worked flawlessly for weeks:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype_hu9e7bb0ca740035a832123149efe1ff0b_1457519_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype_hu9e7bb0ca740035a832123149efe1ff0b_1457519_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/prototype_hu9e7bb0ca740035a832123149efe1ff0b_1457519_600x0_resize_q75_box.jpg"
  alt="prototype" title="prototype"
  width="600"
  height="527"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="backpack-pcb-for-the-qt-py">Backpack PCB for the QT Py</h2>

<p>After verifying this prototype works well in practice, I miniaturized it into a
“backpack” PCB.</p>

<p>The backpack contains all the same parts as the prototype, but with fewer bulky
wires and connectors, and using only SMD parts. The build you see below uses
0602 SMD parts, but if I made another revision I would probably chose the larger
0805 parts for easier soldering.</p>

<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">If you only wanted to drive the Nuki Opener (without any networking), you could
easily do that from the QT Py itself and skip the TinyPICO.</div>
  </div>
</aside>

















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack_hu6792fa18b3c27ff7621846a3ddcd41b1_1436932_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack_hu6792fa18b3c27ff7621846a3ddcd41b1_1436932_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack_hu6792fa18b3c27ff7621846a3ddcd41b1_1436932_600x0_resize_q75_box.jpg"
  alt="QT Py with backpack" title="QT Py with backpack"
  width="600"
  height="462"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb_hu7c3948370bbbb36c4b0624284e90cf21_991666_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb_hu7c3948370bbbb36c4b0624284e90cf21_991666_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/backpack-pcb_hu7c3948370bbbb36c4b0624284e90cf21_991666_600x0_resize_q75_box.jpg"
  alt="QT Py with backpack PCB" title="QT Py with backpack PCB"
  width="600"
  height="346"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="assembly">Assembly</h2>

<p>To save some space in the intercom unit case, I decided to solder the jumper
wires directly onto the TinyPICO instead of using a pin header. I could have
gone one step further by cutting the wires at length and soldering them directly
on both ends, without any connectors, but I wanted to be able to easily unplug
and re-combine the parts of this project.</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires_hu0ea0facd5de8df5b7e0832eec5ec06a2_2526440_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires_hu0ea0facd5de8df5b7e0832eec5ec06a2_2526440_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/tinypico-wires_hu0ea0facd5de8df5b7e0832eec5ec06a2_2526440_600x0_resize_q75_box.jpg"
  alt="wires soldered directly into the TinyPICO" title="wires soldered directly into the TinyPICO"
  width="600"
  height="678"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>From top to bottom, I made the following connections:</p>

<table>
<thead>
<tr>
<th>Pin</th>
<th>Color</th>
<th>Function</th>
</tr>
</thead>

<tbody>
<tr>
<td>25</td>
<td><span style="background-color: #ff4136; padding: 0 .5em 0 .5em">red</span></td>
<td><code>SCSRX_3V3</code></td>
</tr>

<tr>
<td>27</td>
<td><span style="background-color: #2ecc40; padding: 0 .5em 0 .5em">green</span></td>
<td><code>OPEN_3V3</code></td>
</tr>

<tr>
<td>15</td>
<td><span style="background-color: #0074d9; color: white; padding: 0 .5em 0 .5em">blue</span></td>
<td>Nuki Opener blue cable</td>
</tr>

<tr>
<td>14</td>
<td><span style="background-color: #ffdc00; padding: 0 .5em 0 .5em">yellow</span></td>
<td>Nuki Opener yellow cable</td>
</tr>

<tr>
<td>4</td>
<td><span style="background-color: #b10dc9; color: white; padding: 0 .5em 0 .5em">purple</span></td>
<td>floor ring button pushed</td>
</tr>

<tr>
<td>3V3</td>
<td><span style="background-color: white; padding: 0 .5em 0 .5em">white</span></td>
<td>3.3V for the floor ring button</td>
</tr>

<tr>
<td>5V</td>
<td><span style="background-color: #ff851b; padding: 0 .5em 0 .5em">orange</span></td>
<td>power for the TinyPICO</td>
</tr>

<tr>
<td>GND</td>
<td><span style="background-color: brown; color: white; padding: 0 .5em 0 .5em">brown</span></td>
<td>ground for the TinyPICO</td>
</tr>

<tr>
<td>GND</td>
<td><span style="background-color: brown; color: white; padding: 0 .5em 0 .5em">brown</span></td>
<td>ground to the QT Py</td>
</tr>

<tr>
<td>GND</td>
<td><span style="background-color: brown; color: white; padding: 0 .5em 0 .5em">brown</span></td>
<td>ground to the Nuki Opener</td>
</tr>
</tbody>
</table>

<p>The TinyPICO USB port is still usable for updating the software and serial console
debugging.</p>

<p>Here’s the TinyPICO connected to the QT Py inside the intercom unit:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/intercom-modified-featured_hub733b3134fea4b189ea38881ff1c39d2_1378037_600x0_resize_q75_box.jpg"
  alt="modified BTicino" title="modified BTicino"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>The QT Py is powered by the intercom unit’s supply, and the TinyPICO I’m
powering with an external USB power supply and a cut-open USB cable. This allows
me to route the jumper wires through the intercom unit’s hole in the back,
through which a USB plug doesn’t fit:</p>
















<a href="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation_hu026d112f6291a36ec32cbedad99b0fdb_1989526_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation_hu026d112f6291a36ec32cbedad99b0fdb_1989526_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2021-03-13-smart-intercom-backpack/final-installation_hu026d112f6291a36ec32cbedad99b0fdb_1989526_600x0_resize_q75_box.jpg"
  alt="final installation" title="final installation"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="software-artifacts">Software / Artifacts</h2>

<p>You can find the Arduino sketches and KiCad files for this project at
<a href="https://github.com/stapelberg/intercom-backpack">https://github.com/stapelberg/intercom-backpack</a></p>

<p>For debugging, I found it useful to publish every single byte received from the
SCS bus on the <code>doorbell/debug/scsrx</code> MQTT topic. Full SCS telegrams are
published to <code>doorbell/events/scs</code>, so by observing both, you can verify that
retransmission suppression and SCS decoding work correctly.</p>

<p>Similarly, signaling a doorbell ring to the Nuki Opener can be debugged by
sending a message to MQTT topic <code>doorbell/debug/cmd/ring</code>.</p>

<p>Initially, it wasn’t clear to me whether the WiFi library would maintain the
connection indefinitely. After observing my microcontroller eventually
disappearing from my network, I added the <code>taskreconnect</code> FreeRTOS task, and
things have been stable since.</p>

<h2 id="nuki-opener-verdict">Nuki Opener: verdict</h2>

<p>I now have a Nuki Opener running next to my own microcontroller, so I can see
how well it works.</p>

<h3 id="setup">setup</h3>

<p>Setting up the Nuki is the worst part: their colorful cable is super flimsy and
loose, often losing contact. They should definitely switch to a cable with a
mechanical lock.</p>

<p>The software part of the setup is okay, but the compatibility with the SCS bus
is poor: I couldn’t get the device to work at all (see my initial post), and had
to resort to using my own microcontroller to drive the Nuki in analogue mode.</p>

<p>I’m disappointed that the Nuki developers aren’t interested in improving their
device’s compatibility and reliability with the SCS bus. They seem to
capture/replay the entire signal (including re-transmissions) instead of
actually decoding the signal.</p>

<h3 id="in-my-day-to-day">in my day-to-day</h3>

<p>The push notifications I get on my iPhone from the Nuki are often
delayed. Usually the delay is a few seconds, but sometimes notifications arrive
hours later or just don’t arrive at all!</p>

<p>While the push notifications are sent from a Nuki server and hence need the
internet to function, the Nuki Bridge (translating Bluetooth Low Energey from
the Nuki Opener to WiFi) allows configuring notifications in the local network
via web hooks.</p>

<p>The Nuki Bridge’s notifications are much more reliable in my experience.</p>

<p>People sometimes ask why I use the Nuki Opener at all, given that I have some
infrastructure of my own, too. While opening the door and receiving
notifications is something I can do without the Nuki, too, I don’t want to spend
my spare time re-implementing the Nuki app (on multiple platforms) with its geo
fencing, friend invitations, ring to open, etc. In addition, the Nuki Opener
physical device has a nice ring sound and large push button to open the door,
both of which are convenient.</p>

<h2 id="conclusion">Conclusion</h2>

<p>My intercom is now much smarter! Doorbell notifications make their way to my
various devices via MQTT, and I can conveniently open the door from any device,
as opposed to rushing to the intercom unit in the hallway.</p>

<p>Compared to the previous proof-of-concepts and development installations, I feel
more confident in the current solution because it re-uses the intercom unit for
the nitty-gritty SCS bus communication details.</p>

<p>The overall strategy should be widely applicable regardless of the specific
intercom vendor/unit you have. Be sure to buy your own unit (don’t solder into
your landlord’s intercom unit!) and test in a separate lab setup first, of
course!</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Debian Code Search: OpenAPI now available]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-03-06-debian-code-search-openapi/"/>
    <id>https://michael.stapelberg.ch/posts/2021-03-06-debian-code-search-openapi/</id>
    <published>2021-03-06T11:15:11+01:00</published>
    <content type="html"><![CDATA[

<p><a href="https://codesearch.debian.net/">Debian Code Search</a> now offers an OpenAPI-based API!</p>

<p>Various developers have created ad-hoc client libraries based on how the web
interface works.</p>

<p>The goal of offering an OpenAPI-based API is to provide developers with
automatically generated client libraries for a large number of programming
languages, that target a stable interface independent of the web interface’s
implementation details.</p>

<h2 id="getting-started">Getting started</h2>

<ol>
<li><p>Visit <a href="https://codesearch.debian.net/apikeys/">https://codesearch.debian.net/apikeys/</a> to download your personal API
key. Login via <a href="https://salsa.debian.org/">Debian’s GitLab instance
salsa.debian.org</a>; register there if you have no
account yet.</p></li>

<li><p>Find the Debian Code Search client library for your programming language. If
none exists yet, <a href="https://editor.swagger.io/?url=https://codesearch.debian.net/openapi2.yaml">auto-generate a client library on editor.swagger.io: click
“Generate
Client”</a>.</p></li>

<li><p>Search all code in Debian from your own analysis tool, migration tracking
dashboard, etc.</p></li>
</ol>

<h2 id="curl-example">curl example</h2>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  -H <span style="color:#4070a0">&#34;x-dcs-apikey: </span><span style="color:#007020;font-weight:bold">$(</span>cat dcs-apikey-stapelberg.txt<span style="color:#007020;font-weight:bold">)</span><span style="color:#4070a0">&#34;</span> <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  -X GET <span style="color:#4070a0;font-weight:bold">\
</span><span style="color:#4070a0;font-weight:bold"></span>  <span style="color:#4070a0">&#34;https://codesearch.debian.net/api/v1/search?query=i3Font&amp;match_mode=regexp&#34;</span> </code></pre></div>
<h2 id="web-browser-example">Web browser example</h2>

<p>You can try out the API in your web browser in the <a href="https://codesearch.debian.net/apikeys/#openapi-doc-browser">OpenAPI
documentation</a>.</p>

<h2 id="code-example-go">Code example (Go)</h2>

<p>Here’s an example program that demonstrates how to set up an auto-generated Go
client for the Debian Code Search OpenAPI, run a query, and aggregate the results:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">burndown</span>() <span style="color:#902000">error</span> {
	cfg <span style="color:#666">:=</span> openapiclient.<span style="color:#06287e">NewConfiguration</span>()
	cfg.<span style="color:#06287e">AddDefaultHeader</span>(<span style="color:#4070a0">&#34;x-dcs-apikey&#34;</span>, apiKey)
	client <span style="color:#666">:=</span> openapiclient.<span style="color:#06287e">NewAPIClient</span>(cfg)
	ctx <span style="color:#666">:=</span> context.<span style="color:#06287e">Background</span>()

	<span style="color:#60a0b0;font-style:italic">// Search through the full Debian Code Search corpus, blocking until all
</span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// results are available:
</span><span style="color:#60a0b0;font-style:italic"></span>	results, _, err <span style="color:#666">:=</span> client.SearchApi.<span style="color:#06287e">Search</span>(ctx, <span style="color:#4070a0">&#34;fmt.Sprint(err)&#34;</span>, <span style="color:#666">&amp;</span>openapiclient.SearchApiSearchOpts{
		<span style="color:#60a0b0;font-style:italic">// Literal searches are faster and do not require escaping special
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// characters, regular expression searches are more powerful.
</span><span style="color:#60a0b0;font-style:italic"></span>		MatchMode: optional.<span style="color:#06287e">NewString</span>(<span style="color:#4070a0">&#34;literal&#34;</span>),
	})
	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		<span style="color:#007020;font-weight:bold">return</span> err
	}

	<span style="color:#60a0b0;font-style:italic">// Print to stdout a CSV file with the path and number of occurrences:
</span><span style="color:#60a0b0;font-style:italic"></span>	wr <span style="color:#666">:=</span> csv.<span style="color:#06287e">NewWriter</span>(os.Stdout)
	header <span style="color:#666">:=</span> []<span style="color:#902000">string</span>{<span style="color:#4070a0">&#34;path&#34;</span>, <span style="color:#4070a0">&#34;number of occurrences&#34;</span>}
	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> wr.<span style="color:#06287e">Write</span>(header); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		<span style="color:#007020;font-weight:bold">return</span> err
	}
	occurrences <span style="color:#666">:=</span> <span style="color:#007020">make</span>(<span style="color:#007020;font-weight:bold">map</span>[<span style="color:#902000">string</span>]<span style="color:#902000">int</span>)
	<span style="color:#007020;font-weight:bold">for</span> _, result <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> results {
		occurrences[result.Path]<span style="color:#666">++</span>
	}
	<span style="color:#007020;font-weight:bold">for</span> _, result <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> results {
		o, ok <span style="color:#666">:=</span> occurrences[result.Path]
		<span style="color:#007020;font-weight:bold">if</span> !ok {
			<span style="color:#007020;font-weight:bold">continue</span>
		}
		<span style="color:#60a0b0;font-style:italic">// Print one CSV record per path:
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#007020">delete</span>(occurrences, result.Path)
		record <span style="color:#666">:=</span> []<span style="color:#902000">string</span>{result.Path, strconv.<span style="color:#06287e">Itoa</span>(o)}
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> wr.<span style="color:#06287e">Write</span>(record); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			<span style="color:#007020;font-weight:bold">return</span> err
		}
	}
	wr.<span style="color:#06287e">Flush</span>()
	<span style="color:#007020;font-weight:bold">return</span> wr.<span style="color:#06287e">Error</span>()
}</code></pre></div>
<p>The full example can be found under
<a href="https://github.com/Debian/dcs/blob/3d6a18f010e915f77b4833189286100308c539cb/_example/burndown.go"><code>burndown.go</code></a>.</p>

<h2 id="feedback">Feedback?</h2>

<p>File a <a href="https://github.com/Debian/dcs/issues">GitHub issue on
<code>github.com/Debian/dcs</code></a> please!</p>

<h2 id="migration-status">Migration status</h2>

<p>I’m aware of the following <a href="https://codesearch.debian.net/thirdparty">third-party projects using Debian Code
Search</a>:</p>

<table>
<thead>
<tr>
<th>Tool</th>
<th>Migration status</th>
</tr>
</thead>

<tbody>
<tr>
<td><a href="https://salsa.debian.org/debian/codesearch-cli">Debian Code Search CLI tool</a></td>
<td><a href="https://salsa.debian.org/debian/codesearch-cli/-/merge_requests/1">Updated to OpenAPI</a></td>
</tr>

<tr>
<td><a href="https://salsa.debian.org/aviau/identify-incomplete-xs-go-import-path">identify-incomplete-xs-go-import-path</a></td>
<td><a href="https://salsa.debian.org/aviau/identify-incomplete-xs-go-import-path/-/merge_requests/1">Update pending</a></td>
</tr>

<tr>
<td><a href="https://gitlab.gnome.org/nbenitez/gnome-codesearch">gnome-codesearch</a></td>
<td>makes no API queries</td>
</tr>
</tbody>
</table>

<p>If you find any others, please point them to this post in case they are not
using Debian Code Search’s OpenAPI yet.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[A quick introduction to MQTT for IOT]]></title>
    <link href="https://michael.stapelberg.ch/posts/2021-01-10-mqtt-introduction/"/>
    <id>https://michael.stapelberg.ch/posts/2021-01-10-mqtt-introduction/</id>
    <published>2021-01-10T15:26:00+01:00</published>
    <content type="html"><![CDATA[

<p>While I had heard the abbreviation <a href="https://en.wikipedia.org/wiki/MQTT">MQTT</a>
many times, I never had a closer look at what MQTT is.</p>

<p>Here are a few quick notes about using MQTT as <a href="https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Pub/Sub
bus</a> in a home
IOT network.</p>

<h2 id="motivation">Motivation</h2>

<p>Once you have a few <a href="https://en.wikipedia.org/wiki/Internet_of_things">IOT
devices</a>, an obvious question
is how to network them.</p>

<p>If all your devices are from the same vendor, the vendor takes care of it.</p>

<p>In my home, I have many different vendors/devices, such as (incomplete list):</p>

<ul>
<li><a href="https://nuki.io/en/opener/">Nuki Opener</a> Smart Intercom</li>
<li><a href="https://www.itead.cc/sonoff-s26-wifi-smart-plug.html">Sonoff S26 Smart Plug</a> (WiFi-controlled socket outlet)</li>
<li><a href="https://www.aqara.com/en/door_and_window_sensor.html">Aqara Door &amp; Window Sensors</a></li>
<li><a href="https://en.wikipedia.org/wiki/IKEA#Smart_home">IKEA Home Smart</a> (formerly TRÅDFRI) Smart Lights</li>
</ul>

<p>Here is how I combine these devices:</p>

<ul>
<li>When I’m close to my home (geo-fencing), the Nuki Opener enables Ring To Open (RTO): when I ring the door bell, it opens the door for me.</li>
<li>When I open the apartment door, the Smart Lights in the hallway turn on.</li>
<li>When I’m home, my stereo speakers should be powered on so I can play music.</li>
</ul>

<p>A conceptually simple way to hook this up is to connect things directly: listen
to the Aqara Door Sensor and instruct the Smart Lights to turn on, for example.</p>

<p>But, connecting everything to an MQTT bus has a couple of advantages:</p>

<ol>
<li>Unification: everything is visible in one place, the same tools work for all
devices.</li>
<li>Your custom logic is uncoupled from vendor details: you can receive and send
MQTT.</li>
<li>Compatibility with existing software, such as <a href="https://www.home-assistant.io/">Home
Assistant</a> or
<a href="https://www.openhab.org/">openHAB</a></li>
</ol>

<h2 id="step-1-set-up-an-mqtt-broker-server">Step 1. Set up an MQTT broker (server)</h2>

<p>A broker is what relays messages between publishers and subscribers. As an
optimization, the most recent value of a topic can be retained, so that e.g. a
subscriber does not need to wait for the next change to obtain the current
state.</p>

<p>The most popular choice for broker software seems to be
<a href="https://mosquitto.org/">Mosquitto</a>, but since I like to run Go software on
<a href="https://gokrazy.org/">https://gokrazy.org/</a>, I kept looking and found <a href="https://github.com/fhmq/hmq">https://github.com/fhmq/hmq</a>.</p>

<p>One downside of <code>hmq</code> might be that it does not seem to support persisting
retained messages to disk. I’ll treat this as a feature for the time being,
enforcing a fresh start on every daily reboot.</p>

<p>To restrict hmq to only listen in my local network, I’m using <a href="https://github.com/gokrazy/tools/commit/fdd90fc6817876e08b352fae84f2a2794524ccc0">gokrazy’s flag
file
feature</a>:</p>

<pre><code>mkdir -p flags/github.com/fhmq/hmq
echo --host=10.0.0.217 &gt; flags/github.com/fhmq/hmq/flags.txt
</code></pre>

<p>Note that you’ll need <a href="https://github.com/fhmq/hmq/pull/105">https://github.com/fhmq/hmq/pull/105</a> in case your network
does not come up quickly.</p>

<h3 id="mqtt-broker-setup-displaying-sending-test-messages">MQTT broker setup: displaying/sending test messages</h3>

<p>To display all messages going through your MQTT broker, subscribe using the
<a href="https://mosquitto.org/">Mosquitto</a> tools:</p>

<pre><code>% sudo pacman -S mosquitto
% mosquitto_sub --id &quot;${HOST}_all&quot; --host dr.lan --topic '#' --verbose
</code></pre>

<p>The <code>#</code> sign denotes an <a href="https://subscription.packtpub.com/book/application_development/9781787287815/1/ch01lvl1sec18/understanding-wildcards">MQTT
wildcard</a>,
meaning subscribe to all topics in this case.</p>

<p>Be sure to set a unique id for each <code>mosquitto_sub</code> command you run, so that you
can see which subscribers are connected to your MQTT bus. Avoid id clashes,
otherwise the subscribers will disconnect each other!</p>

<p>Now, when you send a test message, you should see it:</p>

<pre><code>% mosquitto_pub --host dr.lan --topic 'cmnd/tasmota_68462F/Power' -m 'ON'
</code></pre>

<p>Tip: If you have binary data on your MQTT bus, you can display it in hex with
timestamps:</p>

<pre><code>% mosquitto_sub \
  --id &quot;${HOST}_bell&quot; \
  --host dr.lan \
  --topic 'doorbell/#' \
  -F '@Y-@m-@dT@H:@M:@S@z : %t : %x'
</code></pre>

<h2 id="step-2-integrate-with-mqtt">Step 2. Integrate with MQTT</h2>

<p>Now that communication via the bus works, what messages do we publish on which
topics?</p>

<p>MQTT only defines that topics are hierarchical; messages are arbitrary byte
sequences.</p>

<p>There are a few popular conventions for what to put onto MQTT:</p>

<ul>
<li><p><a href="https://homieiot.github.io/">The Homie convention</a></p></li>

<li><p>Home Assistant has its own convention, but <a href="https://www.home-assistant.io/integrations/switch.mqtt/#full-configuration">allows full configuration</a>. Home Assistant does <a href="https://community.home-assistant.io/t/home-assistant-homie-compatibility/17135/8">not support the homie convention yet</a>.</p></li>

<li><p>openHAB <a href="https://www.openhab.org/addons/bindings/mqtt.generic/">refers to Home Assistant and
Homie</a>.</p></li>
</ul>

<p>If you design everything yourself, Homie seems like a good option. If you plan to
use Home Assistant or similar, stick to the Home Assistant convention.</p>

<h3 id="best-practices-for-your-own-structure">Best practices for your own structure</h3>

<p>In case you want/need to define your own topics, keep these tips in mind:</p>

<ul>
<li>devices publish their state on a single, retained topic

<ul>
<li>the topic name could be e.g. <code>stat/tasmota_68462F/POWER</code></li>
<li>retaining the topic allows consumers to catch up after (re-)connecting to the bus</li>
</ul></li>
<li>publish commands on a single, possibly-retained topic

<ul>
<li>e.g. publish <code>ON</code> to topic <code>cmnd/tasmota_68462F/Power</code></li>
<li>publish the desired state: publish <code>ON</code> or <code>OFF</code> instead of <code>TOGGLE</code></li>
<li>if you retain the topic and publish <code>TOGGLE</code> commands, your lights will mysteriously go off/on when they unexpectedly re-establish their MQTT connection</li>
</ul></li>
</ul>

<h3 id="integration-shelly-devices-with-mqtt-built-in">Integration: Shelly devices with MQTT built-in</h3>

<p><a href="https://shelly.cloud/">Shelly</a> has a number of smart devices that come with
MQTT out of the box! This sounds like the easiest solution if you’re starting
from scratch.</p>

<p>I haven’t used these devices personally, but I hear good things about them.</p>

<h3 id="integration-zigbee2mqtt-for-zigbee-devices">Integration: Zigbee2MQTT for Zigbee devices</h3>

<p><a href="https://www.zigbee2mqtt.io/">Zigbee2MQTT</a> supports well <a href="https://www.zigbee2mqtt.io/information/supported_devices.html">over 1000 Zigbee
devices</a> and
exposes them on the MQTT bus.</p>

<p>For example, this is what you would use to connect your IKEA TRÅDFRI Smart
Lights to MQTT.</p>

<h3 id="integration-esphome-for-micro-controllers-sensors">Integration: ESPHome for micro controllers + sensors</h3>

<p>The <a href="https://esphome.io/">ESPHome</a> system is a ready-made solution to connect a
wide array of sensors and devices to your home network via MQTT.</p>

<p>If you want to use your own ESP-based micro controllers and sensors, this seems
like the easiest way to get them programmed.</p>

<h3 id="integration-mongoose-os-for-micro-controllers">Integration: Mongoose OS for micro controllers</h3>

<p>Mongoose OS is an IOT firmware development framework, taking care of device
management, Over-The-Air updates, and more.</p>

<p><a href="https://mongoose-os.com/docs/mongoose-os/cloud/mqtt.md">Mongoose comes with MQTT
support</a>, and with just
a few lines you can build, flash and configure your device. Here’s an example
for the NodeMCU (ESP8266-based):</p>

<pre><code>% yay -S mos-bin
% mos clone https://github.com/mongoose-os-apps/demo-js app1
% cd app1
% mos --platform esp8266 build
% mos --platform esp8266 --port /dev/ttyUSB1 flash
% mos --port /dev/ttyUSB1 config-set mqtt.enable=true mqtt.server=dr.lan:1883
</code></pre>

<p>Pressing the button on the NodeMCU publishes a message to MQTT:</p>

<pre><code>% mosquitto_sub --host dr.lan --topic devices/esp8266_F4B37C/events
{&quot;ram_free&quot;:31260,&quot;uptime&quot;:27.168680,&quot;btnCount&quot;:2,&quot;on&quot;:false}
</code></pre>

<h3 id="integration-arduino-for-custom-micro-controller-firmware">Integration: Arduino for custom micro controller firmware</h3>

<p>Arduino has an <a href="https://www.arduino.cc/reference/en/libraries/mqtt-client/">MQTT Client
library</a>. If your
microcontroller is networked, e.g. an ESP32 with WiFi, you can publish MQTT
messages from your Arduino sketch:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#include</span> <span style="color:#007020">&lt;WiFi.h&gt;</span><span style="color:#007020">
</span><span style="color:#007020">#include</span> <span style="color:#007020">&lt;PubSubClient.h&gt;</span><span style="color:#007020">
</span><span style="color:#007020"></span>
WiFiClient wificlient;
PubSubClient <span style="color:#06287e">client</span>(wificlient);

<span style="color:#902000">void</span> <span style="color:#06287e">callback</span>(<span style="color:#902000">char</span><span style="color:#666">*</span> topic, byte<span style="color:#666">*</span> payload, <span style="color:#902000">unsigned</span> <span style="color:#902000">int</span> length) {
    Serial.print(<span style="color:#4070a0">&#34;Message arrived [&#34;</span>);
    Serial.print(topic);
    Serial.print(<span style="color:#4070a0">&#34;] &#34;</span>);
    <span style="color:#007020;font-weight:bold">for</span> (<span style="color:#902000">int</span> i <span style="color:#666">=</span> <span style="color:#40a070">0</span>; i <span style="color:#666">&lt;</span> length; i<span style="color:#666">++</span>) {
      Serial.print((<span style="color:#902000">char</span>)payload[i]);
    }
    Serial.println();
  
    <span style="color:#007020;font-weight:bold">if</span> (strcmp(topic, <span style="color:#4070a0">&#34;doorbell/cmd/unlock&#34;</span>) <span style="color:#666">==</span> <span style="color:#40a070">0</span>) {
  		<span style="color:#60a0b0;font-style:italic">// …
</span><span style="color:#60a0b0;font-style:italic"></span>    }
}

<span style="color:#902000">void</span> <span style="color:#06287e">taskmqtt</span>(<span style="color:#902000">void</span> <span style="color:#666">*</span>pvParameters) {
	<span style="color:#007020;font-weight:bold">for</span> (;;) {
		<span style="color:#007020;font-weight:bold">if</span> (<span style="color:#666">!</span>client.connected()) {
			client.connect(<span style="color:#4070a0">&#34;doorbell&#34;</span> <span style="color:#60a0b0;font-style:italic">/* clientid */</span>);
			client.subscribe(<span style="color:#4070a0">&#34;doorbell/cmd/unlock&#34;</span>);
		}

		<span style="color:#60a0b0;font-style:italic">// Poll PubSubClient for new messages and invoke the callback.
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// Should be called as infrequent as one is willing to delay
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// reacting to MQTT messages.
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// Should not be called too frequently to avoid strain on
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// the network hardware:
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#60a0b0;font-style:italic">// https://github.com/knolleary/pubsubclient/issues/756#issuecomment-654335096
</span><span style="color:#60a0b0;font-style:italic"></span>		client.loop();
		vTaskDelay(pdMS_TO_TICKS(<span style="color:#40a070">100</span>));
	}
}

<span style="color:#902000">void</span> <span style="color:#06287e">setup</span>() {
	connectToWiFi(); <span style="color:#60a0b0;font-style:italic">// WiFi configuration omitted for brevity
</span><span style="color:#60a0b0;font-style:italic"></span>
	client.setServer(<span style="color:#4070a0">&#34;dr.lan&#34;</span>, <span style="color:#40a070">1883</span>);
	client.setCallback(callback);

	xTaskCreatePinnedToCore(taskmqtt, <span style="color:#4070a0">&#34;MQTT&#34;</span>, <span style="color:#40a070">2048</span>, <span style="color:#007020">NULL</span>, <span style="color:#40a070">1</span>, <span style="color:#007020">NULL</span>, PRO_CPU_NUM);
}

<span style="color:#902000">void</span> <span style="color:#06287e">processEvent</span>(<span style="color:#902000">void</span> <span style="color:#666">*</span>buf, <span style="color:#902000">int</span> telegramLen) {
	client.publish(<span style="color:#4070a0">&#34;doorbell/events/scs&#34;</span>, buf, telegramLen);
}</code></pre></div>
<h2 id="integration-webhook-to-mqtt">Integration: Webhook to MQTT</h2>

<p>The Nuki Opener doesn’t support MQTT out of the box, but the Nuki Bridge can
send Webhook requests. In a few lines of Go, you can forward what the Nuki
Bridge sends to MQTT:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">package</span> main

<span style="color:#007020;font-weight:bold">import</span> (
	<span style="color:#4070a0">&#34;fmt&#34;</span>
	<span style="color:#4070a0">&#34;io/ioutil&#34;</span>
	<span style="color:#4070a0">&#34;log&#34;</span>
	<span style="color:#4070a0">&#34;net/http&#34;</span>

	mqtt <span style="color:#4070a0">&#34;github.com/eclipse/paho.mqtt.golang&#34;</span>
)

<span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">nukiBridge</span>() <span style="color:#902000">error</span> {
	opts <span style="color:#666">:=</span> mqtt.<span style="color:#06287e">NewClientOptions</span>().<span style="color:#06287e">AddBroker</span>(<span style="color:#4070a0">&#34;tcp://dr.lan:1883&#34;</span>)
	opts.<span style="color:#06287e">SetClientID</span>(<span style="color:#4070a0">&#34;nuki2mqtt&#34;</span>)
	opts.<span style="color:#06287e">SetConnectRetry</span>(<span style="color:#007020;font-weight:bold">true</span>)
	mqttClient <span style="color:#666">:=</span> mqtt.<span style="color:#06287e">NewClient</span>(opts)
	<span style="color:#007020;font-weight:bold">if</span> token <span style="color:#666">:=</span> mqttClient.<span style="color:#06287e">Connect</span>(); token.<span style="color:#06287e">Wait</span>() <span style="color:#666">&amp;&amp;</span> token.<span style="color:#06287e">Error</span>() <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;MQTT connection failed: %v&#34;</span>, token.<span style="color:#06287e">Error</span>())
	}

	mux <span style="color:#666">:=</span> http.<span style="color:#06287e">NewServeMux</span>()
	mux.<span style="color:#06287e">HandleFunc</span>(<span style="color:#4070a0">&#34;/nuki&#34;</span>, <span style="color:#007020;font-weight:bold">func</span>(w http.ResponseWriter, r <span style="color:#666">*</span>http.Request) {
		b, err <span style="color:#666">:=</span> ioutil.<span style="color:#06287e">ReadAll</span>(r.Body)
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			log.<span style="color:#06287e">Print</span>(err)
			http.<span style="color:#06287e">Error</span>(w, err.<span style="color:#06287e">Error</span>(), http.StatusInternalServerError)
			<span style="color:#007020;font-weight:bold">return</span>
		}

		mqttClient.<span style="color:#06287e">Publish</span>(
			<span style="color:#4070a0">&#34;zkj-nuki/webhook&#34;</span>, <span style="color:#60a0b0;font-style:italic">// topic
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#40a070">0</span>, <span style="color:#60a0b0;font-style:italic">// qos
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#007020;font-weight:bold">true</span>, <span style="color:#60a0b0;font-style:italic">// retained
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#007020">string</span>(b)) <span style="color:#60a0b0;font-style:italic">// payload
</span><span style="color:#60a0b0;font-style:italic"></span>	})

	<span style="color:#007020;font-weight:bold">return</span> http.<span style="color:#06287e">ListenAndServe</span>(<span style="color:#4070a0">&#34;:8319&#34;</span>, mux)
}

<span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">nukiBridge</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
		log.<span style="color:#06287e">Fatal</span>(err)
	}
}</code></pre></div>
<p>See <a href="https://developer.nuki.io/t/bridge-http-api/26">Nuki’s Bridge HTTP-API</a>
document for details on how to configure your bridge to send webhook callbacks.</p>

<h2 id="step-3-express-your-logic">Step 3. Express your logic</h2>

<p><a href="https://www.home-assistant.io/">Home Assistant</a> and
<a href="https://nodered.org/">Node-RED</a> are both popular options, but also large
software packages.</p>

<p>Personally, I find it more fun to express my logic directly in a full
programming language (Go).</p>

<p>I call the <a href="https://github.com/stapelberg/regelwerk">resulting program <code>regelwerk</code> (“collection of
rules”)</a>. The program consists of:</p>

<ol>
<li>various control loops that progress independently from each other</li>
<li>an MQTT message dispatcher feeding these control loops</li>
<li>a debugging web interface to visualize state</li>
</ol>

<p>This architecture is by no means a new approach: as
<a href="https://github.com/rs/moquette">moquette</a> describes it, this is to MQTT what
<code>inetd</code> is to IP. I find <code>moquette</code>’s one-process-per-message model to be too
heavyweight and clumsy to deploy to <a href="https://gokrazy.org">https://gokrazy.org</a>, so <code>regelwerk</code> is
entirely in-process and a single, easy-to-deploy binary, both to computers for
notifications, or to headless Raspberry Pis.</p>

<h3 id="regelwerk-control-loops-definition">regelwerk: control loops definition</h3>

<p><code>regelwerk</code> defines a control loop as a stateful function that accepts an event
(from MQTT) and returns messages to publish to MQTT, if any:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">type</span> controlLoop <span style="color:#007020;font-weight:bold">interface</span> {
	sync.Locker

	<span style="color:#06287e">StatusString</span>() <span style="color:#902000">string</span> <span style="color:#60a0b0;font-style:italic">// for human introspection
</span><span style="color:#60a0b0;font-style:italic"></span>
	<span style="color:#06287e">ProcessEvent</span>(MQTTEvent) []MQTTPublish
}

<span style="color:#60a0b0;font-style:italic">// Like mqtt.Message, but with timestamp
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">type</span> MQTTEvent <span style="color:#007020;font-weight:bold">struct</span> {
	Timestamp time.Time
	Topic     <span style="color:#902000">string</span>
	Payload   <span style="color:#007020;font-weight:bold">interface</span>{}
}

<span style="color:#60a0b0;font-style:italic">// Parameters for mqtt.Client.Publish()
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">type</span> MQTTPublish <span style="color:#007020;font-weight:bold">struct</span> {
	Topic    <span style="color:#902000">string</span>
	Qos      <span style="color:#902000">byte</span>
	Retained <span style="color:#902000">bool</span>
	Payload  <span style="color:#007020;font-weight:bold">interface</span>{}
}</code></pre></div>
<h3 id="regelwerk-mqtt-dispatcher">regelwerk: MQTT dispatcher</h3>

<p>Our MQTT message handler dispatches each incoming message to all control loops,
in one goroutine per message and loop. With typical message volumes on a
personal MQTT bus, this is a simple yet effective design that brings just enough
isolation.</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">type</span> mqttMessageHandler <span style="color:#007020;font-weight:bold">struct</span> {
	dryRun <span style="color:#902000">bool</span>
	loops  []controlLoop
}

<span style="color:#007020;font-weight:bold">func</span> (h <span style="color:#666">*</span>mqttMessageHandler) <span style="color:#06287e">handle</span>(client mqtt.Client, m mqtt.Message) {
	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;received message %q on %q&#34;</span>, m.<span style="color:#06287e">Payload</span>(), m.<span style="color:#06287e">Topic</span>())
	ev <span style="color:#666">:=</span> MQTTEvent{
		Timestamp: time.<span style="color:#06287e">Now</span>(), <span style="color:#60a0b0;font-style:italic">// consistent for all loops
</span><span style="color:#60a0b0;font-style:italic"></span>		Topic:     m.<span style="color:#06287e">Topic</span>(),
		Payload:   m.<span style="color:#06287e">Payload</span>(),
	}

	<span style="color:#007020;font-weight:bold">for</span> _, l <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> h.loops {
		l <span style="color:#666">:=</span> l <span style="color:#60a0b0;font-style:italic">// copy
</span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#007020;font-weight:bold">go</span> <span style="color:#007020;font-weight:bold">func</span>() {
			<span style="color:#60a0b0;font-style:italic">// For reliability, we call each loop in its own goroutine
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#60a0b0;font-style:italic">// (yes, one per message), so that when one loop gets stuck,
</span><span style="color:#60a0b0;font-style:italic"></span>			<span style="color:#60a0b0;font-style:italic">// the others still make progress.
</span><span style="color:#60a0b0;font-style:italic"></span>			l.<span style="color:#06287e">Lock</span>()
			results <span style="color:#666">:=</span> l.<span style="color:#06287e">ProcessEvent</span>(ev)
			l.<span style="color:#06287e">Unlock</span>()
			<span style="color:#007020;font-weight:bold">if</span> <span style="color:#007020">len</span>(results) <span style="color:#666">==</span> <span style="color:#40a070">0</span> {
				<span style="color:#007020;font-weight:bold">return</span>
			}
			<span style="color:#007020;font-weight:bold">for</span> _, r <span style="color:#666">:=</span> <span style="color:#007020;font-weight:bold">range</span> results {
				log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;publishing: %+v&#34;</span>, r)
				<span style="color:#007020;font-weight:bold">if</span> !h.dryRun {
					client.<span style="color:#06287e">Publish</span>(r.Topic, r.Qos, r.Retained, r.Payload)
				}
			}
			<span style="color:#60a0b0;font-style:italic">// …input/output logging omitted for brevity…
</span><span style="color:#60a0b0;font-style:italic"></span>		}()
	}
}</code></pre></div>
<h3 id="regelwerk-control-loop-example">regelwerk: control loop example</h3>

<p>Now that we have the definition and dispatching out of the way, let’s take a
look at an actual example control loop.</p>

<p>This control loops looks at whether my PC is unlocked (in use) or whether my
phone is home, and then turns off/on my stereo speakers accordingly.</p>

<p>The inputs come from
<a href="https://github.com/stapelberg/zkj-nas-tools/blob/master/runstatus/runstatus.go">runstatus</a>
and
<a href="https://github.com/rtr7/router7/blob/c30bf38438b3ba00ae13dff914f0ef4f05684250/cmd/dhcp4d/dhcp4d.go#L405-L433">dhcp4d</a>,
the output goes to a Sonoff S26 Smart Power Plug running
<a href="https://tasmota.github.io/docs/">Tasmota</a>.</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">type</span> avrPowerLoop <span style="color:#007020;font-weight:bold">struct</span> {
	statusLoop <span style="color:#60a0b0;font-style:italic">// for l.statusf() debugging
</span><span style="color:#60a0b0;font-style:italic"></span>
	midnaUnlocked          <span style="color:#902000">bool</span>
	michaelPhoneExpiration time.Time
}

<span style="color:#007020;font-weight:bold">func</span> (l <span style="color:#666">*</span>avrPowerLoop) <span style="color:#06287e">ProcessEvent</span>(ev MQTTEvent) []MQTTPublish {
	<span style="color:#60a0b0;font-style:italic">// Update loop state based on inputs:
</span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">switch</span> ev.Topic {
	<span style="color:#007020;font-weight:bold">case</span> <span style="color:#4070a0">&#34;runstatus/midna/i3lock&#34;</span>:
		<span style="color:#007020;font-weight:bold">var</span> status <span style="color:#007020;font-weight:bold">struct</span> {
			Running <span style="color:#902000">bool</span> <span style="color:#4070a0">`json:&#34;running&#34;`</span>
		}
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> json.<span style="color:#06287e">Unmarshal</span>(ev.Payload.([]<span style="color:#902000">byte</span>), <span style="color:#666">&amp;</span>status); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			l.<span style="color:#06287e">statusf</span>(<span style="color:#4070a0">&#34;unmarshaling runstatus: %v&#34;</span>, err)
			<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span>
		}
		l.midnaUnlocked = !status.Running

	<span style="color:#007020;font-weight:bold">case</span> <span style="color:#4070a0">&#34;router7/dhcp4d/lease/Michaels-iPhone&#34;</span>:
		<span style="color:#007020;font-weight:bold">var</span> lease <span style="color:#007020;font-weight:bold">struct</span> {
			Expiration time.Time <span style="color:#4070a0">`json:&#34;expiration&#34;`</span>
		}
		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> json.<span style="color:#06287e">Unmarshal</span>(ev.Payload.([]<span style="color:#902000">byte</span>), <span style="color:#666">&amp;</span>lease); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
			l.<span style="color:#06287e">statusf</span>(<span style="color:#4070a0">&#34;unmarshaling router7 lease: %v&#34;</span>, err)
			<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span>
		}
		l.michaelPhoneExpiration = lease.Expiration

	<span style="color:#007020;font-weight:bold">default</span>:
		<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#60a0b0;font-style:italic">// event did not influence our state
</span><span style="color:#60a0b0;font-style:italic"></span>	}

	<span style="color:#60a0b0;font-style:italic">// Publish desired state changes:
</span><span style="color:#60a0b0;font-style:italic"></span>	now <span style="color:#666">:=</span> ev.Timestamp
	phoneHome <span style="color:#666">:=</span> l.michaelPhoneExpiration.<span style="color:#06287e">After</span>(now)
	anyoneHome <span style="color:#666">:=</span> l.midnaUnlocked <span style="color:#666">||</span> (now.<span style="color:#06287e">Hour</span>() &gt; <span style="color:#40a070">8</span> <span style="color:#666">&amp;&amp;</span> phoneHome)
	l.<span style="color:#06287e">statusf</span>(<span style="color:#4070a0">&#34;midnaUnlocked=%v || (now.Hour=%v &gt; 8 &amp;&amp; phoneHome=%v)&#34;</span>,
		l.midnaUnlocked, now.<span style="color:#06287e">Hour</span>(), phoneHome)

	payload <span style="color:#666">:=</span> <span style="color:#4070a0">&#34;OFF&#34;</span>
	<span style="color:#007020;font-weight:bold">if</span> anyoneHome {
		payload = <span style="color:#4070a0">&#34;ON&#34;</span>
	}
	<span style="color:#007020;font-weight:bold">return</span> []MQTTPublish{
		{
			Topic:    <span style="color:#4070a0">&#34;cmnd/tasmota_68462F/Power&#34;</span>,
			Payload:  payload,
			Retained: <span style="color:#007020;font-weight:bold">true</span>,
		},
	}
}</code></pre></div>
<h2 id="conclusion">Conclusion</h2>

<p>I like the Pub/Sub pattern for home automation, as it nicely uncouples all
components.</p>

<p>It’s a shame that standards such as <a href="https://homieiot.github.io/">The Homie
convention</a> aren’t more widely supported, but it
looks like software makes up for that via configuration options.</p>

<p>There are plenty of existing integrations that should cover most needs.</p>

<p>Ideally, more Smart Home and IOT vendors would add MQTT support out of the box,
like <a href="https://shelly.cloud/">Shelly</a>.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Fixing the Nuki Opener smart intercom IOT device (on the BTicino SCS bus intercom system)]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/"/>
    <id>https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/</id>
    <published>2020-11-30T08:12:00+01:00</published>
    <content type="html"><![CDATA[

<p>I recently bought a <a href="https://nuki.io/en/opener/">Nuki Opener, which “turns your existing intercom into a
smart door opener”</a>.</p>

<p>Unfortunately, I have had a lot of trouble getting it to work.</p>

<p>I finally got the device working by interjecting my own micro controller between
the intercom bus and the Nuki Opener, then driving the Nuki Opener in its
Analogue mode:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured_hu46bb619362d02271ee9d454f3a246020_1421516_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured_hu46bb619362d02271ee9d454f3a246020_1421516_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-28-nuki-opener-filtered-featured_hu46bb619362d02271ee9d454f3a246020_1421516_600x0_resize_q75_box.jpg"
  
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>The rest of this article outlines how this setup works at a high level.</p>

<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><p><strong>Warning:</strong> The SCS bus’s voltage is dangerously high!</p>

<p>I accidentally broke a Teensy and an intercom unit while working with the SCS
bus, which is specified at 27 Vdc, but my measurements show 28 volts. Please be
extra careful!</p>
</div>
  </div>
</aside>


<h2 id="prerequisites">Prerequisites</h2>

<p>For reliable interpretation and transmission of SCS bus data, we’ll need:</p>

<ol>
<li><p>SCS receive/transmit circuits. These can be prototyped on a breadboard if you
have the required diodes, transistors, resistors and capacitors.</p></li>

<li><p>A microcontroller with an Analog Comparator. If your microcontroller has one,
you’ll find a corresponding section in the datasheet. This function is
sometimes abbreviated to <code>CMP</code> or <code>AC</code>, or might be part of a larger
Analog/Digital Converter (<code>ADC</code>).</p></li>

<li><p>A UART (serial) decoder. Most microcontrollers have at least one UART, but if
you don’t have one available for whichever reason, you could use a software
UART implementation, too.</p></li>
</ol>

<h3 id="scs-receive-circuit">SCS receive circuit</h3>





<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-rx.svg"><img
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-rx.svg"
  alt="SCS receive circuit" title="SCS receive circuit"
  style="border: 1px solid #000; margin-right: 1rem"
  
  align="left"
  
  loading="lazy"></a>



<p>An R-C network, directly connected to the SCS bus, is used for incoming signal
conditioning.</p>

<p>The resistor values have been chosen to divide the voltage of the input signal
from 28V down to approx. 2V, i.e. well within the 0-3.3V range for modern
microcontroller GPIO pins.</p>

<p>A zener diode limits the 28V level to 3.3V, which should be safe for most
microcontrollers.</p>

<p>Simulation: <a href="https://tinyurl.com/yxhrkejn">https://tinyurl.com/yxhrkejn</a></p>

<p><br clear="all"></p>

<h3 id="scs-transmit-circuit">SCS transmit circuit</h3>





<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-tx.svg"><img
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-tx.svg"
  alt="SCS transmit circuit" title="SCS transmit circuit"
  style="border: 1px solid #000; margin-right: 1rem"
  
  align="left"
  
  loading="lazy"></a>



<p>We directly connect the gate of a mosfet transistor to a GPIO pin of our
microcontroller, so that when the microcontroller drives the pin high, we use
the 100Ω resistor to attach a load to the SCS bus.</p>

<p>For comparison, the KNX bus, which is similar to the SCS bus, uses a 68Ω
resistor here.</p>

<p>Simulation: <a href="https://tinyurl.com/y6nv4yg7">https://tinyurl.com/y6nv4yg7</a></p>

<p><br clear="all"></p>

<h3 id="scs-lab-setup">SCS lab setup</h3>

<p>Use a lab power supply to generate 28V DC. I’m using the <a href="https://www.galaxus.ch/de/s1/product/velleman-labornetzgeraet-labornetzgeraet-5779537">Velleman LABPS3005SM</a> because it was in stock at Galaxus, but any power supply rated for at least 30V DC will do.</p>

<p>As <a href="https://www.open-homeautomation.com/2016/05/11/a-minimal-knx-setup/">the DIY home automation blog entry “A minimal KNX setup”</a> describes, you’ll need to place a 47Ω resistor between the power line and your components.</p>

<p>Afterwards, just connect your components to the bus. The supply/ground line of a <a href="https://en.wikipedia.org/wiki/Breadboard">breadboard</a> will work nicely.</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup_huf43c3b3dca98c428537fa46c6d1931d3_1264545_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup_huf43c3b3dca98c428537fa46c6d1931d3_1264545_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-scs-lab-setup_huf43c3b3dca98c428537fa46c6d1931d3_1264545_600x0_resize_q75_box.jpg"
  alt="SCS lab setup" title="SCS lab setup"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h3 id="micro-controller-choice">Micro Controller choice</h3>

<p>In this blog post, I’m using a <a href="https://www.pjrc.com/store/teensy40.html">Teensy
4</a> development board that is widely
available for ≈20 USD:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4_hu855bbe0a9c47ac557e5b09db74fa3b06_1510905_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4_hu855bbe0a9c47ac557e5b09db74fa3b06_1510905_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-29-teensy4_hu855bbe0a9c47ac557e5b09db74fa3b06_1510905_600x0_resize_q75_box.jpg"
  alt="Teensy 4" title="Teensy 4"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>With its 600 MHz, the Teensy 4 has enough sheer clock frequency to allow for
sloppier coding while still achieving high quality input/output.</p>

<p>The teensy tiny form factor (3.5 x 1.7 cm) works well for this project and will
allow me to store the microcontroller in an existing intercom case.</p>

<p>The <strong>biggest downside is that NXP’s own MCUXpresso IDE cannot target the
Teensy 4</strong>!</p>

<p>The only officially supported development environment for the Teensy 4 is
Teensyduino, which is a board support package for the Arduino IDE. Having
Arduino support is great, but let’s compare:</p>

<p>I also have NXP’s <a href="https://www.nxp.com/design/development-boards/i-mx-evaluation-and-development-boards/mimxrt1060-evk-i-mx-rt1060-evaluation-kit:MIMXRT1060-EVK?&amp;&amp;tid=vanMIMXRT1060-EVK">MIMXRT1060-EVK eval
kit</a>,
which uses the same i.MX RT1060 micro controller family as the Teensy 4, but is
much larger and comes with all the bells and whistles; notably:</p>

<ol>
<li>The MCUXpresso IDE works with the eval kit’s built-in debugger out of the box!
Being able to inspect a stack trace, set breakpoints and look at register
contents are invaluable tools when doing micro controller development.</li>
<li>The MCUXpresso IDE comes with convenient graphical Pin and Clock config
tools. Setting a pin’s alternate function becomes a few clicks instead of
hours of fumbling around.</li>
<li>The NXP SDK contains a number of drivers and examples that are tested on the
eval kit. That makes it really easy to get started!</li>
</ol>

<p>Each of these points is very attractive on their own, but together they make the
whole experience so different!</p>

<p>Being able to deploy to the Teensy from MCUXpresso would be a killer feature! So
many NXP SDK examples would suddenly become available, filling the Teensy
community’s gaps.</p>

<h2 id="signal-setup">Signal Setup</h2>

<p>On a high level, this is how we are going to connect the various signals:</p>

<p>Step 1. We start with the SCS intercom bus signal (28V high, 22V low):</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus_hucbd1cf38e2c23c2f6ccc4d43d53e5fa3_262726_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus_hucbd1cf38e2c23c2f6ccc4d43d53e5fa3_262726_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-10-06-scs-bus_hucbd1cf38e2c23c2f6ccc4d43d53e5fa3_262726_600x0_resize_q75_box.jpg"
  
  width="600"
  height="160"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Step 2. Our SCS receive circuit takes the bus signal and divides it down to 2V:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx_huda44e0426bfee0fc7f10a0aefe6154d7_193510_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx_huda44e0426bfee0fc7f10a0aefe6154d7_193510_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-scs-rx_huda44e0426bfee0fc7f10a0aefe6154d7_193510_600x0_resize_q75_box.jpg"
  alt="voltage-divided SCS signal" title="voltage-divided SCS signal"
  width="600"
  height="447"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Step 3. We convert the voltage-divided analog signal into a digital <code>SCSRXOUT</code> signal:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_600x0_resize_q75_box.jpg"
  alt="Analog Comparator output signal" title="Analog Comparator output signal"
  width="600"
  height="104"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Step 4. We modify our <code>SCSRXOUT</code> signal so that it can be sampled at 50%:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs_huf442b516588f4a97de6b824c24ce97c9_400929_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs_huf442b516588f4a97de6b824c24ce97c9_400929_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-modified-scs_huf442b516588f4a97de6b824c24ce97c9_400929_600x0_resize_q75_box.jpg"
  alt="modified SCS signal" title="modified SCS signal"
  width="600"
  height="422"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Step 5. We decode the signal using our micro controller’s UART:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex_hu39435dced393ae623f524c34c9d5a9f1_269597_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex_hu39435dced393ae623f524c34c9d5a9f1_269597_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-26-teensy-uart-scs-hex_hu39435dced393ae623f524c34c9d5a9f1_269597_600x0_resize_q75_box.jpg"
  alt="Teensy 4 UART decodes SCS" title="Teensy 4 UART decodes SCS"
  width="600"
  height="424"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="micro-controller-firmware">Micro Controller firmware</h2>

<p>Once I complete the next revision of the SCS interface PCB, I plan to release
all design files, schematics, sources, etc. in full.</p>

<p>Until then, the following sections describe how the most important parts work,
but skip over the implementation-specific glue code that wires everything
together.</p>

<h3 id="analog-comparator">Analog Comparator</h3>

<p>The Analog Comparator in our microcontroller lets us know whether a voltage is
above or below a configured threshold voltage by raising an interrupt. A good
threshold is 1.65V in my case.</p>

<p>In response to the voltage change, we set GPIO pin 15 to a digital high (3.3V) or
low (0V) level:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020;font-weight:bold">volatile</span> uint32_t cmpflags;

<span style="color:#60a0b0;font-style:italic">// ISR (Interrupt Service Routine), called by the Analog Comparator:
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#902000">void</span> <span style="color:#06287e">acmp1_isr</span>() {
  cmpflags <span style="color:#666">=</span> CMP1_SCR;

  { <span style="color:#60a0b0;font-style:italic">// clear interrupt status flags:
</span><span style="color:#60a0b0;font-style:italic"></span>    uint8_t scr <span style="color:#666">=</span> (CMP1_SCR <span style="color:#666">&amp;</span> <span style="color:#666">~</span>(CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK));
    CMP1_SCR <span style="color:#666">=</span> scr <span style="color:#666">|</span> CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK;
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFR_MASK) {
    <span style="color:#60a0b0;font-style:italic">// See below! This line will be modified:
</span><span style="color:#60a0b0;font-style:italic"></span>    digitalWrite(<span style="color:#40a070">15</span>, HIGH);
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFF_MASK) {
    digitalWrite(<span style="color:#40a070">15</span>, LOW);
  }
}</code></pre></div>
<p>This signal can easily be verified by attaching an oscilloscope probe each to
the <code>SCSRX</code> voltage-regulated bus signal input and to the <code>SCSRXOUT</code> GPIO pin
output:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-11-30-scs-processing-microcontroller/2020-11-25-acmp-out_hud21e06aec62e4c2328f97cadeb89169a_202741_600x0_resize_q75_box.jpg"
  alt="Analog Comparator output signal" title="Analog Comparator output signal"
  width="600"
  height="104"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h3 id="analog-comparator-modification">Analog Comparator Modification</h3>

<p>There is one crucial difference between SCS and UART:</p>

<p>To transmit a 0 (or start bit):</p>

<ul>
<li>SCS is low 34μs, then high 70μs</li>
<li>UART is low the entire 104μs</li>
</ul>

<p>UART implementations typically sample at 50%, the middle of the bit period.</p>

<p>For SCS, we would need to sample at 20%, because the signal returns to high so
quickly.</p>

<p>While setting a custom sample point is <em>possible</em> in
e.g. <a href="https://sigrok.org/">sigrok</a>’s UART decoder, neither software nor hardware
serial implementations on micro controllers typically support it.</p>

<p>On a micro controller it is much easier to just modify the signal so that it can
be sampled at 50%.</p>

<p>In practical terms, this means modifying the <code>acmp1_isr</code> function to return to
high later than the Analog Comparator indicates:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020;font-weight:bold">volatile</span> uint32_t cmpflags;

<span style="color:#60a0b0;font-style:italic">// ISR (Interrupt Service Routine), called by the Analog Comparator:
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#902000">void</span> <span style="color:#06287e">acmp1_isr</span>() {
  cmpflags <span style="color:#666">=</span> CMP1_SCR;

  { <span style="color:#60a0b0;font-style:italic">// clear interrupt status flags:
</span><span style="color:#60a0b0;font-style:italic"></span>    uint8_t scr <span style="color:#666">=</span> (CMP1_SCR <span style="color:#666">&amp;</span> <span style="color:#666">~</span>(CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK));
    CMP1_SCR <span style="color:#666">=</span> scr <span style="color:#666">|</span> CMP_SCR_CFR_MASK <span style="color:#666">|</span> CMP_SCR_CFF_MASK;
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFR_MASK) {
    <span style="color:#60a0b0;font-style:italic">// Instead of setting our output pin high immediately,
</span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#60a0b0;font-style:italic">// we delay going up by approx. 40us,
</span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#60a0b0;font-style:italic">// turning the SCS signal into a UART signal:
</span><span style="color:#60a0b0;font-style:italic"></span>    delayMicroseconds(<span style="color:#40a070">40</span>);
    digitalWrite(<span style="color:#40a070">15</span>, HIGH);
  }

  <span style="color:#007020;font-weight:bold">if</span> (cmpflags <span style="color:#666">&amp;</span> CMP_SCR_CFF_MASK) {
    digitalWrite(<span style="color:#40a070">15</span>, LOW);
  }
}</code></pre></div>
<p>You can now read this signal using your laptop and a USB-to-serial adapter!</p>

<p>On a micro controller, we now feed this signal back into a UART decoder. For
prototyping, this can literally mean a jumper wire connecting the output GPIO
pin with a serial RX pin. Some micro controllers also support internal wiring of
peripherals, allowing you to get rid of that cable.</p>

<h3 id="scs-rx-receive">SCS RX (receive)</h3>

<p>With the SCS intercom bus signal bytes now available through the UART decoder,
we can design a streaming SCS decoder. The decoder self-synchronizes and skips
invalid SCS telegrams by checking their checksum. We start with a ring buffer
and a convenience working copy:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">constexpr <span style="color:#902000">int</span> telegramLen <span style="color:#666">=</span> <span style="color:#40a070">7</span>;

<span style="color:#007020;font-weight:bold">typedef</span> <span style="color:#007020;font-weight:bold">struct</span> {
  <span style="color:#60a0b0;font-style:italic">// circular buffer for incoming bytes, indexed using cur
</span><span style="color:#60a0b0;font-style:italic"></span>  uint8_t buf[telegramLen];
  <span style="color:#902000">int</span> cur;

  uint8_t tbuf[telegramLen];
} scsfilter;</code></pre></div>
<p>Each byte we receive from the UART, we store in our ring buffer:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">void</span> <span style="color:#06287e">sf_WriteByte</span>(scsfilter <span style="color:#666">*</span>sf, uint8_t b) {
  sf<span style="color:#666">-&gt;</span>buf[sf<span style="color:#666">-&gt;</span>cur] <span style="color:#666">=</span> b;
  sf<span style="color:#666">-&gt;</span>cur <span style="color:#666">=</span> (sf<span style="color:#666">-&gt;</span>cur <span style="color:#666">+</span> <span style="color:#40a070">1</span>) <span style="color:#666">%</span> telegramLen;
}</code></pre></div>
<p>After every byte, we can check if the ring buffer decodes to a valid ring signal
SCS bus telegram:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#902000">bool</span> <span style="color:#06287e">sf_completeAndValid</span>(scsfilter <span style="color:#666">*</span>sf) {
  <span style="color:#007020;font-weight:bold">const</span> uint8_t prev <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>buf[(sf<span style="color:#666">-&gt;</span>cur<span style="color:#666">+</span>(telegramLen<span style="color:#666">-</span><span style="color:#40a070">1</span>))<span style="color:#666">%</span>telegramLen];
  <span style="color:#007020;font-weight:bold">if</span> (prev <span style="color:#666">!=</span> <span style="color:#40a070">0xa3</span>) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">false</span>; <span style="color:#60a0b0;font-style:italic">// incomplete: previous byte not a telegram termination
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#60a0b0;font-style:italic">// Copy the whole telegram into tbuf; makes working with it easier:
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">for</span> (<span style="color:#902000">int</span> i <span style="color:#666">=</span> <span style="color:#40a070">0</span>; i <span style="color:#666">&lt;</span> telegramLen; i<span style="color:#666">++</span>) {
    sf<span style="color:#666">-&gt;</span>tbuf[i] <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>buf[(sf<span style="color:#666">-&gt;</span>cur<span style="color:#666">+</span>i)<span style="color:#666">%</span>telegramLen];
  }

  <span style="color:#007020;font-weight:bold">const</span> uint8_t stored <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">5</span>];
  <span style="color:#007020;font-weight:bold">const</span> uint8_t computed <span style="color:#666">=</span> sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">1</span>] <span style="color:#666">^</span>
    sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">2</span>] <span style="color:#666">^</span>
	sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">3</span>] <span style="color:#666">^</span>
	sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">4</span>];
  <span style="color:#007020;font-weight:bold">if</span> (stored <span style="color:#666">!=</span> computed) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">false</span>; <span style="color:#60a0b0;font-style:italic">// corrupt? checksum mismatch
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">true</span>;
}

<span style="color:#902000">int</span> <span style="color:#06287e">sf_ringForApartment</span>(scsfilter <span style="color:#666">*</span>sf) {
  <span style="color:#007020;font-weight:bold">if</span> (<span style="color:#666">!</span>sf_completeAndValid(sf)) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#666">-</span><span style="color:#40a070">1</span>;
  }

  <span style="color:#007020;font-weight:bold">if</span> (sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">3</span>] <span style="color:#666">!=</span> <span style="color:#40a070">0x60</span>) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#666">-</span><span style="color:#40a070">1</span>; <span style="color:#60a0b0;font-style:italic">// not a ring command
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#007020;font-weight:bold">if</span> (sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">1</span>] <span style="color:#666">!=</span> <span style="color:#40a070">0x91</span>) {
    <span style="color:#007020;font-weight:bold">return</span> <span style="color:#666">-</span><span style="color:#40a070">1</span>; <span style="color:#60a0b0;font-style:italic">// not sent by the intercom house station
</span><span style="color:#60a0b0;font-style:italic"></span>  }

  <span style="color:#007020;font-weight:bold">return</span> (<span style="color:#902000">int</span>)(sf<span style="color:#666">-&gt;</span>tbuf[<span style="color:#40a070">2</span>]); <span style="color:#60a0b0;font-style:italic">// apartment id
</span><span style="color:#60a0b0;font-style:italic"></span>}</code></pre></div>
<h3 id="scs-tx-send">SCS TX (send)</h3>

<p>Conceptually, writing serial data to a GPIO output from software is done with
<a href="https://www.arduino.cc/en/Reference/SoftwareSerial">e.g. the Arduino SoftwareSerial
library</a>, but there are
plenty of implementations for different micro controllers. This technique is
also sometimes called <a href="https://en.wikipedia.org/wiki/Bit_banging">“Bit banging”</a>.</p>

<p>I started with the <a href="https://github.com/PaulStoffregen/SoftwareSerial/blob/63f9b1aae6564d301d7ba31261d1f2390e2a7359/SoftwareSerial.cpp#L218">the Teensy <code>SoftwareSerial::write</code>
implementation</a>
and modified it to:</p>

<ol>
<li><p>Invert the output to drive the <a href="#scs-transmit-circuit">SCS transmit circuit’s Mosfet
transistor</a> gate, i.e. low on idle and high on
transmitting a 0 bit.</p></li>

<li><p>Return to idle 70μs earlier than the signal would, i.e. after ≈34μs already.</p></li>
</ol>

<p>The modified <code>write</code> function looks like this:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#007020">#define V27 LOW
</span><span style="color:#007020">#define V22 HIGH
</span><span style="color:#007020"></span>
<span style="color:#007020">#define scs0() do { \
</span><span style="color:#007020">  while (ARM_DWT_CYCCNT - begin_cycle &lt; (target-43750</span><span style="color:#60a0b0;font-style:italic">/*70us*/</span><span style="color:#007020">)) ; \
</span><span style="color:#007020">  digitalWriteFast(11, V27); \
</span><span style="color:#007020">} while (0)
</span><span style="color:#007020"></span>
size_t SCSSerial<span style="color:#666">::</span>write(uint8_t b)
{
  elapsedMicros elapsed;
  uint32_t target;
  uint8_t mask;
  uint32_t begin_cycle;

  ARM_DEMCR <span style="color:#666">|=</span> ARM_DEMCR_TRCENA;
  ARM_DWT_CTRL <span style="color:#666">|=</span> ARM_DWT_CTRL_CYCCNTENA;
  ARM_DWT_CYCCNT <span style="color:#666">=</span> <span style="color:#40a070">0</span>;

  <span style="color:#60a0b0;font-style:italic">// start bit
</span><span style="color:#60a0b0;font-style:italic"></span>  target <span style="color:#666">=</span> cycles_per_bit;
  noInterrupts();
  begin_cycle <span style="color:#666">=</span> ARM_DWT_CYCCNT;
  digitalWriteFast(<span style="color:#40a070">11</span>, V22);
  scs0();
  wait_for_target(begin_cycle, target);

  <span style="color:#60a0b0;font-style:italic">// 8 data bits
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">for</span> (mask <span style="color:#666">=</span> <span style="color:#40a070">1</span>; mask; mask <span style="color:#666">&lt;&lt;=</span> <span style="color:#40a070">1</span>) {
    <span style="color:#007020;font-weight:bold">if</span> (b<span style="color:#666">&amp;</span>mask) {
      digitalWriteFast(<span style="color:#40a070">11</span>, V27);
    } <span style="color:#007020;font-weight:bold">else</span> {
      digitalWriteFast(<span style="color:#40a070">11</span>, V22);
    }
    target <span style="color:#666">+=</span> cycles_per_bit;
    scs0();
    wait_for_target(begin_cycle, target);
  }

  <span style="color:#60a0b0;font-style:italic">// stop bit
</span><span style="color:#60a0b0;font-style:italic"></span>  digitalWriteFast(<span style="color:#40a070">11</span>, V27);
  interrupts();
  target <span style="color:#666">+=</span> cycles_per_bit;
  scs0();
  <span style="color:#007020;font-weight:bold">while</span> (ARM_DWT_CYCCNT <span style="color:#666">-</span> begin_cycle <span style="color:#666">&lt;</span> target) ; <span style="color:#60a0b0;font-style:italic">// wait
</span><span style="color:#60a0b0;font-style:italic"></span>  <span style="color:#007020;font-weight:bold">return</span> <span style="color:#40a070">1</span>;
}</code></pre></div>
<h2 id="it-works">It works!</h2>

<p>With the approach described above, I now have a micro controller that recognizes
doorbell rings for my apartment and ignores doorbell rings for my neighbors. The
micro controller can unlock the door, too, and both features are available
through the Nuki Opener.</p>

<h2 id="how-is-the-nuki-opener">How is the Nuki Opener?</h2>

<p>It took over 2 months before I saw the Nuki Opener working correctly for the
first time.</p>

<p>I really hope the Nuki developers can work with what I described above and
improve their product’s reliability for all customers with an SCS intercom
system!</p>

<p>The device itself seems useful and usable, but time will tell how reliable it
turns out in practice. I think I noticed push notifications when the door rang
coming in rather late (many seconds later).</p>

<p>I’ll keep an eye on this and explore the various Nuki APIs more.</p>

<h2 id="appendix-project-journal">Appendix: Project Journal</h2>

<ul>
<li>2020-09-26: I buy a Nuki Opener (Nuki Opener #1), but despite connecting it correctly, it never successfully opens the door. I start learning about <a href="https://en.wikipedia.org/wiki/Bus_SCS">the SCS home automation bus system that our intercom uses</a>.</li>
<li>2020-09-28: I publish an <a href="/posts/2020-09-28-nuki-scs-bticino-decoding/">SCS bus decoder for sigrok</a> and contact the Nuki Support.</li>
<li>2020-10-15: I buy another Nuki Opener (Nuki Opener #2) to test their old firmware version, because downgrading firmware versions is impossible. Opener #2 actually opens the door, so I assume we are dealing with a firmware problem [turns out incorrect later].</li>
<li>2020-10-16: I publish a detailed <a href="/posts/2020-10-16-nuki-bug-writeup/">analysis of the Nuki Opener not sending the correct signal</a> for the Nuki developers to go through.</li>
<li>2020-11-03: I update my new Nuki Opener #2 to the latest firmware and realize that my old Nuki Opener #1 most likely just has some sort of hardware defect. However, Opener #2 has trouble detecting the ring signal: either it doesn’t detect any rings at all, or it detects all rings, including those for my neighbors!</li>
<li>2020-11-16: In their 13th (!) email reply, Nuki Support confirms that the Opener firmware is capturing and matching the incoming ring signal, if I understand their developers correctly.</li>
<li>2020-11-18: I suggest to Nuki developers (via Nuki Support) to decode the SCS signal with a UART decoder instead of comparing waveforms. This should be a lot more reliable!</li>
<li>2020-11-23: My self-designed SCS receiver/transmitter/power supply PCB arrives. The schematics are based on existing SCS DIY work, but I created my own KiCad files because I was only interested in the SCS bus interface, not the PIC microcontroller they used.</li>
<li>2020-11-25: Working on the intercom, I assume some wire touched an unlucky spot, and my BTicino intercom went up in smoke. We enabled the Nuki Opener’s ring sound and started using it as our main door bell. This meant we now started hearing the ring sound for (some) of our neighbors as well.</li>
<li>2020-11-26: My Teensy 4 microcontroller <a href="https://twitter.com/zekjur/status/1332021864206626817">successfully decodes the SCS bus signal with its Analog Comparator and UART decoder</a>.</li>
<li>2020-11-28: My Teensy 4 microcontroller <a href="https://twitter.com/zekjur/status/1332740378907250693">is deployed to filter the SCS bus ring signal and drive the Nuki Opener in analogue mode</a>.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Nuki Opener with an SCS bus intercom (bTicino 344212)]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/"/>
    <id>https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/</id>
    <published>2020-09-28T08:43:00+02:00</published>
    <content type="html"><![CDATA[

<p>I have long been looking for a way to make my intercom a little more pleasant.</p>

<p>Recently, a friend made me aware of the <a href="https://nuki.io/opener">Nuki Opener</a>,
which promises to make existing intercom systems smart, and claims to be
compatible with the specific intercom I have!</p>

<p>So I got one and tried setting it up, but could not get it to work.</p>

<p>This post documents how I have analyzed what goes over the intercom’s <a href="https://en.wikipedia.org/wiki/Bus_SCS">SCS
bus</a>. Perhaps the technique is
interesting, or perhaps you want to learn more about SCS :)</p>

<p>Note that I have <strong>not yet used</strong> the Nuki Opener, so I can’t say anything about
it yet. What I have seen so far makes a good impression, but it just does not
seem to work at all with my intercom. I will update this article after working
with the Nuki support to fix this.</p>

<h2 id="connecting-the-nuki-opener-to-the-bticino-344212">Connecting the Nuki Opener to the bTicino 344212</h2>

<p>First, I identified which wires are used for the bus: between BUS- and BUS+, the
internet tells me that I would expect to measure ≈27V, and indeed a multimeter
shows:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-multimeter.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-multimeter_hue87d963a37b5686cd2ac4655a3d8c0c5_1225652_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-multimeter_hue87d963a37b5686cd2ac4655a3d8c0c5_1225652_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-multimeter_hue87d963a37b5686cd2ac4655a3d8c0c5_1225652_600x0_resize_q75_box.jpg"
  alt="BTicino multimeter" title="BTicino multimeter"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>I then connected the Nuki Opener as described in <a href="https://developer.nuki.io/uploads/short-url/3naDfQDFbzh3Je7ytrNzRDscvFz.pdf">“Connect the Nuki Opener to an
unknown
intercom”</a>,
Page 8, Bus intercoms → Basic setup without doorbell suppression:</p>

<table>
<thead>
<tr>
<th>Nuki wire</th>
<th>Intercom</th>
<th>Signal</th>
</tr>
</thead>

<tbody>
<tr>
<td>black</td>
<td>BUS-</td>
<td>GND</td>
</tr>

<tr>
<td>red</td>
<td>BUS+</td>
<td>SCS (+27V)</td>
</tr>

<tr>
<td>orange</td>
<td>BUS+</td>
<td>SCS (+27V)</td>
</tr>
</tbody>
</table>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-wiring.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-wiring_huc0f372d5b57e289c2da0f2c150ab65f2_1202733_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-wiring_huc0f372d5b57e289c2da0f2c150ab65f2_1202733_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-wiring_huc0f372d5b57e289c2da0f2c150ab65f2_1202733_600x0_resize_q75_box.jpg"
  alt="BTicino wiring" title="BTicino wiring"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>I had previously tried the enhanced setup with doorbell suppression, as the Nuki
app recommends, but switched to the <strong>simplest setup possible</strong> when capturing
the signal.</p>

<h2 id="configuring-the-nuki-opener">Configuring the Nuki Opener</h2>

<p>With the Nuki app, I configured the Opener either as:</p>

<ul>
<li>bTicino → 344212</li>
<li>Generic → Bus (SCS)</li>
<li>Unknown intercom</li>
</ul>

<p>Unfortunately, with all configurations:</p>

<ol>
<li>The app says it learned the door open signal successfully.</li>
<li>The device/app does react to door rings.</li>
<li>The device <strong>never successfully opens the door</strong>.</li>
</ol>

<h2 id="capturing-the-scs-bus-with-sigrok">Capturing the SCS bus with sigrok</h2>

<p>The logic analyzer that I have at home only works with signals under 5V. As the
SCS bus is running at 27V, I’m capturing the signal with my <a href="https://www.aliexpress.com/popular/hantek-6022be.html">Hantek 6022BE USB
oscilloscope</a>.</p>

<p><a href="https://sigrok.org/">sigrok</a> is a portable, cross-platform, free open source
signal analysis software suite and <a href="https://sigrok.org/wiki/Hantek_6022BE">supports the Hantek
6022BE</a> out of the box, provided you have
at least version 0.1.4 of the the sigrok fx2lafw package installed.</p>

<p>Check out <a href="https://sigrok.org/wiki/Getting_started_with_a_logic_analyzer">sigrok’s “Getting started with a logic
analyzer”</a> if
you’re new to sigrok!</p>

<p>The Nuki Opener has 3 different pin headers you can use, depending on where you
want to attach it on your wall. These are connected straight through, so I used
them to conveniently grab BUS+ and BUS- just like the Nuki sees it:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-capture-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-capture-featured_hu1b08a9ba183caef576fbb945ebca4cbc_886388_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-capture-featured_hu1b08a9ba183caef576fbb945ebca4cbc_886388_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-bticino-capture-featured_hu1b08a9ba183caef576fbb945ebca4cbc_886388_600x0_resize_q75_box.jpg"
  alt="BTicino capture" title="BTicino capture"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>I set the oscilloscope probe head to its 10X divider setting, so that I had the
full value range available, then started sampling 5M samples at 500 kHz:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview_hua1d67c57915d756677a0987d752eee6c_204691_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview_hua1d67c57915d756677a0987d752eee6c_204691_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview_hua1d67c57915d756677a0987d752eee6c_204691_600x0_resize_q75_box.jpg"
  alt="sigrok PulseView screenshot" title="sigrok PulseView screenshot"
  width="600"
  height="262"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>You can see 10s worth of signal. The three bursts are transmissions on the SCS
bus.</p>

<p>The labeling didn’t quite match for me: it shows e.g. 3.2V instead of 27V, but
as long as the signal comes in clearly, it doesn’t matter if it is offset or
scaled.</p>

<h2 id="scs-bus-decoding-with-sigrok-voltage-levels">SCS bus decoding with sigrok: voltage levels</h2>

<p>Let’s tell sigrok what voltage level corresponds to a low or high signal:</p>

<ol>
<li>left-click on channel <code>CH1</code></li>
<li>set “conversion” to “to logic via threshold”</li>
<li>set “conversion threshold” to 3.0V</li>
</ol>

<p>Now you’ll see not only the captured signal, but also the logical signal below
in green:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview-logic.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview-logic_huc90cbbc8b90f54cdc1f48da49df0db02_296922_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview-logic_huc90cbbc8b90f54cdc1f48da49df0db02_296922_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-scs-pulseview-logic_huc90cbbc8b90f54cdc1f48da49df0db02_296922_600x0_resize_q75_box.jpg"
  alt="sigrok PulseView screenshot" title="sigrok PulseView screenshot"
  width="600"
  height="229"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<h2 id="scs-bus-decoding-with-sigrok-scs-decoder">SCS bus decoding with sigrok: SCS decoder</h2>

<p>Now that we have obtained a logical/digital signal (low/high), we can write a
sigrok decoder for the SCS bus. See <a href="https://sigrok.org/wiki/Protocol_decoder_HOWTO">sigrok’s Protocol decoder
HOWTO</a> for an introduction.</p>

<p>In general, I strongly recommend investing into tooling, in particular when
decoding protocols. Spending a few minutes to an hour at this stage will
minimize mistakes and save lots of time later, and—when you contribute your
tooling—enable others to do more interesting work!</p>

<p>I found it easy to write a sigrok decoder, having never used their API
before. It was quick to get something onto the screen, mistakes were easy to
correct, and the whole process was nicely iterative.</p>

<p>Until it is merged and released with a new version of <code>libsigrokdecode</code>, you can
find <a href="https://github.com/stapelberg/libsigrokdecode/commit/7f12be634628d52222eb879f5b076c256ab8ba08">my SCS decoder on
GitHub</a>.</p>

<p>The decoder looks at every layer of an SCS telegram: the start/stop bits, the
data bits, the value and the value’s logical position/function in the SCS
telegram.</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-28-pulseview-scs-full.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-28-pulseview-scs-full_hu14666f27c137a3c87abffb185038b668_793701_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-28-pulseview-scs-full_hu14666f27c137a3c87abffb185038b668_793701_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-28-pulseview-scs-full_hu14666f27c137a3c87abffb185038b668_793701_600x0_resize_q75_box.jpg"
  alt="SCS full" title="SCS full"
  width="600"
  height="174"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Our SCS decoder displays the 3 bursts on the SCS bus when we ring the doorbell:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst1.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst1_huf996ae785a6e4e1dce68e5dd385a5a25_1267947_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst1_huf996ae785a6e4e1dce68e5dd385a5a25_1267947_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst1_huf996ae785a6e4e1dce68e5dd385a5a25_1267947_600x0_resize_q75_box.jpg"
  alt="SCS bus door ring" title="SCS bus door ring"
  width="600"
  height="91"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst2.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst2_hu577d14ac03f2baddfb00c7edcf0f3573_1269483_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst2_hu577d14ac03f2baddfb00c7edcf0f3573_1269483_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst2_hu577d14ac03f2baddfb00c7edcf0f3573_1269483_600x0_resize_q75_box.jpg"
  alt="SCS bus door ring" title="SCS bus door ring"
  width="600"
  height="91"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst3.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst3_hua419f52baa7795a675e007bfe81705d1_1218910_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst3_hua419f52baa7795a675e007bfe81705d1_1218910_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-klingel-burst3_hua419f52baa7795a675e007bfe81705d1_1218910_600x0_resize_q75_box.jpg"
  alt="SCS bus door ring" title="SCS bus door ring"
  width="600"
  height="91"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Only the middle burst sets a destination address of <code>0x3</code>, the configured number
of my intercom system. I am not sure what the first and last burst indicate!</p>

<p>The SCS bus activity when opening the door seems more clear:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst1.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst1_hufe88b0e9b1509ac72c3ecea90f8c2424_1195938_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst1_hufe88b0e9b1509ac72c3ecea90f8c2424_1195938_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst1_hufe88b0e9b1509ac72c3ecea90f8c2424_1195938_600x0_resize_q75_box.jpg"
  alt="SCS bus door open" title="SCS bus door open"
  width="600"
  height="81"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



















<a href="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst2.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst2_hua7c03685b3c05826c12f366402b5649a_1173245_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst2_hua7c03685b3c05826c12f366402b5649a_1173245_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-09-28-nuki-scs-bticino-decoding/2020-09-27-anlern-open-burst2_hua7c03685b3c05826c12f366402b5649a_1173245_600x0_resize_q75_box.jpg"
  alt="SCS bus door open" title="SCS bus door open"
  width="600"
  height="81"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>These 2 bursts are sent one second apart, and only differ in the request
parameter field: my guess is that <code>0xa4</code> means “start buzzing the door open” and
<code>0xa0</code> means “stop buzzing the door open”.</p>

<p>I’m not sure why all these bursts repeat their SCS telegrams 3 times. My
understanding was that SCS telegrams are repeated only when they are not
acknowledged, and I indeed see no acknowledgement telegrams in my captures. Does
that mean something is wrong with our intercom and it only works due to
retransmissions?</p>

<h2 id="scs-bus-decoding-with-sigrok-git-uart-scs-decoder">SCS bus decoding with sigrok git: UART+SCS decoder</h2>

<p>As <a href="https://sourceforge.net/p/sigrok/mailman/message/37118252/">Gerhard Sittig pointed
out</a>, in the git
version of libsigrokdecode, one can use the existing UART decoder to decode SCS:</p>

<ol>
<li>Set <code>Baud rate</code> to <code>9600</code></li>
<li>Set <code>Sample point</code> to <code>20%</code></li>
</ol>

<p>This seems a little more robust than my cobbled-together SCS decoder from above :)</p>

<p>In addition to the UART decoder, we can still use a custom SCS decoder to label
individual bytes within an SCS telegram according to their function, and do CRC
checks.</p>

<h2 id="captured-scs-telegrams">Captured SCS telegrams</h2>

<p>You can find my most recent captures in <a
href="../../2020-09-27-rohdaten-klingel-rev2.zip">2020-09-27-rohdaten-klingel-rev2.zip</a>:</p>

<ul>
<li><code>2020-09-27-anlern-01-open-PUR-filtered.srzip</code> is the door buzzer</li>
<li><code>2020-09-27-anlern-02-klingel-PUR-filtered.srzip</code> is the bell ringing</li>
</ul>

<p>To extract the interesting parts from the sigrok files, I:</p>

<ol>
<li>Click the <code>Show Cursors</code> icon in PulseView’s toolbar.</li>
<li>Position the left and right cursor edges such that the signal of interest is selected.</li>
<li>Click the drop-down next to the <code>Save</code> icon and select <code>Save Selected Range As</code>.</li>
</ol>

<h2 id="further-reading">Further reading</h2>

<p>I used the following sources; please let me know of any others!</p>

<ul>
<li><a href="https://it.wikipedia.org/wiki/Bus_SCS">https://it.wikipedia.org/wiki/Bus_SCS</a></li>
<li><a href="http://guidopic.altervista.org/alter/eibscsgt.html">http://guidopic.altervista.org/alter/eibscsgt.html</a></li>
<li><a href="https://www.mikrocontroller.net/topic/493823">https://www.mikrocontroller.net/topic/493823</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Adding a fiber link to my home network]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/"/>
    <id>https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/</id>
    <published>2020-08-09T14:53:53+02:00</published>
    <content type="html"><![CDATA[

<h2 id="motivation">Motivation</h2>

<p>Despite using a FTTH internet connection since 2014, aside from the one fiber
uplink, I had always used network gear with 1 Gbit/s links over regular old rj45
cat5(e) cables.</p>

<hr />

<p>I liked the simplicity and uniformity of that setup, but decided it’s time to
add at least one fiber connection, to <strong>get rid of a temporary ethernet cable</strong>
that connected my kitchen with the rest of my network that is largely in the
living room and office.</p>

<p>The temporary ethernet cable was an experiment to verify that running a server
or two in my kitchen actually works (it does!). I used a <a href="https://www.digitec.ch/de/s1/product/hama-cat-6-flach-we-1000cm-netzwerkkabel-7465292">flat ethernet
cable</a>,
which is great for test setups like that, as you can often tape it onto the
walls and still close the doors.</p>

<p>So, we will replace one ethernet cable with one fiber cable and converters at
each end:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-media-converters.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-media-converters_hu863a0a53ff58eb79e087ca8992fd5d37_416326_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-media-converters_hu863a0a53ff58eb79e087ca8992fd5d37_416326_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-media-converters_hu863a0a53ff58eb79e087ca8992fd5d37_416326_600x0_resize_q75_box.jpg"
  alt="0.9mm thin fiber cables" title="0.9mm thin fiber cables"
  width="600"
  height="217"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Why is it good to switch from copper ethernet cables to fiber in this case?
Fiber cables are <strong>smaller and hence easier to fit</strong> into existing cable
ducts. While regular ethernet cable is way too thick to fit into any of the
existing ducts in my flat, I was hoping that fiber might fit!</p>

<p>When I actually received the cables, I was surprised <strong>how much thinner</strong> fiber
cables actually can be: there are 0.9mm cables, which are so thin, they can be
hidden in plain sight! I had only ever seen 2mm fiber cables before, and the
0.9mm cables are incredibly light, flexible and thin! Even pasta is typically
thicker:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-glasnudeln.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-glasnudeln_huff6805db50351ab1fa4ea96b741ae340_1675440_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-glasnudeln_huff6805db50351ab1fa4ea96b741ae340_1675440_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-glasnudeln_huff6805db50351ab1fa4ea96b741ae340_1675440_600x0_resize_q75_box.jpg"
  alt="Preparing a delicious pot of glass noodles ;)" title="Preparing a delicious pot of glass noodles ;)"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p><small><em>Preparing a delicious pot of glass noodles ;)</em></small></p>

<hr />

<p>The cable shown above comes from <a href="https://www.FS.COM/company/about_us.html">the fiber store
FS.COM</a>, which different people have
praised on multiple occasions, so naturally I was curious to give them a shot
myself.</p>

<p>Also, for the longest time, it was my understanding that fiber connectors can
only be put onto fiber cables using expensive (≫2000 CHF) machines. A while ago
I heard about <strong>field assembly connectors</strong> so I wanted to verify that those
indeed work.</p>

<hr />

<p>Aside from practical reasons, playing around with fiber networking also makes
for a good hobby during a pandemic :)</p>

<h2 id="hardware-selection">Hardware Selection</h2>

<p>I ordered all my fiber equipment at <a href="https://www.FS.COM">FS.COM</a>: everything
they have is very affordable, and products in stock at their German warehouse
arrive in Switzerland (and presumably other European countries) within the same
week.</p>

<p>If you are in the luxurious position to have enough physical space and agility
to pull through an entire fiber cable, <strong>without having to remove any
connectors</strong>, you can make a new network connection with just a few parts:</p>

<table>
<thead>
<tr>
<th>amt</th>
<th>price</th>
<th>total</th>
<th>article</th>
<th>note</th>
</tr>
</thead>

<tbody>
<tr>
<td>2x</td>
<td>36 CHF</td>
<td>72 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/17237.html">#17237</a></td>
<td><a href="https://www.FS.COM/de-en/products/17237.html">1 Gbit/s media converter RJ45/SFP</a></td>
</tr>

<tr>
<td>1x</td>
<td>8.5 CHF</td>
<td>8.5 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/75339.html">#39135</a></td>
<td><a href="https://www.FS.COM/de-en/products/75339.html">1 Gbit/s BiDi SFP 1310nm-TX/1550nm-RX</a></td>
</tr>

<tr>
<td>1x</td>
<td>11 CHF</td>
<td>11 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/75340.html">#39138</a></td>
<td><a href="https://www.FS.COM/de-en/products/75340.html">1 Gbit/s BiDi SFP 1550nm-TX/1310nm-RX</a></td>
</tr>

<tr>
<td>1x</td>
<td>2.3 CHF</td>
<td>2.3 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/12285.html">#12285</a></td>
<td><a href="https://www.FS.COM/de-en/products/12285.html">fiber cable, 0.9mm LC UPC/LC UPC simplex</a></td>
</tr>
</tbody>
</table>

<p>I recommend buying an extra fiber cable or two so that you can accidentally
damage a cable and still have enough spares.</p>

<p>Total cost thus far: just under 100 CHF. If you have existing switches with a
free SFP slot, you can use those instead of the media converters and save most
of the cost.</p>

<hr />

<p>If you need to <strong>temporarily remove</strong> one or both of the fiber cable connector(s),
you also need field assembly connectors and a few tools in addition:</p>

<table>
<thead>
<tr>
<th>amt</th>
<th>price</th>
<th>total</th>
<th>article</th>
<th>note</th>
</tr>
</thead>

<tbody>
<tr>
<td>2x</td>
<td>4 CHF</td>
<td>8 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/35165.html">#35165</a></td>
<td><a href="https://www.FS.COM/de-en/products/35165.html">LC/UPC 0.9mm pre-polished field assembly connector</a></td>
</tr>

<tr>
<td>1x</td>
<td>110 CHF</td>
<td>110 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/14341.html">#14341</a></td>
<td><a href="https://www.FS.COM/de-en/products/14341.html">High Precision Fibre Optic Cleaver FS-08C</a></td>
</tr>

<tr>
<td>1x</td>
<td>26 CHF</td>
<td>26 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/14346.html">#14346</a></td>
<td><a href="https://www.FS.COM/de-en/products/14346.html">Fibre Optic Kevlar Cutter</a></td>
</tr>

<tr>
<td>1x</td>
<td>14 CHF</td>
<td>14 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/72812.html">#72812</a></td>
<td><a href="https://www.FS.COM/de-en/products/72812.html">Fibre Optical Stripper</a></td>
</tr>
</tbody>
</table>

<p>I recommend buying twice the number of field assembly connectors, for practicing.</p>

<p>Personally, I screwed up two connectors before figuring out <a href="#field-assembly-connectors">how the process
goes</a>.</p>

<p>Total cost: about 160 CHF for the field assembly equipment, so 260 CHF in total.</p>

<hr />

<p>To boost your confidence in the resulting fiber, the following items are nice to
have, but you can get by without, if you’re on a budget.</p>

<table>
<thead>
<tr>
<th>price</th>
<th>article</th>
<th>note</th>
</tr>
</thead>

<tbody>
<tr>
<td>18 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/35388.html">#35388</a></td>
<td><a href="https://www.FS.COM/de-en/products/35388.html">FVFL-204 Visual Fault Locator</a></td>
</tr>

<tr>
<td>9.40 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/82730.html">#82730</a></td>
<td><a href="https://www.FS.COM/de-en/products/82730.html">2.5mm to 1.25mm adapter for Visual Fault Locator</a></td>
</tr>

<tr>
<td>4.10 CHF</td>
<td><a href="https://www.FS.COM/de-en/products/14010.html">#14010</a></td>
<td><a href="https://www.FS.COM/de-en/products/14010.html">1.25mm fiber clean swabs (100pcs)</a></td>
</tr>
</tbody>
</table>

<p>With the visual fault locator, you can shine a light through your fiber. You can
verify correct connector assembly by looking at how the light comes out of the
connector.</p>

<p>The fiber cleaning swabs are good to have in general, but for the field assembly
connector, you need to use alcohol-soaked wipes anyway (which FS.COM does not
stock).</p>

<p>The total cost for everything is just under 300 CHF.</p>

<h3 id="hardware-selection-process">Hardware Selection Process</h3>

<p>The large selection at FS.COM can be overwhelming to navigate at first. My
selection process went something like this:</p>

<p>My first constraint is using bi-directional (BiDi) fiber optics modules so that
I only need to lay a single fiber cable, as opposed to two fiber cables.</p>

<p>The second constraint is to use field assembly connectors.</p>

<p>If possible, I wanted to use <a href="https://community.FS.COM/blog/why-not-use-bend-insensitive-fiber-optic-cable-to-reduce-bend-radius.html">bend-insensitive
fiber</a>
so that I wouldn’t need to pay so much attention to the bend radius and have
more flexibility in where and how I can lay fiber.</p>

<p>With these constraints, there aren’t too many products left to combine. An
obvious and good choice are 0.9mm fiber cable using LC/UPC connectors.</p>

<h3 id="fs-com-details">FS.COM details</h3>

<p>As of 2020-08-05, FS.COM states they have 5 warehouses in 4 locations:</p>

<ul>
<li>Delaware (US)</li>
<li>Munich (Germany)</li>
<li>Melbourne (Australia)</li>
<li>Shenzhen (China)</li>
</ul>

<p>They recently built another, bigger (7 km²) warehouse in Shenzhen, and now
produce inventory for the whole year.</p>

<p>By 2019, FS.COM had over 300,000 registered corporate customers, reaching nearly
200 million USD yearly sales.</p>

<h2 id="delivery-times">Delivery times</h2>

<p>As mentioned before, delivery times are quick when the products are in stock at
FS.COM’s German warehouse.</p>

<p>In my case, I put in my order on 2020-Jun-26.</p>

<p>The items that shipped from the German warehouse arrived on 2020-Jul-01.</p>

<p>Some items had to be manufactured and/or shipped from Asia. Those items arrived
after 3 more weeks, on 2020-Jul-24.</p>

<p>Unfortunately, FS.COM doesn’t stock any 0.9mm fiber cables in their German
warehouse right now, so be prepared for a few weeks of waiting time.</p>

<h2 id="laying-the-fiber">Laying The Fiber</h2>

<p>Use a cable puller to pull the fiber through existing cable ducts where
possible.</p>

<ul>
<li><p>In general, buy the thinnest one you can find. I have <a href="https://www.distrelec.ch/en/cable-pull-strap-10m-tools-495005/p/18092626">this 4mm diameter cable
puller</a>,
but a 3mm or even 2mm one would work in more situations.</p></li>

<li><p>I found it worthwhile to buy a brand one. It is distinctly better to handle
(less stiff, i.e. more flexible) than the cheap one I got, and thinner, too,
which is always good.</p></li>
</ul>

<p>In my experience, it generally did not work well to <strong>push</strong> the fiber into an
existing duct or alongside an existing cable. I really needed a cable
<strong>puller</strong>.</p>

<p>If you’re lucky and have enough space in your duct(s), you can leave the
existing connectors on the fiber. I have successfully just used a piece of tape
to fix the fiber connector on the cable puller, pushing down the nose
temporarily:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-cable-puller.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-cable-puller_hu671a386c131e99c47b0e8674d4173388_933240_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-cable-puller_hu671a386c131e99c47b0e8674d4173388_933240_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-cable-puller_hu671a386c131e99c47b0e8674d4173388_933240_600x0_resize_q75_box.jpg"
  alt="fiber cable taped to cable puller" title="fiber cable taped to cable puller"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Where there are no existing ducts, you may need to lay the fiber on top of the
wall. Obviously, this is tricky as soon as you need to make a connection going
through a wall: whereas copper ethernet cables can be bent and squeezed into
door frames, you quickly risk breaking fiber cables.</p>

<p>Luckily, the fiber is very light, so it’s very easy to fix to the wall with a
piece of tape:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-wand-kabel.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-wand-kabel_hu266a050a008f40ca1627a87ee11d809f_563690_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-wand-kabel_hu266a050a008f40ca1627a87ee11d809f_563690_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-wand-kabel_hu266a050a008f40ca1627a87ee11d809f_563690_600x0_resize_q75_box.jpg"
  alt="fiber cables on the wall" title="fiber cables on the wall"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>You can see the upstream internet fiber in the top right corner, which is rather
thick in comparison to my 0.9mm yellow fiber that’s barely visible in the middle
of the picture.</p>

<p>Note how the fiber entirely disappears behind the existing duct atop the
door!</p>

<p>Above, you can see the flat ethernet cable I have been using as a temporary
experiment.</p>

<hr />

<p>Where there is an existing cable that you can temporarily remove, it might be
possible to remove it, put the fiber in, and put the old cable back in,
too. This is possible because the 0.9mm fiber cable is so thin!</p>

<p>I’m using this technique to cross another wall where the existing cable duct is
too full, but there is a cable that can be removed and put back after pulling
the fiber through:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-loch.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-loch_hu72eb317f66154a6cd4cb4580e2e045bd_823912_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-loch_hu72eb317f66154a6cd4cb4580e2e045bd_823912_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-loch_hu72eb317f66154a6cd4cb4580e2e045bd_823912_600x0_resize_q75_box.jpg"
  alt="fiber cable next to existing cable" title="fiber cable next to existing cable"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>…and on the other side of the wall:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-dose.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-dose_hubb166f4dcb345f6dba1f730b24be242a_880410_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-dose_hubb166f4dcb345f6dba1f730b24be242a_880410_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-04-dose_hubb166f4dcb345f6dba1f730b24be242a_880410_600x0_resize_q75_box.jpg"
  alt="fiber cable next to existing socket" title="fiber cable next to existing socket"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>Note how the fiber is thin enough to fit between the socket and duct!</p>

<hr />

<p><strong>Note:</strong> despite measuring how long a fiber cable I would need, my cable turned
out too short! While the cable was just as long as I had measured, with
distances exceeding 10m, it is a good idea to <strong>add a few meters spare</strong> on each
side of the connection.</p>

<h2 id="field-assembly-connectors">Field assembly connectors</h2>

<p>To give you an overview, these are the required steps at a high level:</p>

<ol>
<li>Cut the fiber with the <a href="https://www.FS.COM/de-en/products/14346.html">Fibre Optic Kevlar Cutter</a></li>
<li>Strip the fiber with the <a href="https://www.FS.COM/de-en/products/72812.html">Fibre Optical Stripper</a></li>
<li>Put the field assembly <em>jacket</em> onto the fiber</li>
<li>Cut the stripped fiber cleanly with the <a href="https://www.FS.COM/de-en/products/14341.html">High Precision Fibre Optic Cleaver FS-08C</a></li>
<li>Put the field assembly <em>connector</em> onto the fiber</li>
</ol>

<hr />

<p>I thought the following resources were useful:</p>

<ol>
<li>Pictograms: <a href="https://img-en.fs.com/file/user_manual/lc-field-assembly-connector-quick-start-guide-v1.0.pdf">PDF: FS.COM LC UPC field assembley connectors quick start
guide</a></li>
<li>Pictures: <a href="https://www.fs.com/de-en/products/35165.html">Installation Procedure on
FS.COM</a></li>
<li>Video: <a href="https://www.youtube.com/watch?v=epTzemeJjAw">YouTube: Terminate Fiber in 5
Minutes</a>: this video shows a
different product, but I found it helpful to see any field assembly connector
on video, and this is one of the better videos I could find.</li>
</ol>

<!-- TODO: include a link to my own video once published -->

<hr />

<p><strong>Beware:</strong> the little paper booklet that comes with the field assembly
connector contains measurements which are <strong>not to scale</strong>. I have suggested to
FS.COM that they fix this, but until then, you’ll need to use e.g. a tape
measure.</p>

<hr />

<p>For establishing an intuition of their different sizes, here are the different connectors:</p>
















<a href="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-07-fiber-cable-connector-size-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-07-fiber-cable-connector-size-featured_hu6d8d68e7ce7a86b2365302ce19348267_984529_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-07-fiber-cable-connector-size-featured_hu6d8d68e7ce7a86b2365302ce19348267_984529_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-08-09-fiber-link-home-network/2020-08-07-fiber-cable-connector-size-featured_hu6d8d68e7ce7a86b2365302ce19348267_984529_600x0_resize_q75_box.jpg"
  alt="fiber cable connectors" title="fiber cable connectors"
  width="600"
  height="398"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>From left to right:</p>

<ul>
<li>2.0mm fiber cable</li>
<li>cat6 ethernet cable</li>
<li>0.9mm fiber cable (LC/UPC factory)</li>
<li>0.9mm fiber cable (LC/UPC field assembly connector)</li>
</ul>

<p>The 0.9mm fiber cables come with smaller connectors than the 2.0mm fiber cables,
and that alone might be a reason to prefer them in some situations.</p>

<p>The field assembly connectors are pretty bulky in comparison, but since you can
attach them yourself after pulling only the cable through the walls and/or
ducts, you usually don’t care too much about their size.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Modern fiber cables available at FS.COM are:</p>

<ul>
<li>thinner than I expected</li>
<li>more robust than I expected</li>
<li>cheaper than I expected</li>
<li>survive tighter bend radiuses than I expected</li>
</ul>

<p>Replacing this particular connection with a fiber connection was a smooth
process overall, and I would recommend it in other situations as well.</p>

<hr />

<p>I would claim that it is <strong>totally feasible</strong> for anyone with an hour of
patience to learn how to put a field assembly connector onto a fiber cable.</p>

<p>If labor cost is expensive in your country or you just like doing things
yourself, I can definitely recommend this approach. In case you mess the
connector up and don’t want to fix it yourself, you can always call an
electrician!</p>

<hr />

<p>Stay tuned for the next part, where I upgrade the 1G link to a 10G link!</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Introducing the kinT kinesis keyboard controller]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-07-09-kint-kinesis-keyboard-controller/"/>
    <id>https://michael.stapelberg.ch/posts/2020-07-09-kint-kinesis-keyboard-controller/</id>
    <published>2020-07-09T09:25:00+02:00</published>
    <content type="html"><![CDATA[

<p><a href="../../Bilder/2020-05-22-desk-setup-kinesis.jpg"><img
src="../../Bilder/2020-05-22-desk-setup-kinesis.jpg"
alt="Kinesis Advantage ergonomic keyboard"
width="200" align="right" style="border: 1px solid #ccc; margin-left: 1em"></a></p>

<p>Back <a href="../2013-03-21-kinesis_custom_controller/">in 2013, I published a replacement
controller</a> for the Kinesis Advantage
ergonomic keyboard. In the community, it is often referred to simply as the
“stapelberg”, and became quite popular.</p>

<p>Many people like to use the feature-rich <a href="https://docs.qmk.fm/">QMK firmware</a>,
which supports my replacement controller out of the box.</p>

<p><a href="../../Bilder/kinesis-pcb-mounted.jpg"><img
src="../../Bilder/kinesis-pcb-mounted.jpg"
alt="kinesis pcb mounted"
width="200" align="right" style="border: 1px solid #ccc; margin-left: 1em"></a></p>

<p>On eBay, you can frequently find complete stapelberg kits or even
already-modified Kinesis keyboards including the stapelberg board for sale.</p>

<p>In 2017, Kinesis released the Kinesis Advantage 2, which uses a different
connector (an FPC connector) for connecting the two thumb pad PCBs to the
controller PCB, instead of the soldered cable the older Kinesis Advantage
used. Aside from the change in connector and cable type, the newer keyboard uses
the same pinout as the old one.</p>

<p>I wanted to at least update my project to support the Kinesis Advantage 2. While
doing so, I decided to also make a bunch of improvements to make the project
more approachable and usable for beginners. Among many other improvements, the
project switched from Eagle to <a href="https://kicad-pcb.org/">KiCad</a>, which is FOSS
and means no more costly license fees!</p>

<h2 id="kint-t-for-teensy">kinT (T for Teensy!)</h2>

<p>I am hereby announcing the <a href="https://github.com/kinx-project/kint">kinT kinesis keyboard
controller</a>: a replacement keyboard
controller for your Kinesis Advantage or Advantage 2 ergonomic keyboards.</p>
















<a href="https://michael.stapelberg.ch/posts/2020-07-09-kint-kinesis-keyboard-controller/kint-pcb-3d-render-back-v2020-06-30.png"><img
  srcset="https://michael.stapelberg.ch/posts/2020-07-09-kint-kinesis-keyboard-controller/kint-pcb-3d-render-back-v2020-06-30_hu30a1e426a4c0be1e0484551f5906a1ac_928372_1200x0_resize_box_2.png 2x,https://michael.stapelberg.ch/posts/2020-07-09-kint-kinesis-keyboard-controller/kint-pcb-3d-render-back-v2020-06-30_hu30a1e426a4c0be1e0484551f5906a1ac_928372_1800x0_resize_box_2.png 3x"
  src="https://michael.stapelberg.ch/posts/2020-07-09-kint-kinesis-keyboard-controller/kint-pcb-3d-render-back-v2020-06-30_hu30a1e426a4c0be1e0484551f5906a1ac_928372_600x0_resize_box_2.png"
  alt="kinT keyboard controller" title="kinT keyboard controller"
  width="600"
  height="488"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>The Teensy footprint looks a bit odd, but it’s a combined footprint so that you
can use the same board with many different Teensy microcontrollers, giving you
full flexibility regarding cost and features. See <a href="https://github.com/kinx-project/kint#compatibility-which-teensy-to-use">“Compatibility: which Teensy
to
use?”</a>
for more details.</p>

<hr />

<p>I <a href="../2013-03-21-kinesis_custom_controller/">originally replaced the controller of my Kinesis Advantage to work around a
bug</a>, but these days I do most of it
just because I enjoy tinkering with keyboards.</p>

<p>You might consider to replace your keyboard controller for example…</p>

<ul>
<li>to build or modify your own keyboard</li>
<li>to <a href="https://michael.stapelberg.ch/posts/2013-03-21-kinesis_custom_controller/">work around bugs in the standard controller</a></li>
<li>because you prefer to run open source software such as the <a href="https://docs.qmk.fm/">QMK firmware</a>, even on your keyboard</li>
</ul>

<h2 id="building-your-own-kint-keyboard-controller">Building your own kinT keyboard controller</h2>

<ol>
<li><p>Follow <a href="https://github.com/kinx-project/kint#buying-the-board-and-components-bill-of-materials">“Buying the board and components (Bill of
materials)”</a>. When
ordering from OSH Park (board) and Digi-Key (components), you’ll get the
minimum quantity of 3 boards for 72 USD (24 USD per board), and one set of
components for 49 USD.</p>

<ul>
<li>If you have any special requirements regarding which Teensy microcontroller
to use, this is the step where you would replace the Teensy 3.6 with your
choice.</li>
</ul></li>

<li><p>Wait for the components to arrive. When ordering from big shops like Digi-Key
or Mouser, this typically takes 2 days to many places in the world.</p></li>

<li><p>Wait for the boards to arrive. This takes 6 days in the best case when
ordering from OSH Park with their Super Swift Service option. In general, the
longer you are willing to wait, the cheaper it is going to get.</p></li>

<li><p>Follow <a href="https://github.com/kinx-project/kint#soldering">the soldering
guide</a>. This will take about
an hour.</p></li>

<li><p><a href="https://github.com/kinx-project/kint#installing-the-firmware">Install the firmware</a></p></li>
</ol>

<h2 id="improvements-over-the-older-replacement-board">Improvements over the older replacement board</h2>

<p>In case you’re familiar with the older replacement board and are wondering what
changed, here is a complete list:</p>

<ul>
<li><p>The kinT supports both, the older Kinesis Advantage (KB500) <strong>and</strong> the newer
Kinesis Advantage 2 (KB600) keyboards. They differ in how the thumb pads are
connected. See the soldering instructions below.</p></li>

<li><p>The kinT is made for the newer Teensy 3.x and 4.x series, which will remain
widely available for years to come, whereas <a href="https://www.pjrc.com/store/teensypp.html">the future of the Teensy++ 2.0 is
not as certain</a>.</p></li>

<li><p>The kinT is a smaller PCB (4.25 x 3.39 inches, or 108.0 x 86.1 mm), which makes it:</p>

<ul>
<li><p>more compact: can be inserted/removed without having to unscrew a key well.</p></li>

<li><p>cheaper: 72 USD for 3 boards at oshpark, instead of 81 USD.</p></li>
</ul></li>

<li><p>The kinT silkscreen
(<a href="https://raw.githubusercontent.com/kinx-project/kint/44e6c8be96a0e1e13ada5eafdeba8c51a2d6c9e8/pcb-3d-render-front-v2020-06-23.png">front</a>,
<a href="https://raw.githubusercontent.com/kinx-project/kint/44e6c8be96a0e1e13ada5eafdeba8c51a2d6c9e8/pcb-3d-render-back-v2020-06-23.png">back</a>)
and
<a href="https://github.com/kinx-project/kint/blob/44e6c8be96a0e1e13ada5eafdeba8c51a2d6c9e8/schematic-v2020-06-23.pdf">schematic</a>
are much much clearer, making assembly a breeze.</p></li>

<li><p>The kinT is a good starting point for your own project:</p>

<ul>
<li><p>kinT was designed in the open source <a href="https://kicad-pcb.org/">KiCad</a>
program, meaning you do not need any license subscriptions.</p></li>

<li><p>The clear silkscreen and schematic make development and debugging easier.</p></li>
</ul></li>

<li><p>On the kinT, the Teensy no longer has to be soldered onto the board upside down.</p></li>

<li><p>On the kinT, the FPC connectors have been moved for less strain on the cables.</p></li>

<li><p>The kinT makes possible lower-cost builds: if you don’t need the scroll lock,
num lock and keypad LEDs, you can use a Teensy LC for merely 11 USD.</p></li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>I’m very excited to release this new keyboard controller, and I can’t wait to
see all the custom builds and modifications!</p>

<p>By the way, there is also a (4-hour!) <a href="https://youtu.be/I0kwQbnhlfk">stream
recording</a> in case you are interested in some more
history and context, and want to see me solder a kinT controller live on stream!</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Using the iPhone camera as a Linux webcam with v4l2loopback]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-06-06-iphone-camera-linux-v4l2loopback/"/>
    <id>https://michael.stapelberg.ch/posts/2020-06-06-iphone-camera-linux-v4l2loopback/</id>
    <published>2020-06-06T11:18:00+02:00</published>
    <content type="html"><![CDATA[

<!-- TODO: align=right -->
















<a href="https://michael.stapelberg.ch/posts/2020-06-06-iphone-camera-linux-v4l2loopback/2020-06-06-iphone-cam.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-06-06-iphone-camera-linux-v4l2loopback/2020-06-06-iphone-cam_hud2d472f6b7b139eb735fe6ed7f317f07_1422223_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-06-06-iphone-camera-linux-v4l2loopback/2020-06-06-iphone-cam_hud2d472f6b7b139eb735fe6ed7f317f07_1422223_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-06-06-iphone-camera-linux-v4l2loopback/2020-06-06-iphone-cam_hud2d472f6b7b139eb735fe6ed7f317f07_1422223_600x0_resize_q75_box.jpg"
  alt="iPhone camera setup" title="iPhone camera setup"
  width="600"
  height="800"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>For my <a href="https://www.twitch.tv/stapelberg">programming stream at
twitch.tv/stapelberg</a>, I wanted to add an
additional camera to show test devices, electronics projects, etc. I couldn’t
find my old webcam, and new ones are hard to come by currently, so I figured I
would try to include a phone camera somehow.</p>

<p>The setup that I ended up with is:</p>

<p>iPhone camera<br>
→ Instant Webcam<br>
→ WiFi<br>
→ gstreamer<br>
→ v4l2loopback<br>
→ OBS</p>

<p>Disclaimer: I was only interested in a video stream! I don’t think this setup
would be helpful for video conferencing, due to lacking audio/video
synchronization.</p>

<h3 id="iphone-software-instant-webcam-app">iPhone Software: Instant Webcam app</h3>

<p>I’m using the <a href="https://instant-webcam.com/">PhobosLab Instant Webcam</a> (install
from the <a href="https://apps.apple.com/us/app/instant-webcam/id683949930">Apple App
Store</a>) app on an old
iPhone 8 that I bought used.</p>

<p>There are three interesting related blog posts by app author Dominic Szablewski:</p>

<ol>
<li><a href="https://phoboslab.org/log/2013/05/mpeg1-video-decoder-in-javascript">MPEG1 Video Decoder in JavaScript</a> (2013-May)</li>
<li><a href="https://phoboslab.org/log/2013/09/html5-live-video-streaming-via-websockets">HTML5 Live Video Streaming via WebSockets</a> (2013-Sep)</li>
<li><a href="https://phoboslab.org/log/2017/02/decode-it-like-its-1999">Decode it like it’s 1999</a> (2017-Feb)</li>
</ol>

<p>As hinted at in the blog posts, the way the app works is by streaming MPEG1
video from the iPhone (presumably via ffmpeg?) to the <a href="https://jsmpeg.com/">jsmpeg JavaScript
library</a> via WebSockets.</p>

<p>After some git archeology, I figured out that <a href="https://github.com/phoboslab/jsmpeg/commit/7bf420fd0c176d626a50494bfe32135dd911483d">jsmpeg was rewritten in commit
7bf420fd just after
v0.2</a>. You
can <a href="https://github.com/phoboslab/jsmpeg/tree/186666dd9c2d1fd3430d41f15f695d4a78ed1e42">browse the old version on
GitHub</a>.</p>

<p>Notably, the Instant Webcam app seems to <strong>still use the older v0.2 version</strong>,
which <a href="https://github.com/phoboslab/jsmpeg/blob/186666dd9c2d1fd3430d41f15f695d4a78ed1e42/stream-server.js">starts WebSocket streams with a custom 8-byte
header</a>
that we need to strip.</p>

<h3 id="linux-software">Linux Software</h3>

<p>Install the <a href="https://github.com/umlaeute/v4l2loopback"><code>v4l2loopback</code></a> kernel
module, e.g.
<a href="https://www.archlinux.org/packages/community/any/v4l2loopback-dkms/"><code>community/v4l2loopback-dkms</code></a>
on Arch Linux or
<a href="https://packages.debian.org/bullseye/v4l2loopback-dkms"><code>v4l2loopback-dkms</code></a> on
Debian. I used version 0.12.5-1 at the time of writing.</p>

<p>Then, install <a href="https://gstreamer.freedesktop.org/">gstreamer</a> and required
plugins. I used version 1.16.2 for all of these:</p>

<ul>
<li><a href="https://www.archlinux.org/packages/extra/x86_64/gstreamer/"><code>gstreamer</code></a></li>
<li><a href="https://www.archlinux.org/packages/extra/x86_64/gst-plugins-bad/"><code>gst-plugins-bad</code></a> for <code>mpegvideoparse</code></li>
<li><a href="https://www.archlinux.org/packages/extra/x86_64/gst-libav/"><code>gst-libav</code></a> for <code>avdec_mpeg2video</code></li>
</ul>

<p>Lastly, install either <a href="https://github.com/vi/websocat"><code>websocat</code></a> or
<a href="https://github.com/esphen/wsta"><code>wsta</code></a> for accessing WebSockets. I
successfully tested with <code>websocat</code> 1.5.0 and <code>wsta</code> 0.5.0.</p>

<h3 id="streaming">Streaming</h3>

<p>First, load the <code>v4l2loopback</code> kernel module:</p>

<pre><code>% sudo modprobe v4l2loopback video_nr=10 card_label=v4l2-iphone
</code></pre>

<p>Then, we’re going to use gstreamer to decode the WebSocket MPEG1 stream (after
stripping the custom 8-byte header) and send it into the <code>/dev/video10</code> V4L2
device, to the <code>v4l2loopback</code> kernel module:</p>

<pre><code>% websocat --binary ws://iPhone.lan/ws | \
  dd bs=8 skip=1 | \
  gst-launch-1.0 \
    fdsrc \
    ! queue \
    ! mpegvideoparse \
    ! avdec_mpeg2video \
    ! videoconvert \
    ! videorate \
    ! 'video/x-raw, format=YUY2, framerate=30/1' \
    ! v4l2sink device=/dev/video10 sync=false
</code></pre>

<p>Here are a couple of notes about individual parts of this pipeline:</p>

<ul>
<li><p>You must set <code>websocat</code> (or the alternative
<a href="https://github.com/esphen/wsta"><code>wsta</code></a>) into binary mode, otherwise they
will garble the output stream with newline characters, resulting in a
seemingly kinda working stream that just displays garbage. Ask me how I know.</p></li>

<li><p>The <code>queue</code> element uncouples decoding from reading from the network socket,
which should help in case the network has intermittent troubles.</p></li>

<li><p>Without enforcing <code>framerate=30/1</code>, you cannot cancel and restart the
gstreamer pipeline: subsequent invocations will fail with <code>streaming stopped,
reason not-negotiated (-4)</code></p></li>

<li><p>Setting format <code>YUY2</code> allows <code>ffmpeg</code>-based decoders to play the
stream. Without this setting, e.g. <code>ffplay</code> will fail with <code>[ffmpeg/demuxer]
video4linux2,v4l2: Dequeued v4l2 buffer contains 462848 bytes, but 460800 were
expected. Flags: 0x00000001.</code></p></li>

<li><p>The <code>sync=false</code> property on <code>v4l2sink</code> plays frames as quickly as possible
without trying to do any synchronization.</p></li>
</ul>

<p>Now, consumers such as <a href="https://obsproject.com/">OBS (Open Broadcaster
Software)</a>, <code>ffplay</code> or <code>mpv</code> can capture from
<code>/dev/video10</code>:</p>

<pre><code>% ffplay /dev/video10
% mpv av://v4l2:/dev/video10 --profile=low-latency
</code></pre>

<h3 id="debugging">Debugging</h3>

<p>Hopefully the instructions above just work for you, but in case things go wrong,
maybe the following notes are helpful.</p>

<p>To debug issues, I used the <code>GST_DEBUG_DUMP_DOT_DIR</code> environment variable as
described on <a href="https://gstreamer.freedesktop.org/documentation/tutorials/basic/debugging-tools.html?gi-language=c#getting-pipeline-graphs">Debugging tools: Getting pipeline
graphs</a>. In
these graphs, you can quickly see which pipeline elements negotiate which caps.</p>

<p>I also used the <a href="https://github.com/phoboslab/pl_mpeg">PL_MPEG</a> example program
to play the <a href="https://phoboslab.org/files/bjork-all-is-full-of-love.mpg">supplied MPEG test
file</a>. PL_MPEG is
written by Dominic Szablewski as well, and you can read more about it in
Dominic’s blog post <a href="https://phoboslab.org/log/2019/06/pl-mpeg-single-file-library">MPEG1 Single file C
library</a>. I
figured the codec and parameters might be similar between the different projects
of the same author and used this to gain more confidence into the stream
parameters.</p>

<p>I also used <a href="https://www.wireshark.org/">Wireshark</a> to look at the stream
traffic to discover that <code>websocat</code> and <code>wsta</code> garble the stream output by
default unless the <code>--binary</code> flag is used.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[stapelberg uses this: my 2020 desk setup]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/"/>
    <id>https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/</id>
    <published>2020-05-23T15:22:00+02:00</published>
    <content type="html"><![CDATA[
















<a href="https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/2020-05-22-desk-setup.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/2020-05-22-desk-setup_hu10db40f5c3156b454e7677b477ea23e3_3331547_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/2020-05-22-desk-setup_hu10db40f5c3156b454e7677b477ea23e3_3331547_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/2020-05-22-desk-setup_hu10db40f5c3156b454e7677b477ea23e3_3331547_600x0_resize_q75_box.jpg"
  alt="Desk setup" title="Desk setup"
  width="600"
  height="450"
  style="border: 1px solid #000"
  
  loading="lazy"></a>




<p>I generally enjoy reading the <a href="https://usesthis.com/">uses this</a> blog, and
recently people have been talking about desk setups in my bubble (and <a href="https://www.twitch.tv/stapelberg">on my
Twitch stream</a>), so I figured I’d write a post
about my current setup!</p>

<h2 id="desk-setup">Desk setup</h2>

<p>I’m using a desk I bought at IKEA well over 10 years ago. I’m not using a
standing desk: while I have one at work, I never change its height. Just never
could get into the habit.</p>

<p>I was using an IKEA chair as well for many years.</p>

<p>Currently, I’m using a <a href="https://eu.haworth.com/home/seating/executive/zody">Haworth Comforto
89</a> chair that I bought
second-hand. Unfortunately, the arm rests are literally crumbling apart and the
lumbar back support and back rest in general are not as comfortable as I would
like.</p>

<p>Hence, I recently ordered a <a href="https://www.vitra.com/en-ch/office/product/details/id-mesh">Vitra ID
Mesh</a> chair, which I
have used for a couple of years at the office before moving office buildings. It
will take a few weeks before the chair arrives.</p>

<p><details><summary>Full Vitra ID Mesh chair configuration details</summary>
<ul>
<li>ID Mesh</li>
<li>Chair type: office swivel chair</li>
<li>Backrest: ID Mesh</li>
<li>Colours and materials</li>
<li>- Cover material: seat and backrest Silk Mesh</li>
<li>- Colour of back cover: dim grey/ like frame colour</li>
<li>- Colour of seat cover: dim grey</li>
<li>- Frame colour: soft grey</li>
<li>Armrests: 2D armrests</li>
<li>Base: five-star base, polished aluminium</li>
<li>Base on: castors hard, braked for carpet</li>
<li>Ergonomics</li>
<li>Seat and seat depth adjustment: seat with seat depth adjustment</li>
<li>Forward tilt: with forward tilt</li>
</ul>
</details></p>

<p>The most important aspect of the desk/chair setup for me are the arm rests. I
align them with the desk height so that I can <a href="https://de.wikipedia.org/wiki/Datei:Ergonomic_workstation.png">place my arms at a 90 degree
angle, eliminating
strain</a>.</p>

<h2 id="peripherals">Peripherals</h2>

<p>Note: all of my peripherals are Plug &amp; Play under Linux and generally work with
standard drivers across Windows, macOS and Linux.</p>

<h3 id="monitor-dell-8k4k-monitor-up3218k">Monitor: Dell 8K4K monitor (UP3218K)</h3>

<p>The most important peripheral of a computer is the monitor: you stare at it all
the time. Even when you’re not using your keyboard or mouse, you’re still
looking at your monitor.</p>

<p>Ever since I first used a MacBook Pro with Retina display back in 2013, I’ve
been madly in love with hi-DPI displays, and have gradually replaced all
displays in my day-to-day with hi-DPI displays.</p>

<p>My current monitor is the <a href="/posts/2017-12-11-dell-up3218k/">Dell UP3218K, an 8K4K monitor (blog post)</a>.</p>

<p>Dell introduced the UP3218K in January 2017. It is the world’s first available
8K monitor, meaning it has a resolution of 7680x4320 pixels at a refresh rate of
60 Hz. The display’s dimensions are 698.1mm by 392.7mm (80cm diagonal, or 31.5
inches), meaning the display shows 280 dpi.</p>

<p>I run it in 300% scaling mode (<code>Xft.dpi: 288</code>), resulting in incredibly crisp
text.</p>

<p>Years ago, I used multiple monitors (sometimes 3, usually 2). I stopped doing
that in 2011/2012, when I lived in Dublin for half a year and decided to get
only one external monitor for practical and cost reasons.</p>

<p>I found that using only one monitor allows me to focus more on what I’m doing,
and I don’t miss anything about a multi-monitor setup.</p>

<h3 id="keyboard-kinesis-advantage-keyboard">Keyboard: Kinesis advantage keyboard</h3>

<p><a href="../../Bilder/2020-05-22-kinesis-advantage.jpg"><img
src="../../Bilder/2020-05-22-kinesis-advantage.thumb.jpg"
srcset="../../Bilder/2020-05-22-kinesis-advantage.thumb.2x.jpg 2x,../../Bilder/2020-05-22-kinesis-advantage.thumb.3x.jpg 3x"
alt="Kinesis advantage keyboard"
loading="lazy"
width="600"
style="border: 1px solid #ccc"></a></p>

<p>The Kinesis is my preferred commercially available ergonomic keyboard. I like
its matrix layout, ergonomic key bowls, thumb pads and split hands.</p>

<p>I find typing on it much more comfortable than regular keyboards, and I value
the Kinesis enough to usually carry one with me when I travel. When I need to
use a laptop keyboard for longer periods of time, my hands and arms get tired.</p>

<p>I bought my first one in 2008 for ≈250 EUR, but have since cleaned up and
repaired two more Kinesis keyboards that were about to be trashed. Now I have
one for home, one for work, and one for traveling (or keyboard development).</p>

<p>Over the years, I have modified my Kinesis keyboards in various ways:</p>

<p>The first modification I did was to put in <a href="https://www.cherrymx.de/en/mx-original/mx-blue.html">Cherry MX blue key
switches</a> (tactile and
audible), replacing the default <a href="https://www.cherrymx.de/en/mx-original/mx-brown.html">Cherry MX
browns</a>. I like the quick
feedback of the blues better, possibly because I was used to them from my
previous keyboards. Without tons of patience and good equipment, it’s virtually
impossible to unsolder the key switches, so I reached out to Kinesis, and they
agreed to send me unpopulated PCBs into which I could solder my preferred
key switches! Thank you, Kinesis.</p>

<p>I later <a href="/posts/2013-03-21-kinesis_custom_controller/">replaced the keyboard controller to address a stuck modifier
bug</a>. The
PCB I made for this remains popular in the Kinesis modification community to
this day.</p>

<p>In 2018, I got interested in keyboard input latency and developed <a href="/posts/2018-04-17-kinx/">kinX, a new
version of my replacement keyboard controller</a>. With
this controller, the keyboard has an input latency of merely 0.225ms in the
worst case.</p>

<p>Aside from the keyboard hardware itself, I’m <a href="/posts/2009-01-01-neo_kinesis/">using the NEO Ergonomically
Optimized keyboard layout</a>. It’s optimized for
German, English, Programming and Math, in that order. Especially its upper
layers are really useful: <a href="https://neo-layout.org/">hover over “Ebene 3”</a> to
see.</p>

<p>I used to remap keys in hardware, but that doesn’t cover the upper layers, so
nowadays I prefer just enabling the NEO layout included in operating systems.</p>

<h3 id="pointing-device-logitech-mx-ergo">Pointing device: Logitech MX Ergo</h3>

<p>During my student years (2008 to 2013), I carried a ThinkPad X200 and used its
TrackPoint (“red dot”) in combination with trying to use lots of keyboard
shortcuts.</p>

<p>The concept of relative inputs for mouse movement made sense to me, so I
switched from a mouse to a trackball on the desktop, specifically the <a href="https://www.logitech.com/en-us/product/wireless-trackball-m570">Logitech
Trackball M570</a>.</p>

<p>I was using the M570 for many years, but have switched to the <a href="https://www.logitech.com/en-ch/product/mx-ergo-wireless-trackball-mouse">Logitech MX
Ergo</a> a
few months ago. It is more comfortable to me, so I replaced all 3 trackballs
(home, office, travel) with the MX Ergo.</p>

<p>In terms of precision, a trackball will not be as good as a mouse can be. To me,
it more than makes up for the fact by reducing the strain on my hands and
wrists.</p>

<p>For comparison: a few years ago, I was playing a shooter with a regular mouse
for one evening (mostly due to nostalgia), and I could feel pain from that for
weeks afterwards.</p>

<h3 id="microphone-røde-podcaster">Microphone: RØDE Podcaster</h3>

<p>To record screencasts for the <a href="https://i3wm.org/">i3 window manager</a> with decent
audio, I bought a <a href="http://www.rode.com/microphones/podcaster">RØDE Podcaster USB Broadcast
Mic</a> in 2012 and have been using it
ever since.</p>

<p>The big plus is that the setup couldn’t be easier: you connect it via USB, and
it is Plug &amp; Play on Linux. This is much easier than getting a working setup
with <a href="https://en.wikipedia.org/wiki/XLR_connector">XLR audio gear</a>.</p>

<p>The audio quality is good: much better than headsets or cheap mics, but probably
not quite as good as a more expensive studio mic. For my usage, this is fine: I
don’t record radio broadcasts regularly, so I don’t need the absolutely highest
quality, and for video conferences or the occasional podcast, the RØDE Podcaster
is superb.</p>

<h3 id="webcam-logitech-c920">Webcam: Logitech C920</h3>

<p>In the past, I have upgraded my webcam every so often because higher resolutions
at higher frame rates became available for a reasonably low price.</p>

<p>I’m currently using the <a href="https://www.logitech.com/en-ch/product/hd-pro-webcam-c920">Logitech HD Pro Webcam
C920</a>, and I’m pretty
happy with it. The picture quality is good, the device is Plug &amp; Play under
Linux and the picture quality is good out of the box. No fumbling with UVC
parameters or drivers required :-)</p>

<p>Note: to capture at 30 fps at the highest resolution, you may need to <a href="https://wiki.archlinux.org/index.php/webcam_setup#mpv">specify
the pixel format</a></p>

<h3 id="headphones-sony-wh-1000xm3">Headphones: Sony WH-1000XM3</h3>

<p>At work, I have been using the <a href="https://www.bose.ch/de_ch/support/products/bose_headphones_support/bose_around_ear_headphones_support/qc15.html">Bose QuietComfort 15 Noise Cancelling
headphones</a>
for many years, as they were considered the gold standard for noise cancelling
headphones.</p>

<p>I decided to do some research and give bluetooth headphones a try, in the hope
that the technology has matured enough.</p>

<p>I went with the <a href="https://www.sony.com/electronics/headband-headphones/wh-1000xm3">Sony
WH-1000XM3</a>
bluetooth headphones, and am overall quite happy with them. The lack of a cable
is very convenient indeed, and the <strong>audio quality and noise cancellation are
both superb</strong>. A single charge lasts me for multiple days.</p>

<p>Switching devices is a bit cumbersome: when I have the headphones connected to
my phone and want to switch to my computer, I need to explicitly disconnect on
my phone, then explicitly connect on my computer. I guess this is just how
bluetooth works.</p>

<p>One issue I ran into is that when the headphones re-connected to my computer,
they <a href="https://gitlab.freedesktop.org/pulseaudio/pulseaudio/issues/525#note_373471">would not select the high-quality audio
profile</a>
until you explicitly disconnect and re-connect again. This <a href="https://git.kernel.org/pub/scm/bluetooth/bluez.git/patch/?id=477ecca127c529611adbc53f08039cefaf86305d">was
fixed</a>
in BlueZ 5.51, so make sure you run at least that version.</p>

<h3 id="usb-memory-stick-sandisk-extreme-pro-ssd-usb-3-1">USB memory stick: Sandisk Extreme PRO SSD USB 3.1</h3>

<p>USB memory sticks are useful for all sorts of tasks, but I mostly use them to
boot Linux distributions on my laptop or computer, for development, recovery,
updates, etc.</p>

<p>A year ago, I was annoyed by my USB memory sticks being slow, and I found the
<a href="https://shop.westerndigital.com/products/usb-flash-drives/sandisk-extreme-pro-usb-3-1">Sandisk Extreme PRO SSD USB
3.1</a>
which is essentially a little SSD in USB memory stick form factor. It is spec'd
at ≈400 MB/s read and write speed, and I do reach about ≈350 MB/s in practice,
which is a welcome upgrade from the &lt; 10 MB/s my previous sticks did.</p>

<p>A quick USB memory stick lowers the hurdle for testing
<a href="https://distr1.org/">distri</a> images on real hardware.</p>

<h3 id="audio-teufel-sound-system">Audio: teufel sound system</h3>

<p>My computer is connected to a <a href="https://www.teufelaudio.com/pc/motiv-2-p167.html">Teufel Motiv
2</a> stereo sound system I
bought in 2009.</p>

<p>The audio quality is superb, and when I tried to replace them with the <a href="https://www.qacoustics.co.uk/q-acoustics-3020-bookshelf-speakers-pair.html">Q
Acoustics 3020 Speakers
(Pair)</a>
I ended up selling the Q Acoustics and going back to the Teufel. Maybe I’m just
very used to its sound at this point :-)</p>

<h3 id="physical-paper-notebook-for-sketches">Physical paper notebook for sketches</h3>

<p>I also keep a paper notebook on my desk, but don’t use it a lot. It is good to
have it for ordering my thoughts when the subject at hand is more visual rather
than textual. For example, my <a href="/posts/2019-02-05-turbopfor-analysis/">analysis of the TurboPFor integer compression
scheme</a> started out on a bunch of
notebook pages.</p>

<p>I don’t get much out of hand writing into a notebook (e.g. for task lists), so I
tend to do that in <a href="https://orgmode.org/">Emacs Org mode</a> files instead (1 per
project). I’m only a very light Org mode user.</p>

<h3 id="laptop-tbd">Laptop: TBD</h3>

<p>I’m writing a separate article about my current laptop and will reference the
post here once published.</p>

<p>I will say that I mostly use laptops for traveling (to conferences or events)
these days, and there is not much travel happening right now due to COVID-19.</p>

<p>Having a separate computer is handy for some debugging activities,
e.g. single-stepping X11 applications in a debugger, which needs to be done via
SSH.</p>

<h3 id="internet-router-and-wifi-router7-and-unifi-ap-hd">Internet router and WiFi: router7 and UniFi AP HD</h3>

<p>Mostly for fun, I decided to write <a href="https://github.com/rtr7/router7">router7, a highly reliabile, automatically
updating internet router entirely in Go</a>,
primarily targeting the <a href="https://www.init7.net/">fiber7</a> internet service.</p>

<p>While the router could go underneath my desk, I currently keep it on top of my
desk. Originally, I placed it in reach to lower the hurdle for debugging, but
after the initial development phase, I never had to physically power cycle it.</p>

<p>These days, I only keep it on top of my desk because I like the physical
reminder of what I accomplished :-)</p>

<p>For WiFi, I use a <a href="https://unifi-hd.ui.com/">UniFi AP HD</a> access point from
Ubiquiti. My apartment is small enough that this single access point covers all
corners with great WiFi. I’m configuring the access point with the mobile app so
that I don’t need to run the controller app somewhere.</p>

<p>In general, I try to connect most devices via ethernet to remove WiFi-related
issues from the picture entirely, and reduce load on the WiFi.</p>

<h3 id="switching-peripherals-between-home-and-work-computer">Switching peripherals between home and work computer</h3>

<p>Like many, I am currently working from home due to COVID-19.</p>

<p>Because I only have space for one 32&quot; monitor and peripherals on my desk, I
decided to share them between my personal computer and my work computer.</p>

<p>To make this easy, I got an active <a href="https://www.anker.com/products/variant/anker-10-port-60w-data-hub/A7515111">Anker 10-port USB3
hub</a>
and two USB 3 cables for it: one connected to my personal computer, one to my
work computer. Whenever I need to switch, I just re-plug the one cable.</p>

<h2 id="software-setup">Software setup</h2>

<h3 id="linux">Linux</h3>

<p>I have been using Linux as my primary operating system since 2005. The first
Linux distribution that I installed in 2005 was Ubuntu-based. Later, I switched
to Gentoo, then to Debian, which I used and contributed to until <a href="https://michael.stapelberg.ch/posts/2019-03-10-debian-winding-down/">quitting the
project in March
2019</a>.</p>

<p>I had briefly tried Fedora before, and decided to give Arch Linux a shot now, so
that’s what I’m running on my desktop computer right now. My servers remain on
<a href="https://www.flatcar-linux.org/">Flatcar Container Linux</a> (the successor to
CoreOS) or Debian, depending on their purpose.</p>

<p>For me, all <a href="/posts/2019-08-17-linux-package-managers-are-slow/">Linux package managers are too
slow</a>, which is why I
started <a href="/posts/2019-08-17-introducing-distri/">distri: a Linux distribution to research fast package
management</a>. I’m testing distri on my
laptop, and I’m using distri for a number of development tasks. I don’t want to
run it on my desktop computer, though, because of its experimental nature.</p>

<h3 id="window-manager-i3">Window Manager: i3</h3>

<p>It won’t be a surprise that I am using the <a href="https://i3wm.org/">i3 tiling window
manager</a>, which I created in 2009 and still maintain.</p>

<p><a href="https://github.com/stapelberg/configfiles/blob/master/config/i3/config">My i3 configuration
file</a> is
pretty close to the i3 default config, with only two major modifications: I use
<code>workspace_layout stacked</code> and usually arrange two stacked containers next to
each other on every workspace. Also, I configured a <a href="https://github.com/stapelberg/configfiles/blob/5a3703a8c0fca06242d936c13e4fcc2761f3a58b/config/i3/config#L170">volume
mode</a>
which allows for easily changing the default sink’s volume.</p>

<p>One way in which my usage might be a little unusual is that I always have at
least 10 workspaces open.</p>

<h3 id="go">Go</h3>

<p>Over time, I have moved all new development work to Go, which is by far <a href="https://michael.stapelberg.ch/posts/2017-08-19-golang_favorite/">my
favorite programming
language</a>. See
the article for details, but in summary, Go’s values align well with my own: the
tooling is quick and high-quality, the language well thought-out and operating
at roughly my preferred level of abstraction vs. clarity.</p>

<p>Here is a quick description of a few notable Go projects I started:</p>

<p><a href="https://codesearch.debian.net/">Debian Code Search</a> is a regular expression
source code search engine covering all software available in Debian.</p>

<p><a href="https://robustirc.net/">RobustIRC</a> is an IRC network without netsplits, based
on <a href="https://en.wikipedia.org/wiki/Raft_(computer_science)">the Raft consensus
algorithm</a>.</p>

<p><a href="https://gokrazy.org/">gokrazy</a> is a pure-Go userland for your Raspberry Pi 3
appliances. It allows you to overwrite an SD card with a Linux kernel, Raspberry
Pi firmware and Go programs of your chosing with just one command.</p>

<p><a href="https://github.com/rtr7/router7">router7</a> is a pure-Go small home internet
router.</p>

<p><a href="https://github.com/debian/debiman">debiman</a> generates a static manpage HTML
repository out of a Debian archive and powers
<a href="https://manpages.debian.org/">manpages.debian.org</a>.</p>

<p>The <a href="https://distr1.org/">distri research linux distribution project</a> was
started in 2019 to research whether a few architectural changes could enable
drastically faster package management. While the package managers in common
Linux distributions (e.g. apt, dnf, …) <a href="/posts/2019-08-17-linux-package-managers-are-slow/">top out at data rates of only a few
MB/s</a>, distri effortlessly
saturates 1 Gbit, 10 Gbit and even 40 Gbit connections, resulting in superior
installation and update speeds.</p>

<h3 id="editor-emacs">Editor: Emacs</h3>

<p>In my social circle, everyone used Vim, so that’s what I learnt. I used it for
many years, but eventually gave Emacs a shot so that I could try the best
<a href="https://notmuchmail.org/">notmuch</a> frontend.</p>

<p>Emacs didn’t immediately click, and I haven’t used notmuch in many years, but it
got me curious enough that I tried getting into the habit of using Emacs a few
years ago, and now I prefer it over Vim and other editors.</p>

<p>Here is a non-exhaustive list of things I like about Emacs:</p>

<ol>
<li><p>Emacs is not a modal editor. You don’t need to switch into insert mode before
you can modify the text. This might sound like a small thing, but I feel more
of a direct connection to the text this way.</p></li>

<li><p>I like Emacs’s built-in buffer management. I could never get used to using
multiple tabs or otherwise arranging my Vim editor window, but with Emacs,
juggling multiple things at the same time feels very natural.
<br />
I make heavy use of Emacs’s compile mode (similar to Vim’s quick fix window):
I will compile not only programs, but also config files (e.g. <code>M-x compile i3
reload</code>) or <code>grep</code> commands, allowing me to go through matches via <code>M-g M-n</code>.</p></li>

<li><p>The <a href="https://magit.vc/">Magit</a> package is <strong>by far</strong> my most favorite Git
user interface. Staging individual lines or words comes very naturally, and
many operations are much quicker to accomplish compared to using Git in a
terminal.</p></li>

<li><p>The <a href="https://github.com/joaotavora/eglot">eglot</a> package is a good
<a href="https://en.wikipedia.org/wiki/Language_Server_Protocol">LSP</a> client, making
available tons of powerful cross-referencing and refactoring features.</p></li>

<li><p>The possible customization is impressive, including the development
experience: Emacs’s built-in help system is really good, and allows jumping
to the definition of variables or functions out of the box. Emacs is the only
place in my day-to-day where I get a little glimpse into what it must have
been like to use a <a href="https://en.wikipedia.org/wiki/Lisp_machine">Lisp
machine</a>…</p></li>
</ol>

<p>Of course, not everything is great about Emacs. Here are a few annoyances:</p>

<ol>
<li><p>The Emacs default configuration is very old, and a number of settings need to
be changed to make it more modern. I have been tweaking my Emacs config since
2012 and still feel like I’m barely scratching the surface. Many beginners
find their way into Emacs by using a pre-configured version of it such as
<a href="https://github.com/hlissner/doom-emacs">Doom Emacs</a> or
<a href="https://www.spacemacs.org/">Spacemacs</a>.</p></li>

<li><p>Even after going through great lengths to keep startup fast, Emacs definitely
starts much more slowly than e.g. Vim. This makes it not a great fit for
trivial editing tasks, such as commenting out a line of configuration on a
server via SSH.</p></li>
</ol>

<p>For consistency, I eventually switched my shell and readline config from vi key
bindings to the default Emacs key bindings. This turned out to be a great move:
the Emacs key bindings are generally better tested and more closely resemble the
behavior of the editor. With vi key bindings, sooner or later I always ran into
frustrating feature gaps (e.g. zsh didn’t support the
delete-until-next-x-character Vim command) or similar.</p>

<h2 id="hardware-setup-desktop-computer">Hardware setup: desktop computer</h2>

<p>I should probably publish a separate blog post with PC hardware recommendation,
so let me focus on the most important points here only:</p>

<p>I’m using an Intel i9-9900K CPU. I briefly switched to an AMD Ryzen 3900X based
on tech news sites declaring it faster. I eventually found out that the Intel
i9-9900K actually benchmarks better in browser performance and incremental Go
compilation, so I switched back.</p>

<p>To be able to drive the Dell 8K4K monitor, I’m using a nVidia GeForce
RTX 2070. I don’t care for its 3D performance, but more video RAM and memory
bandwidth make a noticeable difference in how many Chrome tabs I can work with.</p>

<p>To avoid running out of memory, I usually max out memory based on mainboard
support and what is priced reasonably. Currently, I’m using 64 GB of Corsair
RAM.</p>

<p>For storage, I currently use a Phison Force MP600 PCIe 4 NVMe disk, back from
when I tried the Ryzen 3900X. When I’m not trying out PCIe 4, I usually go with
the latest Samsung Consumer SSD PRO, e.g. the <a href="https://www.samsung.com/semiconductor/minisite/ssd/product/consumer/970pro/">Samsung SSD 970
PRO</a>. Having
a lot of bandwidth and IOPS available is great in general, but especially
valuable when e.g. <a href="https://github.com/Debian/debiman/">re-generating all
manpages</a> or compiling a new
<a href="https://distr1.org/">distri</a> version from scratch.</p>

<p>I’m a fan of Fractal Design’s Define case series (e.g. the <a href="https://www.fractal-design.com/products/cases/define/define-r6-usb-c/blackout/">Define
R6</a>)
and have been using them for many years in many different builds. They are great
to work with: no sharp edges, convenient screws and mechanisms, and they result
in a quiet computer.</p>

<p>For fans, my choice is Noctua. Specifically, their
<a href="https://noctua.at/en/products/cpu-cooler-retail/nh-u14s">NH-U14S</a> makes for a
great CPU fan, and their <a href="https://noctua.at/en/nf-a12x25-pwm">NF-A12x25</a> are
great case fans. They cool well and are super quiet!</p>

<h2 id="network-storage">Network storage</h2>

<p>For redundancy, I am backing up my computers to 2 separate network storage devices.</p>

<p>My devices are <a href="/posts/2019-10-23-nas/">built from PC Hardware</a> and run <a href="/posts/2016-11-21-gigabit-nas-coreos/">Flatcar
Linux (previously CoreOS)</a> for automated
updates. I put in one hard disk per device for maximum redundancy: any hardware
component can fail and I can just use the other device.</p>

<p>The software setup is intentionally kept very simple: I use <code>rsync</code> (with
hardlinks) over SSH for backups, and serve files using Samba. That way, backups
are just files, immediately available, and accessible from another computer if
everything else fails.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this was interesting! If you have any detail questions, feel free to
reach out <a href="https://michael.stapelberg.ch/">via email</a> or
<a href="https://twitter.com/zekjur">twitter</a>.</p>

<p>If you’re looking for more product recommendations (tech or otherwise), one of
my favorite places is the <a href="https://thewirecutter.com/">wirecutter</a>.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[a new distri linux (fast package management) release]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-05-16-distri-release/"/>
    <id>https://michael.stapelberg.ch/posts/2020-05-16-distri-release/</id>
    <published>2020-05-16T09:13:00+02:00</published>
    <content type="html"><![CDATA[<p>I just <a href="https://distr1.org/release-notes/supersilverhaze/">released a new version of distri</a>.</p>

<p>The focus of this release lies on:</p>

<ul>
<li><p>a better developer experience, allowing users to debug any installed package
without extra setup steps</p></li>

<li><p>performance improvements in all areas (starting programs, building distri
packages, generating distri images)</p></li>

<li><p>better tooling for keeping track of upstream versions</p></li>
</ul>

<p>See the <a href="https://distr1.org/release-notes/supersilverhaze/">release notes</a> for
more details.</p>

<p>The <a href="https://distr1.org/">distri research linux distribution</a> project <a href="/posts/2019-08-17-introducing-distri/">was started in
2019</a> to research whether a few
architectural changes could enable drastically faster package management.</p>

<p>While the package managers in common Linux distributions (e.g. apt, dnf, …) <a href="/posts/2019-08-17-linux-package-managers-are-slow/">top
out at data rates of only a few
MB/s</a>, distri effortlessly
saturates 1 Gbit, 10 Gbit and even 40 Gbit connections, resulting in fast
installation and update speeds.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hermetic packages (in distri)]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-05-09-distri-hermetic-packages/"/>
    <id>https://michael.stapelberg.ch/posts/2020-05-09-distri-hermetic-packages/</id>
    <published>2020-05-09T18:48:00+02:00</published>
    <content type="html"><![CDATA[

<p>In <a href="https://distr1.org/">distri</a>, packages (e.g. <code>emacs</code>) are hermetic. By
hermetic, I mean that the dependencies a package uses (e.g. <code>libusb</code>) don’t
change, even when newer versions are installed.</p>

<p>For example, if package <code>libusb-amd64-1.0.22-7</code> is available at build time, the
package will always use that same version, even after the newer
<code>libusb-amd64-1.0.23-8</code> will be installed into the package store.</p>

<p>Another way of saying the same thing is: <em>packages in distri are always
co-installable</em>.</p>

<p>This makes the package store more robust: additions to it will not break the
system. On a technical level, the package store is implemented as a directory
containing distri SquashFS images and metadata files, into which packages are
installed in an atomic way.</p>

<h2 id="out-of-scope-plugins-are-not-hermetic-by-design">Out of scope: plugins are not hermetic by design</h2>

<p>One exception where hermeticity is not desired are plugin mechanisms: optionally
loading out-of-tree code at runtime obviously is not hermetic.</p>

<p>As an example, consider <a href="https://www.gnu.org/software/libc/manual/html_node/Name-Service-Switch.html">glibc’s Name Service Switch
(NSS)</a>
mechanism. Page <a href="https://www.gnu.org/software/libc/manual/html_node/Adding-another-Service-to-NSS.html#Adding-another-Service-to-NSS">29.4.1 Adding another Service to
NSS</a>
describes how glibc searches <code>$prefix/lib</code> for shared libraries at runtime.</p>

<p>Debian <a href="https://packages.debian.org/search?suite=buster&amp;arch=amd64&amp;mode=filename&amp;searchon=contents&amp;keywords=libnss_%20.so.2">ships about a dozen NSS
libraries</a>
for a variety of purposes, and enterprise setups might add their own into the
mix.</p>

<p>systemd (as of v245) accounts for 4 NSS libraries,
e.g. <a href="https://www.freedesktop.org/software/systemd/man/nss-systemd.html">nss-systemd</a>
for user/group name resolution for users allocated through <a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html">systemd’s
<code>DynamicUser=</code></a>
option.</p>

<p>Having packages be as hermetic as possible remains a worthwhile goal despite any
exceptions: I will gladly use a 99% hermetic system over a 0% hermetic system
any day.</p>

<p>Side note: Xorg’s driver model (which can be characterized as a plugin
mechanism) does not fall under this category because of its tight API/ABI
coupling! For this case, where drivers are only guaranteed to work with
precisely the Xorg version for which they were compiled, distri uses per-package
exchange directories.</p>

<h2 id="implementation-of-hermetic-packages-in-distri">Implementation of hermetic packages in distri</h2>

<p>On a technical level, the requirement is: all paths used by the program must
always result in the same contents. This is implemented in distri via the
read-only package store mounted at <code>/ro</code>, e.g. files underneath
<code>/ro/emacs-amd64-26.3-15</code> never change.</p>

<p>To change all paths used by a program, in practice, three strategies cover most
paths:</p>

<h3 id="elf-interpreter-and-dynamic-libraries">ELF interpreter and dynamic libraries</h3>

<p>Programs on Linux use the <a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF file
format</a>, which
contains two kinds of references:</p>

<p>First, <strong>the ELF interpreter</strong> (<code>PT_INTERP</code> segment), which is used to start the
program. For dynamically linked programs on 64-bit systems, this is typically
<a href="https://manpages.debian.org/testing/manpages/ld.so.8.en.html"><code>ld.so(8)</code></a>.</p>

<p>Many distributions use system-global paths such as
<code>/lib64/ld-linux-x86-64.so.2</code>, but distri compiles programs with
<code>-Wl,--dynamic-linker=/ro/glibc-amd64-2.31-4/out/lib/ld-linux-x86-64.so.2</code> so
that the full path ends up in the binary.</p>

<p>The ELF interpreter is shown by <code>file(1)</code>, but you can also use <code>readelf -a
$BINARY | grep 'program interpreter'</code> to display it.</p>

<p>And secondly, <a href="https://en.wikipedia.org/wiki/Rpath"><strong>the rpath</strong>, a run-time search
path</a> for dynamic libraries. Instead of
storing full references to all dynamic libraries, we set the rpath so that
<code>ld.so(8)</code> will find the correct dynamic libraries.</p>

<p>Originally, we used to just set a long rpath, containing one entry for each
dynamic library dependency. However, we have since <a href="https://github.com/distr1/distri/commit/19f342071283f4d78353bdbac8d6849809927f93">switched to using a single
<code>lib</code> subdirectory per
package</a>
as its rpath, and placing symlinks with full path references into that <code>lib</code>
directory, e.g. using <code>-Wl,-rpath=/ro/grep-amd64-3.4-4/lib</code>. This is better for
performance, as <code>ld.so</code> uses a per-directory cache.</p>

<p>Note that program load times are significantly influenced by how quickly you can
locate the dynamic libraries. distri uses a FUSE file system to load programs
from, so <a href="https://github.com/distr1/distri/commit/b6a0e43368d54d5ed0e03af687158dc3e2106e38">getting proper <code>-ENOENT</code> caching into
place</a>
drastically sped up program load times.</p>

<p>Instead of compiling software with the <code>-Wl,--dynamic-linker</code> and <code>-Wl,-rpath</code>
flags, one can also modify these fields after the fact using <code>patchelf(1)</code>. For
closed-source programs, this is the only possibility.</p>

<p>The rpath can be inspected by using e.g. <code>readelf -a $BINARY | grep RPATH</code>.</p>

<h3 id="environment-variable-setup-wrapper-programs">Environment variable setup wrapper programs</h3>

<p>Many programs are influenced by environment variables: to start another program,
said program is often found by checking each directory in the <code>PATH</code> environment
variable.</p>

<p>Such search paths are prevalent in scripting languages, too, to find
modules. Python has <code>PYTHONPATH</code>, Perl has <code>PERL5LIB</code>, and so on.</p>

<p>To set up these search path environment variables at run time, distri employs an
indirection. Instead of e.g. <code>teensy-loader-cli</code>, you run a small wrapper
program that calls precisely one <code>execve</code> system call with the desired
environment variables.</p>

<p>Initially, I used shell scripts as wrapper programs because they are easily
inspectable. This turned out to be too slow, so I switched to <a href="https://github.com/distr1/distri/blob/3ee4437f88605174fd82144381cfa726fc683ccb/internal/build/build.go#L1085-L1112">compiled
programs</a>. I’m
linking them statically for fast startup, and I’m linking them against <a href="https://musl.libc.org/">musl
libc</a> for significantly smaller file sizes than glibc
(per-executable overhead adds up quickly in a distribution!).</p>

<p>Note that the wrapper programs prepend to the <code>PATH</code> environment variable, they
don’t replace it in its entirely. This is important so that users have a way to
extend the <code>PATH</code> (and other variables) if they so choose. This doesn’t hurt
hermeticity because it is only relevant for programs that were not present at
build time, i.e. plugin mechanisms which, by design, cannot be hermetic.</p>

<h3 id="shebang-interpreter-patching">Shebang interpreter patching</h3>

<p>The <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">Shebang</a> of scripts contains
a path, too, and hence needs to be changed.</p>

<p><a href="https://github.com/distr1/distri/issues/67">We don’t do this in distri yet</a>
(the number of packaged scripts is small), but we should.</p>

<h3 id="performance-requirements">Performance requirements</h3>

<p>The performance improvements in the previous sections are not just good to have,
but practically required when many processes are involved: without them, you’ll
encounter second-long delays in <a href="https://magit.vc/">magit</a> which spawns many git
processes under the covers, or in
<a href="https://en.wikipedia.org/wiki/Dracut_(software)">dracut</a>, which spawns one
<code>cp(1)</code> process per file.</p>

<h2 id="downside-rebuild-of-packages-required-to-pick-up-changes">Downside: rebuild of packages required to pick up changes</h2>

<p>Linux distributions such as Debian consider it an advantage to roll out security
fixes to the entire system by updating a single shared library package
(e.g. <code>openssl</code>).</p>

<p>The flip side of that coin is that changes to a single critical package can
break the entire system.</p>

<p>With hermetic packages, all reverse dependencies must be rebuilt when a
library’s changes should be picked up by the whole system. E.g., when <code>openssl</code>
changes, <code>curl</code> must be rebuilt to pick up the new version of <code>openssl</code>.</p>

<p>This approach trades off using more bandwidth and more disk space (temporarily)
against reducing the blast radius of any individual package update.</p>

<h2 id="downside-long-env-variables-are-cumbersome-to-deal-with">Downside: long env variables are cumbersome to deal with</h2>

<p>This can be partially mitigated by <a href="https://github.com/distr1/distri/commit/6ac53cac4a5027622ae8622be2a208778dd54e74">removing empty directories at build
time</a>,
which will result in shorter variables.</p>

<p>In general, there is no getting around this. One little trick is to use <code>tr :
'\n'</code>, e.g.:</p>

<pre><code>distri0# echo $PATH
/usr/bin:/bin:/usr/sbin:/sbin:/ro/openssh-amd64-8.2p1-11/out/bin

distri0# echo $PATH | tr : '\n'
/usr/bin
/bin
/usr/sbin
/sbin
/ro/openssh-amd64-8.2p1-11/out/bin
</code></pre>

<h2 id="edge-cases">Edge cases</h2>

<p>The implementation outlined above works well in hundreds of packages, and only a
small handful exhibited problems of any kind. Here are some issues I encountered:</p>

<h3 id="issue-accidental-abi-breakage-in-plugin-mechanisms">Issue: accidental ABI breakage in plugin mechanisms</h3>

<p>NSS libraries built against glibc 2.28 and newer <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=928769">cannot be loaded by glibc
2.27</a>. In all
likelihood, such changes do not happen too often, but it does illustrate that
glibc’s <a href="https://www.gnu.org/software/libc/manual/html_node/Adding-another-Service-to-NSS.html#Adding-another-Service-to-NSS">published interface
spec</a>
is not sufficient for forwards and backwards compatibility.</p>

<p>In distri, we could likely use a per-package exchange directory for glibc’s NSS
mechanism to prevent the above problem from happening in the future.</p>

<h3 id="issue-wrapper-bypass-when-a-program-re-executes-itself">Issue: wrapper bypass when a program re-executes itself</h3>

<p>Some programs try to arrange for themselves to be re-executed outside of their
current process tree. For example, consider building a program with the <code>meson</code>
build system:</p>

<ol>
<li><p>When <code>meson</code> first configures the build, it generates <code>ninja</code> files (think
Makefiles) which contain command lines that run the <code>meson --internal</code>
helper.</p></li>

<li><p>Once <code>meson</code> returns, <code>ninja</code> is called as a separate process, so it will not
have the environment which the <code>meson</code> wrapper sets up. <code>ninja</code> then runs the
previously persisted <code>meson</code> command line. Since the command line uses the
full path to <code>meson</code> (not to its wrapper), it bypasses the wrapper.</p></li>
</ol>

<p>Luckily, not many programs try to arrange for other process trees to run
them. Here is a table summarizing how affected programs might try to arrange for
re-execution, whether the technique results in a wrapper bypass, and what we do
about it in distri:</p>

<table>
<thead>
<tr>
<th>technique to execute itself</th>
<th>uses wrapper</th>
<th>mitigation</th>
</tr>
</thead>

<tbody>
<tr>
<td>run-time: find own basename in <code>PATH</code></td>
<td>yes</td>
<td>wrapper program</td>
</tr>

<tr>
<td>compile-time: embed expected path</td>
<td>no; bypass!</td>
<td>configure or patch</td>
</tr>

<tr>
<td>run-time: <code>argv[0]</code> or <code>/proc/self/exe</code></td>
<td>no; bypass!</td>
<td><a href="https://github.com/distr1/distri/commit/f45ee9ac1121da284f2943c80e2c30afa24ca80d">patch</a></td>
</tr>
</tbody>
</table>

<p>One might think that setting <code>argv[0]</code> to the wrapper location seems like a way
to side-step this problem. We tried doing this in distri, but <a href="https://github.com/distr1/distri/commit/b517cb33ed827d358b00737434c7a09dd75583b7">had to
revert</a>
and <a href="https://github.com/distr1/distri/commit/9fd34936d4415f9963202bbb9ee454c970874b18">go the other
way</a>.</p>

<h3 id="misc-smaller-issues">Misc smaller issues</h3>

<ul>
<li>Login shells are <a href="https://unix.stackexchange.com/a/46856/181634">started by convention with a <code>-</code> character prepended to
<code>argv[0]</code></a>, so <a href="https://github.com/distr1/distri/commit/3c3a9d6ef4fc76edca6fb8351a716b18b83ff3af">shells like
bash or zsh cannot use wrapper
programs</a>.</li>
<li><a href="https://github.com/distr1/distri/commit/cefded2b2ce39407cc2d75936ec6cb018d533846">LDFLAGS leaked to
pkgconfig</a>
(<a href="https://github.com/distr1/distri/commit/434b7298ad7ef8d4ae229df84dd2353badf48fa1">upstream
reports</a>)</li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1635036">mozjs tries to run autoconf with the shell directly, but should use
autoconf’s wrapper</a></li>
</ul>

<h2 id="appendix-could-other-distributions-adopt-hermetic-packages">Appendix: Could other distributions adopt hermetic packages?</h2>

<p>At a very high level, adopting hermetic packages will require two steps:</p>

<ol>
<li><p>Using fully qualified paths whose contents don’t change
(e.g. <code>/ro/emacs-amd64-26.3-15</code>) generally requires rebuilding programs,
e.g. with <code>--prefix</code> set.</p></li>

<li><p>Once you use fully qualified paths you need to make the packages able to
exchange data. distri solves this with exchange directories, implemented in the
<code>/ro</code> file system which is backed by a FUSE daemon.</p></li>
</ol>

<p>The first step is pretty simple, whereas the second step is where I expect
controversy around any suggested mechanism.</p>

<h2 id="appendix-demo-in-distri">Appendix: demo (in distri)</h2>

<p>This appendix contains commands and their outputs, run on upcoming distri
version <code>supersilverhaze</code>, but verified to work on older versions, too.</p>

<p>Large outputs have been collapsed and can be expanded by clicking on the output.</p>

<p>The <code>/bin</code> directory contains symlinks for the union of all package’s <code>bin</code> subdirectories:
<details class="output" open><summary><code>distri0# readlink -f /bin/teensy_loader_cli</code></summary><pre><code>/ro/teensy-loader-cli-amd64-2.1+g20180927-7/bin/teensy_loader_cli</code></pre></details></p>

<p>The wrapper program in the <code>bin</code> subdirectory is small:
<details class="output" open><summary><code>distri0# ls -lh $(readlink -f /bin/teensy_loader_cli)</code></summary><pre><code>-rwxr-xr-x 1 root root 46K Apr 21 21:56 /ro/teensy-loader-cli-amd64-2.1+g20180927-7/bin/teensy_loader_cli</code></pre></details></p>

<p>Wrapper programs execute quickly:
<details class="output"><summary><code>distri0# strace -fvy /bin/teensy_loader_cli |&amp; head | cat -n</code></summary><pre><code>     1  execve(&quot;/bin/teensy_loader_cli&quot;, [&quot;/bin/teensy_loader_cli&quot;], [&quot;USER=root&quot;, &quot;LOGNAME=root&quot;, &quot;HOME=/root&quot;, &quot;PATH=/ro/bash-amd64-5.0-4/bin:/r&quot;..., &quot;SHELL=/bin/zsh&quot;, &quot;TERM=screen.xterm-256color&quot;, &quot;XDG_SESSION_ID=c1&quot;, &quot;XDG_RUNTIME_DIR=/run/user/0&quot;, &quot;DBUS_SESSION_BUS_ADDRESS=unix:pa&quot;..., &quot;XDG_SESSION_TYPE=tty&quot;, &quot;XDG_SESSION_CLASS=user&quot;, &quot;SSH_CLIENT=10.0.2.2 42556 22&quot;, &quot;SSH_CONNECTION=10.0.2.2 42556 10&quot;..., &quot;SSH<em>TTY=/dev/pts/0&quot;, &quot;SHLVL=1&quot;, &quot;PWD=/root&quot;, &quot;OLDPWD=/root&quot;, &quot;</em>=/usr/bin/strace&quot;, &quot;LD_LIBRARY_PATH=/ro/bash-amd64-5&quot;..., &quot;PERL5LIB=/ro/bash-amd64-5.0-4/ou&quot;..., &quot;PYTHONPATH=/ro/bash-amd64-5.b0-4/&quot;...]) = 0
     2  arch_prctl(ARCH_SET_FS, 0x40c878)       = 0
     3  set_tid_address(0x40ca9c)               = 715
     4  brk(NULL)                               = 0x15b9000
     5  brk(0x15ba000)                          = 0x15ba000
     6  brk(0x15bb000)                          = 0x15bb000
     7  brk(0x15bd000)                          = 0x15bd000
     8  brk(0x15bf000)                          = 0x15bf000
     9  brk(0x15c1000)                          = 0x15c1000
    10  execve(&quot;/ro/teensy-loader-cli-amd64-2.1+g20180927-7/out/bin/teensy_loader_cli&quot;, [&quot;/ro/teensy-loader-cli-amd64-2.1+&quot;...], [&quot;USER=root&quot;, &quot;LOGNAME=root&quot;, &quot;HOME=/root&quot;, &quot;PATH=/ro/bash-amd64-5.0-4/bin:/r&quot;..., &quot;SHELL=/bin/zsh&quot;, &quot;TERM=screen.xterm-256color&quot;, &quot;XDG_SESSION_ID=c1&quot;, &quot;XDG_RUNTIME_DIR=/run/user/0&quot;, &quot;DBUS_SESSION_BUS_ADDRESS=unix:pa&quot;..., &quot;XDG_SESSION_TYPE=tty&quot;, &quot;XDG_SESSION_CLASS=user&quot;, &quot;SSH_CLIENT=10.0.2.2 42556 22&quot;, &quot;SSH_CONNECTION=10.0.2.2 42556 10&quot;..., &quot;SSH<em>TTY=/dev/pts/0&quot;, &quot;SHLVL=1&quot;, &quot;PWD=/root&quot;, &quot;OLDPWD=/root&quot;, &quot;</em>=/usr/bin/strace&quot;, &quot;LD_LIBRARY_PATH=/ro/bash-amd64-5&quot;..., &quot;PERL5LIB=/ro/bash-amd64-5.0-4/ou&quot;..., &quot;PYTHONPATH=/ro/bash-amd64-5.0-4/&quot;...]) = 0</code></pre></details></p>

<p>Confirm which ELF interpreter is set for a binary using <code>readelf(1)</code>:
<details class="output" open><summary><code>distri0# readelf -a /ro/teensy-loader-cli-amd64-2.1+g20180927-7/out/bin/teensy_loader_cli | grep 'program interpreter'</code></summary><pre><code>[Requesting program interpreter: /ro/glibc-amd64-2.31-4/out/lib/ld-linux-x86-64.so.2]</code></pre></details></p>

<p>Confirm the rpath is set to the package’s lib subdirectory using <code>readelf(1)</code>:
<details class="output" open><summary><code>distri0# readelf -a /ro/teensy-loader-cli-amd64-2.1+g20180927-7/out/bin/teensy_loader_cli | grep RPATH</code></summary><pre><code> 0x000000000000000f (RPATH)              Library rpath: [/ro/teensy-loader-cli-amd64-2.1+g20180927-7/lib]</code></pre></details></p>

<p>…and verify the lib subdirectory has the expected symlinks and target versions:
<details class="output"><summary><code>distri0# find /ro/teensy-loader-cli-amd64-*/lib -type f -printf '%P -&gt; %l\n'</code><pre>libc.so.6 -&gt; /ro/glibc-amd64-2.31-4/out/lib/libc-2.31.so</pre></summary><pre><code>libpthread.so.0 -&gt; /ro/glibc-amd64-2.31-4/out/lib/libpthread-2.31.so
librt.so.1 -&gt; /ro/glibc-amd64-2.31-4/out/lib/librt-2.31.so
libudev.so.1 -&gt; /ro/libudev-amd64-245-11/out/lib/libudev.so.1.6.17
libusb-0.1.so.4 -&gt; /ro/libusb-compat-amd64-0.1.5-7/out/lib/libusb-0.1.so.4.4.4
libusb-1.0.so.0 -&gt; /ro/libusb-amd64-1.0.23-8/out/lib/libusb-1.0.so.0.2.0</code></pre></details></p>

<p>To verify the correct libraries are actually loaded, you can set the <code>LD_DEBUG</code>
environment variable for <code>ld.so(8)</code>:</p>

<p><details class="output"><summary><code>distri0# LD_DEBUG=libs teensy_loader_cli</code></summary><pre><code>[…]
       678:     find library=libc.so.6 [0]; searching
       678:      search path=/ro/teensy-loader-cli-amd64-2.1+g20180927-7/lib            (RPATH from file /ro/teensy-loader-cli-amd64-2.1+g20180927-7/out/bin/teensy_loader_cli)
       678:       trying file=/ro/teensy-loader-cli-amd64-2.1+g20180927-7/lib/libc.so.6
       678:
[…]</code></pre></details></p>

<p>NSS libraries that distri ships:
<details class="output"><summary><code>find /lib/ -name &quot;libnss_*.so.2&quot; -type f -printf '%P -&gt; %l\n'</code><pre>libnss_myhostname.so.2 -&gt; ../systemd-amd64-245-11/out/lib/libnss_myhostname.so.2</pre></summary><pre><code>libnss_mymachines.so.2 -&gt; ../systemd-amd64-245-11/out/lib/libnss_mymachines.so.2
libnss_resolve.so.2 -&gt; ../systemd-amd64-245-11/out/lib/libnss_resolve.so.2
libnss_systemd.so.2 -&gt; ../systemd-amd64-245-11/out/lib/libnss_systemd.so.2
libnss_compat.so.2 -&gt; ../glibc-amd64-2.31-4/out/lib/libnss_compat.so.2
libnss_db.so.2 -&gt; ../glibc-amd64-2.31-4/out/lib/libnss_db.so.2
libnss_dns.so.2 -&gt; ../glibc-amd64-2.31-4/out/lib/libnss_dns.so.2
libnss_files.so.2 -&gt; ../glibc-amd64-2.31-4/out/lib/libnss_files.so.2
libnss_hesiod.so.2 -&gt; ../glibc-amd64-2.31-4/out/lib/libnss_hesiod.so.2</code></pre></details></p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Readiness notifications in Go]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-02-02-readiness-notifications-in-golang/"/>
    <id>https://michael.stapelberg.ch/posts/2020-02-02-readiness-notifications-in-golang/</id>
    <published>2020-02-02T00:00:00+00:00</published>
    <content type="html"><![CDATA[

<p>When spawning a child program, for example in an integration test, it is often
helpful to know when the child program is ready to receive requests.</p>

<h3 id="delaying">Delaying</h3>

<p>A brittle strategy is to just add a delay (say, <code>time.Sleep(2 * time.Second)</code>)
and hope the child program finishes initialization in that time. This is brittle
because it depends on timing, so when the computer running the test is slow for
whichever reason, your test starts failing. Many CI/CD systems have less
capacity (and/or are more heavily utilized) than developer machines, so timeouts
frequently need to be adjusted.</p>

<p>Also, relying on timing is a race to the bottom: your delay needs to work on the
slowest machine that runs your code. Ergo, tests waste valuable developer time
on your high-end workstation, just so that they pass on some under-powered
machine.</p>

<h3 id="polling">Polling</h3>

<p>A slightly better strategy is polling, i.e. repeatedly checking whether the
child program is ready. As an example, in the <code>dnsmasq_exporter</code> test, <a href="https://github.com/google/dnsmasq_exporter/blob/646ded9be82e26a4c6450da8d7128d12e0e11e3a/dnsmasq_test.go#L46-L61">I need
to
poll</a>
to find out when <a href="https://manpages.debian.org/dnsmasq.8"><code>dnsmasq(8)</code></a>
 is ready.</p>

<p>This approach is better because it automatically works well on both high-end and
under-powered machines, without wasting time on either.</p>

<p>Finding a good frequency with which to poll is a bit of an art, though: the more
often you poll, the less time you waste, but also the more resources you spend
on polling instead of letting your program initialize. The overhead may be
barely noticeable, but when starting lots of programs (e.g. in a microservice
architecture) or when individual polls are costly, the overhead can add up.</p>

<h3 id="readiness-notifications">Readiness notifications</h3>

<p>The most elegant approach is to use readiness notifications: you don’t waste any
time or resources.</p>

<p>It only takes a few lines of code to integrate this approach into your
application. The specifics might vary depending on your environment,
e.g. whether an environment variable is preferable to a command-line flag; my
goal with this article is to explain the approach in general, and you can take
care of the details.</p>

<p>The key idea is: the child program inherits a pipe file descriptor from the
parent and closes it once ready. The parent program knows the child program is
ready because an otherwise blocking read from the pipe returns once the pipe is
closed.</p>

<p>This is similar to using a <code>chan struct{}</code> in Go and closing it. It doesn’t have
to remain this simple, though: you can also send arbitrary data over the pipe,
ranging from a simple string being sent in one direction and culminating in
speaking a framed protocol in a client/server fashion. In <a href="https://codesearch.debian.net/">Debian Code
Search</a>, I’m <a href="https://github.com/Debian/dcs/blob/3baaecabca2d6c56799012c40c1245fc389cb6e6/internal/addrfd/addrfd.go">writing the chosen network
address</a>
before closing the pipe, so that the parent program knows where to connect to.</p>

<h4 id="parent-program">Parent Program</h4>

<p>So, how do we go about readiness notifications in Go? We create a new pipe and
specify the write end in the <code>ExtraFiles</code> field of <code>(os/exec).Cmd</code>:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go">r, w, err <span style="color:#666">:=</span> os.<span style="color:#06287e">Pipe</span>()
<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
  <span style="color:#007020;font-weight:bold">return</span> err
}

child <span style="color:#666">:=</span> exec.<span style="color:#06287e">Command</span>(<span style="color:#4070a0">&#34;child&#34;</span>)
child.Stderr = os.Stderr
child.ExtraFiles = []<span style="color:#666">*</span>os.File{w}</code></pre></div>
<p>It is good practice to explicitly specify the file descriptor number that we
passed via some sort of signaling, so that the child program does not need to be
modified when we add new file descriptors in the parent, and also because this
behavior is usually opt-in.</p>

<p>In this case, we’ll do that via an environment variable and start the child
program:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#60a0b0;font-style:italic">// Go dup2()’s ExtraFiles to file descriptor 3 and counting.
</span><span style="color:#60a0b0;font-style:italic">// File descriptors 0, 1, 2 are stdin, stdout and stderr.
</span><span style="color:#60a0b0;font-style:italic"></span>child.Env = <span style="color:#007020">append</span>(os.<span style="color:#06287e">Environ</span>(), <span style="color:#4070a0">&#34;CHILD_READY_FD=3&#34;</span>)

<span style="color:#60a0b0;font-style:italic">// Note child.Start(), not child.Run():
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> child.<span style="color:#06287e">Start</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
  <span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;%v: %v&#34;</span>, child.Args, err)
}</code></pre></div>
<p>At this point, both the parent and the child process have a file descriptor
referencing the write end of the pipe. Since the pipe will only be closed once
<em>all</em> processes have closed the write end, we need to close the write end in the
parent program:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#60a0b0;font-style:italic">// Close the write end of the pipe in the parent:
</span><span style="color:#60a0b0;font-style:italic"></span>w.<span style="color:#06287e">Close</span>()</code></pre></div>
<p>Now, we can blockingly read from the pipe, and know that once the read call
returns, the child program is ready to receive requests:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#60a0b0;font-style:italic">// Avoid hanging forever in case the child program never becomes ready;
</span><span style="color:#60a0b0;font-style:italic">// this is easier to diagnose than an unspecified CI/CD test timeout.
</span><span style="color:#60a0b0;font-style:italic">// This timeout should be much much longer than initialization takes.
</span><span style="color:#60a0b0;font-style:italic"></span>r.<span style="color:#06287e">SetReadDeadline</span>(time.<span style="color:#06287e">Now</span>().<span style="color:#06287e">Add</span>(<span style="color:#40a070">1</span> <span style="color:#666">*</span> time.Minute))
<span style="color:#007020;font-weight:bold">if</span> _, err <span style="color:#666">:=</span> ioutil.<span style="color:#06287e">ReadAll</span>(r); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
  <span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;awaiting readiness: %v&#34;</span>, err)
}

<span style="color:#60a0b0;font-style:italic">// …send requests…
</span><span style="color:#60a0b0;font-style:italic"></span>
<span style="color:#666">//</span> <span style="">…</span>tear down child program<span style="">…</span></code></pre></div>
<h4 id="child-program">Child Program</h4>

<p>In the child program, we need to recognize that the parent program requests a
readiness notification, and ensure our signaling doesn’t leak to child programs
of the child program:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#007020;font-weight:bold">var</span> readyFile <span style="color:#666">*</span>os.File

<span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">init</span>() {
  <span style="color:#007020;font-weight:bold">if</span> fd, err <span style="color:#666">:=</span> strconv.<span style="color:#06287e">Atoi</span>(os.<span style="color:#06287e">Getenv</span>(<span style="color:#4070a0">&#34;CHILD_READY_FD&#34;</span>)); err <span style="color:#666">==</span> <span style="color:#007020;font-weight:bold">nil</span> {
    readyFile = os.<span style="color:#06287e">NewFile</span>(<span style="color:#007020">uintptr</span>(fd), <span style="color:#4070a0">&#34;readyfd&#34;</span>)
    os.<span style="color:#06287e">Unsetenv</span>(<span style="color:#4070a0">&#34;CHILD_READY_FD&#34;</span>)
  }
}

<span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
  <span style="color:#60a0b0;font-style:italic">// …initialize…
</span><span style="color:#60a0b0;font-style:italic"></span>
  <span style="color:#007020;font-weight:bold">if</span> readyFile <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
    readyFile.<span style="color:#06287e">Close</span>() <span style="color:#60a0b0;font-style:italic">// signal readiness
</span><span style="color:#60a0b0;font-style:italic"></span>    readyFile = <span style="color:#007020;font-weight:bold">nil</span>   <span style="color:#60a0b0;font-style:italic">// just to be prudent
</span><span style="color:#60a0b0;font-style:italic"></span>  }
}</code></pre></div>
<h3 id="conclusion">Conclusion</h3>

<p>Depending on what you’re communicating from the child to the parent, and how
your system is architected, it might be a good idea to use <a href="http://0pointer.de/blog/projects/socket-activation.html">systemd socket
activation</a> (<a href="https://vincent.bernat.ch/en/blog/2018-systemd-golang-socket-activation">socket
activation in
Go</a>). It
works similarly in concept, but passes a listening socket and readiness is
determined by the child process answering requests. We introduced this technique
in the <a href="https://i3wm.org/docs/testsuite.html#_appendix_b_socket_activation">i3
testsuite</a>
and reduced the total wallclock time from &gt;100 seconds to a mere 16 seconds back
then (even faster today).</p>

<p>The technique described in this blog post is a bit more generic than systemd’s
socket activation. In general, passing file descriptors between processes is a
powerful idea. For example, in debiman, we’re <a href="https://github.com/Debian/debiman/blob/32eac1bc6182f68c7443a56b85c33522dc3d5d70/internal/convert/mandoc.go#L118">passing individual pipe file
descriptors</a>
to a persistent <a href="https://manpages.debian.org/mandocd.8"><code>mandocd(8)</code></a>
 process to quickly
convert lots of man pages without encurring process creation overhead.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[distri: 20x faster initramfs (initrd) from scratch]]></title>
    <link href="https://michael.stapelberg.ch/posts/2020-01-21-initramfs-from-scratch-golang/"/>
    <id>https://michael.stapelberg.ch/posts/2020-01-21-initramfs-from-scratch-golang/</id>
    <published>2020-01-21T17:50:00+01:00</published>
    <content type="html"><![CDATA[

<p>In case you are not yet familiar with why an initramfs (or initrd, or initial
ramdisk) is typically used when starting Linux, let me quote the <a href="https://en.wikipedia.org/wiki/Initial_ramdisk">wikipedia
definition</a>:</p>

<p>“[…] initrd is a scheme for loading a temporary root file system into memory,
which may be used as part of the Linux startup process […] to make preparations
before the real root file system can be mounted.”</p>

<p>Many Linux distributions do not compile all file system drivers into the kernel,
but instead load them on-demand from an initramfs, which saves memory.</p>

<p>Another common scenario, in which an initramfs is required, is full-disk
encryption: the disk must be unlocked from userspace, but since userspace is
encrypted, an initramfs is used.</p>

<h2 id="motivation">Motivation</h2>

<p>Thus far, building a <a href="https://distr1.org/">distri</a> disk image was quite slow:</p>

<p>This is on an AMD Ryzen 3900X 12-core processor (2019):</p>

<pre><code>distri % time make cryptimage serial=1
80.29s user 13.56s system 186% cpu 50.419 total # 19s image, 31s initrd
</code></pre>

<p>Of these 50 seconds,
<a href="https://en.wikipedia.org/wiki/Dracut_(software)"><code>dracut</code></a>’s initramfs
generation accounts for 31 seconds (62%)!</p>

<p>Initramfs generation time drops to 8.7 seconds once <code>dracut</code> no longer needs to
use the single-threaded <a href="https://manpages.debian.org/gzip.1"><code>gzip(1)</code></a>
, but the
multi-threaded replacement <a href="https://manpages.debian.org/pigz.1"><code>pigz(1)</code></a>
:</p>

<p>This brings the total time to build a distri disk image down to:</p>

<pre><code>distri % time make cryptimage serial=1
76.85s user 13.23s system 327% cpu 27.509 total # 19s image, 8.7s initrd
</code></pre>

<p>Clearly, when you use <code>dracut</code> on any modern computer, you should make pigz
available. <code>dracut</code> should fail to compile unless one explicitly opts into the
known-slower gzip. For more thoughts on optional dependencies, see <a href="/posts/2019-05-23-optional-dependencies/">“Optional
dependencies don’t work”</a>.</p>

<p>But why does it take 8.7 seconds still? Can we go faster?</p>

<p>The answer is <strong>Yes</strong>! I recently built a distri-specific initramfs I’m calling
<code>minitrd</code>. I wrote both big parts from scratch:</p>

<ol>
<li>the initramfs generator program (<a href="https://github.com/distr1/distri/blob/master/cmd/distri/initrd.go"><code>distri initrd</code></a>)</li>
<li>a custom Go userland (<a href="https://github.com/distr1/distri/blob/master/cmd/minitrd/minitrd.go"><code>cmd/minitrd</code></a>), running as <code>/init</code> in the initramfs.</li>
</ol>

<p><code>minitrd</code> generates the initramfs image in ≈400ms, bringing the total time down
to:</p>

<pre><code>distri % time make cryptimage serial=1
50.09s user 8.80s system 314% cpu 18.739 total # 18s image, 400ms initrd
</code></pre>

<p>(The remaining time is spent in preparing the file system, then installing and
configuring the distri system, i.e. preparing a disk image you can <a href="https://distr1.org/#run-distri-on-real-hardware">run on real
hardware</a>.)</p>

<p>How can <code>minitrd</code> be 20 times faster than <code>dracut</code>?</p>

<p><code>dracut</code> is mainly written in shell, with a C helper program. It drives the
generation process by spawning lots of external dependencies (e.g. <code>ldd</code> or the
<code>dracut-install</code> helper program). I assume that the combination of using an
interpreted language (shell) that spawns lots of processes and precludes a
concurrent architecture is to blame for the poor performance.</p>

<p><code>minitrd</code> is written in Go, with speed as a goal. It leverages concurrency and
uses no external dependencies; everything happens within a single process (but
with enough threads to saturate modern hardware).</p>

<p>Measuring early boot time using qemu, I measured the <code>dracut</code>-generated
initramfs taking 588ms to display the full disk encryption passphrase prompt,
whereas <code>minitrd</code> took only 195ms.</p>

<p>The rest of this article dives deeper into how <code>minitrd</code> works.</p>

<h2 id="what-does-an-initramfs-do">What does an initramfs do?</h2>

<p>Ultimately, the job of an initramfs is to make the root file system available
and continue booting the system from there. Depending on the system setup, this
involves the following 5 steps:</p>

<h3 id="1-load-kernel-modules-to-access-the-block-devices-with-the-root-file-system">1. Load kernel modules to access the block devices with the root file system</h3>

<p>Depending on the system, the block devices with the root file system might
already be present when the initramfs runs, or some kernel modules might need to
be loaded first. On my Dell XPS 9360 laptop, the NVMe system disk is already
present when the initramfs starts, whereas in qemu, we need to load the
<code>virtio_pci</code> module, followed by the <code>virtio_scsi</code> module.</p>

<p>How will our userland program know which kernel modules to load? Linux kernel
modules declare patterns for their supported hardware as an alias, e.g.:</p>

<pre><code>initrd# grep virtio_pci lib/modules/5.4.6/modules.alias
alias pci:v00001AF4d*sv*sd*bc*sc*i* virtio_pci
</code></pre>

<p>Devices in <code>sysfs</code> have a <code>modalias</code> file whose content can be matched against
these declarations to identify the module to load:</p>

<pre><code>initrd# cat /sys/devices/pci0000:00/*/modalias
pci:v00001AF4d00001005sv00001AF4sd00000004bc00scFFi00
pci:v00001AF4d00001004sv00001AF4sd00000008bc01sc00i00
[…]
</code></pre>

<p>Hence, for the initial round of module loading, it is sufficient to locate all
<code>modalias</code> files within <code>sysfs</code> and load the responsible modules.</p>

<p>Loading a kernel module can result in new devices appearing. When that happens,
the kernel sends a
<a href="https://stackoverflow.com/questions/22803469/uevent-sent-from-kernel-to-user-space-udev">uevent</a>,
which the uevent consumer in userspace receives via a netlink socket. Typically,
this consumer is <a href="https://manpages.debian.org/udev.7"><code>udev(7)</code></a>
, but in our case, it’s
<code>minitrd</code>.</p>

<p>For each uevent messages that comes with a <code>MODALIAS</code> variable, <code>minitrd</code> will
load the relevant kernel module(s).</p>

<p>When loading a kernel module, its dependencies need to be loaded
first. Dependency information is stored in the <code>modules.dep</code> file in a
<code>Makefile</code>-like syntax:</p>

<pre><code>initrd# grep virtio_pci lib/modules/5.4.6/modules.dep
kernel/drivers/virtio/virtio_pci.ko: kernel/drivers/virtio/virtio_ring.ko kernel/drivers/virtio/virtio.ko
</code></pre>

<p>To load a module, we can open its file and then call the Linux-specific <a href="https://manpages.debian.org/finit_module.2"><code>finit_module(2)</code></a>
 system call. Some modules are expected to
return an error code, e.g. <code>ENODEV</code> or <code>ENOENT</code> when some hardware device is not
actually present.</p>

<p>Side note: next to the textual versions, there are also binary versions of the
<code>modules.alias</code> and <code>modules.dep</code> files. Presumably, those can be queried more
quickly, but for simplicitly, I have not (yet?) implemented support in
<code>minitrd</code>.</p>

<h3 id="2-console-settings-font-keyboard-layout">2. Console settings: font, keyboard layout</h3>

<p>Setting a legible font is necessary for hi-dpi displays. On my Dell XPS 9360
(3200 x 1800 QHD+ display), the following works well:</p>

<pre><code>initrd# setfont latarcyrheb-sun32
</code></pre>

<p>Setting the user’s keyboard layout is necessary for entering the LUKS full-disk
encryption passphrase in their preferred keyboard layout. I use the <a href="https://www.neo-layout.org">NEO
layout</a>:</p>

<pre><code>initrd# loadkeys neo
</code></pre>

<h3 id="3-block-device-identification">3. Block device identification</h3>

<p>In the Linux kernel, block device enumeration order is not necessarily the same
on each boot. Even if it was deterministic, device order could still be changed
when users modify their computer’s device topology (e.g. connect a new disk to a
formerly unused port).</p>

<p>Hence, it is good style to refer to disks and their partitions with stable
identifiers. This also applies to boot loader configuration, and so most
distributions will set a kernel parameter such as
<code>root=UUID=1fa04de7-30a9-4183-93e9-1b0061567121</code>.</p>

<p>Identifying the block device or partition with the specified <code>UUID</code> is the
initramfs’s job.</p>

<p>Depending on what the device contains, the UUID comes from a different
place. For example, <code>ext4</code> file systems have a UUID field in their file system
superblock, whereas LUKS volumes have a UUID in their LUKS header.</p>

<p>Canonically, probing a device to extract the UUID is done by <code>libblkid</code> from the
<code>util-linux</code> package, but the logic can easily be <a href="https://github.com/distr1/distri/blob/master/cmd/minitrd/blkid.go">re-implemented in other
languages</a>
and changes rarely. <code>minitrd</code> comes with its own implementation to avoid
<a href="https://golang.org/cmd/cgo/">cgo</a> or running the <a href="https://manpages.debian.org/blkid.8"><code>blkid(8)</code></a>
 program.</p>

<h3 id="4-luks-full-disk-encryption-unlocking-only-on-encrypted-systems">4. LUKS full-disk encryption unlocking (only on encrypted systems)</h3>

<p>Unlocking a
<a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS</a>-encrypted volume
is done in userspace. The kernel handles the crypto, but reading the metadata,
obtaining the passphrase (or e.g. key material from a file) and setting up the
device mapper table entries are done in user space.</p>

<pre><code>initrd# modprobe algif_skcipher
initrd# cryptsetup luksOpen /dev/sda4 cryptroot1
</code></pre>

<p>After the user entered their passphrase, the root file system can be mounted:</p>

<pre><code>initrd# mount /dev/dm-0 /mnt
</code></pre>

<h3 id="5-continuing-the-boot-process-switch-root">5. Continuing the boot process (switch_root)</h3>

<p>Now that everything is set up, we need to pass execution to the init program on
the root file system with a careful sequence of <a href="https://manpages.debian.org/chdir.2"><code>chdir(2)</code></a>
, <a href="https://manpages.debian.org/mount.2"><code>mount(2)</code></a>
, <a href="https://manpages.debian.org/chroot.2"><code>chroot(2)</code></a>
, <a href="https://manpages.debian.org/chdir.2"><code>chdir(2)</code></a>
 and <a href="https://manpages.debian.org/execve.2"><code>execve(2)</code></a>
 system calls that is explained in <a href="https://github.com/mirror/busybox/blob/9ec836c033fc6e55e80f3309b3e05acdf09bb297/util-linux/switch_root.c#L297">this busybox switch_root
comment</a>.</p>

<pre><code>initrd# mount -t devtmpfs dev /mnt/dev
initrd# exec switch_root -c /dev/console /mnt /init
</code></pre>

<p>To conserve RAM, the files in the temporary file system to which the initramfs
archive is extracted are typically deleted.</p>

<h2 id="how-is-an-initramfs-generated">How is an initramfs generated?</h2>

<p>An initramfs “image” (more accurately: archive) is a compressed
<a href="https://en.wikipedia.org/wiki/Cpio">cpio</a> archive. Typically, gzip compression
is used, but the kernel supports a bunch of different algorithms and
distributions such as <a href="https://www.phoronix.com/scan.php?page=news_item&amp;px=LZ4-Initramfs-Ubuntu-Go-Ahead">Ubuntu are switching to lz4</a>.</p>

<p>Generators typically prepare a temporary directory and feed it to the <a href="https://manpages.debian.org/cpio.1"><code>cpio(1)</code></a>
 program. In <code>minitrd</code>, we read the files into memory
and generate the cpio archive using the
<a href="https://github.com/cavaliercoder/go-cpio">go-cpio</a> package. We use the
<a href="https://github.com/klauspost/pgzip">pgzip</a> package for parallel gzip
compression.</p>

<p>The following files need to go into the cpio archive:</p>

<h3 id="minitrd-go-userland">minitrd Go userland</h3>

<p>The <code>minitrd</code> binary is copied into the cpio archive as <code>/init</code> and will be run
by the kernel after extracting the archive.</p>

<p>Like the rest of distri, <code>minitrd</code> is built statically without cgo, which means
it can be copied as-is into the cpio archive.</p>

<h3 id="linux-kernel-modules">Linux kernel modules</h3>

<p>Aside from the <code>modules.alias</code> and <code>modules.dep</code> metadata files, the kernel
modules themselves reside in e.g. <code>/lib/modules/5.4.6/kernel</code> and need to be
copied into the cpio archive.</p>

<p>Copying all modules results in a ≈80 MiB archive, so it is common to only copy
modules that are relevant to the initramfs’s features. This reduces archive size
to ≈24 MiB.</p>

<p>The filtering relies on hard-coded patterns and module names. For example, disk
encryption related modules are all kernel modules underneath <code>kernel/crypto</code>,
plus <code>kernel/drivers/md/dm-crypt.ko</code>.</p>

<p>When generating a host-only initramfs (works on precisely the computer that
generated it), some initramfs generators look at the currently loaded modules
and just copy those.</p>

<h3 id="console-fonts-and-keymaps">Console Fonts and Keymaps</h3>

<p>The <code>kbd</code> package’s <a href="https://manpages.debian.org/setfont.8"><code>setfont(8)</code></a>
 and <a href="https://manpages.debian.org/loadkeys.1"><code>loadkeys(1)</code></a>
 programs load console fonts and keymaps from
<code>/usr/share/consolefonts</code> and <code>/usr/share/keymaps</code>, respectively.</p>

<p>Hence, these directories need to be copied into the cpio archive. Depending on
whether the initramfs should be generic (work on many computers) or host-only
(works on precisely the computer/settings that generated it), the entire
directories are copied, or only the required font/keymap.</p>

<h3 id="cryptsetup-setfont-loadkeys">cryptsetup, setfont, loadkeys</h3>

<p>These programs are (currently) required because <code>minitrd</code> does not implement
their functionality.</p>

<p>As they are dynamically linked, not only the programs themselves need to be
copied, but also the ELF dynamic linking loader (path stored in the <code>.interp</code>
ELF section) and any ELF library dependencies.</p>

<p>For example, <code>cryptsetup</code> in distri declares the ELF interpreter
<code>/ro/glibc-amd64-2.27-3/out/lib/ld-linux-x86-64.so.2</code> and declares dependencies
on shared libraries <code>libcryptsetup.so.12</code>, <code>libblkid.so.1</code> and others. Luckily,
in distri, packages contain a <code>lib</code> subdirectory containing symbolic links to
the resolved shared library paths (hermetic packaging), so it is sufficient to
mirror the lib directory into the cpio archive, recursing into shared library
dependencies of shared libraries.</p>

<p><code>cryptsetup</code> also requires the GCC runtime library <code>libgcc_s.so.1</code> to be present
at runtime, and will abort with an error message about not being able to call
<a href="https://manpages.debian.org/pthread_cancel.3"><code>pthread_cancel(3)</code></a>
 if it is unavailable.</p>

<h3 id="time-zone-data">time zone data</h3>

<p>To print log messages in the correct time zone, we copy <code>/etc/localtime</code> from
the host into the cpio archive.</p>

<h2 id="minitrd-outside-of-distri">minitrd outside of distri?</h2>

<p>I currently have no desire to make <code>minitrd</code> available outside of
<a href="https://distr1.org/">distri</a>. While the technical challenges (such as extending
the generator to not rely on distri’s hermetic packages) are surmountable, I
don’t want to support people’s initramfs remotely.</p>

<p>Also, I think that people’s efforts should in general be spent on rallying
behind <code>dracut</code> and making it work faster, thereby benefiting all Linux
distributions that use dracut (increasingly more). With <code>minitrd</code>, I have
demonstrated that significant speed-ups are achievable.</p>

<h2 id="conclusion">Conclusion</h2>

<p>It was interesting to dive into how an initramfs really works. I had been
working with the concept for many years, from small tasks such as “debug why the
encrypted root file system is not unlocked” to more complicated tasks such as
“set up a root file system on DRBD for a high-availability setup”. But even with
that sort of experience, I didn’t know all the details, until I was forced to
implement every little thing.</p>

<p>As I suspected going into this exercise, <code>dracut</code> is much slower than it needs
to be. Re-implementing its generation stage in a modern language instead of
shell helps a lot.</p>

<p>Of course, my <code>minitrd</code> does a bit less than <code>dracut</code>, but not drastically
so. The overall architecture is the same.</p>

<p>I hope my effort helps with two things:</p>

<ol>
<li><p>As a teaching implementation: instead of wading through the various
components that make up a modern initramfs (udev, systemd, various shell
scripts, …), people can learn about how an initramfs works in a single place.</p></li>

<li><p>I hope the significant time difference motivates people to improve <code>dracut</code>.</p></li>
</ol>

<h2 id="appendix-qemu-development-environment">Appendix: qemu development environment</h2>

<p>Before writing any Go code, I did some manual prototyping. Learning how other
people prototype is often immensely useful to me, so I’m sharing my notes here.</p>

<p>First, I copied all kernel modules and a statically built busybox binary:</p>

<pre><code>% mkdir -p lib/modules/5.4.6
% cp -Lr /ro/lib/modules/5.4.6/* lib/modules/5.4.6/
% cp ~/busybox-1.22.0-amd64/busybox sh
</code></pre>

<p>To generate an initramfs from the current directory, I used:</p>

<pre><code>% find . | cpio -o -H newc | pigz &gt; /tmp/initrd
</code></pre>

<p>In distri’s <code>Makefile</code>, I append these flags to the <code>QEMU</code> invocation:</p>

<pre><code>-kernel /tmp/kernel \
-initrd /tmp/initrd \
-append &quot;root=/dev/mapper/cryptroot1 rdinit=/sh ro console=ttyS0,115200 rd.luks=1 rd.luks.uuid=63051f8a-54b9-4996-b94f-3cf105af2900 rd.luks.name=63051f8a-54b9-4996-b94f-3cf105af2900=cryptroot1 rd.vconsole.keymap=neo rd.vconsole.font=latarcyrheb-sun32 init=/init systemd.setenv=PATH=/bin rw vga=836&quot;
</code></pre>

<p>The <code>vga=</code> mode parameter is required for loading font <code>latarcyrheb-sun32</code>.</p>

<p>Once in the <code>busybox</code> shell, I manually prepared the required mount points and
kernel modules:</p>

<pre><code>ln -s sh mount
ln -s sh lsmod
mkdir /proc /sys /run /mnt
mount -t proc proc /proc
mount -t sysfs sys /sys
mount -t devtmpfs dev /dev
modprobe virtio_pci
modprobe virtio_scsi
</code></pre>

<p>As a next step, I copied <code>cryptsetup</code> and dependencies into the initramfs directory:</p>

<pre><code>% for f in /ro/cryptsetup-amd64-2.0.4-6/lib/*; do full=$(readlink -f $f); rel=$(echo $full | sed 's,^/,,g'); mkdir -p $(dirname $rel); install $full $rel; done
% ln -s ld-2.27.so ro/glibc-amd64-2.27-3/out/lib/ld-linux-x86-64.so.2
% cp /ro/glibc-amd64-2.27-3/out/lib/ld-2.27.so ro/glibc-amd64-2.27-3/out/lib/ld-2.27.so
% cp -r /ro/cryptsetup-amd64-2.0.4-6/lib ro/cryptsetup-amd64-2.0.4-6/
% mkdir -p ro/gcc-libs-amd64-8.2.0-3/out/lib64/
% cp /ro/gcc-libs-amd64-8.2.0-3/out/lib64/libgcc_s.so.1 ro/gcc-libs-amd64-8.2.0-3/out/lib64/libgcc_s.so.1
% ln -s /ro/gcc-libs-amd64-8.2.0-3/out/lib64/libgcc_s.so.1 ro/cryptsetup-amd64-2.0.4-6/lib
% cp -r /ro/lvm2-amd64-2.03.00-6/lib ro/lvm2-amd64-2.03.00-6/
</code></pre>

<p>In <code>busybox</code>, I used the following commands to unlock the root file system:</p>

<pre><code>modprobe algif_skcipher
./cryptsetup luksOpen /dev/sda4 cryptroot1
mount /dev/dm-0 /mnt
</code></pre>
]]></content>
  </entry>
</feed>
