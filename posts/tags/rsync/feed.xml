<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael Stapelbergs Website: posts tagged rsync</title>
  <link href="https://michael.stapelberg.ch/posts/tags/rsync/feed.xml" rel="self"/>
  <link href="https://michael.stapelberg.ch/posts/tags/rsync/"/>


  <id>https://michael.stapelberg.ch/posts/tags/rsync/</id>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[rsync, article 3: How does rsync work?]]></title>
    <link href="https://michael.stapelberg.ch/posts/2022-07-02-rsync-how-does-it-work/"/>
    <id>https://michael.stapelberg.ch/posts/2022-07-02-rsync-how-does-it-work/</id>
    <published>2022-07-02T14:30:10+02:00</published>
    <content type="html"><![CDATA[<p>This post is the third article in a series of blog posts about rsync, <a href="../2022-06-18-rsync-overview/">see the
Series Overview</a>.</p>
<p>With rsync up and running, it’s time to take a peek under the hood of rsync to
better understand how it works.</p>
<h2 id="howdoesrsyncwork">How does rsync work?</h2>
<p>When talking about the rsync protocol, we need to distinguish between:</p>
<ul>
<li>protocol-level roles: “sender” and “receiver”</li>
<li>TCP roles: “client” and “server”</li>
</ul>
<p>All roles can be mixed and matched: both rsync clients (or servers!) can
either send or receive.</p>
<p>Now that you know the terminology, let’s take a high-level look at the rsync
protocol. We’ll look at protocol version 27, which is older but simpler, and
which is the most widely supported protocol version, implemented by <code>openrsync</code>
and other third-party implementations:</p>
<p><img src="2022-05-29-rsync-logical-view.svg" alt="rsync architecture"></p>
<p>The rsync protocol can be divided into two phases:</p>
<ol>
<li>
<p>In the first phase, the sender walks the local file tree to generate and send
the <em>file list</em> to the receiver. The file list must be transferred in full,
because both sides sort it by filename (later rsync protocol versions
eliminate this synchronous sorting step).</p>
</li>
<li>
<p>In the second phase, concurrently:</p>
<ul>
<li>The receiver compares and requests each file in the file list. The
receiver requests the full file when it didn’t exist on disk yet, or it
will send checksums for the rsync <em>hash search</em> algorithm when the file
already existed.</li>
<li>The receiver receives file data from the sender. The sender answers the
requests with just enough data to reconstruct the current file contents
based on what’s already on the receiver.</li>
</ul>
</li>
</ol>
<p>The architecture makes it easy to implement the second phase in 3 separate
processes, each of which sending to the network as fast as possible using heavy
pipelining. This results in utilizing the available hardware resources (I/O,
CPU, network) on sender and receiver to the fullest.</p>
<h3 id="observing-rsyncs-transfer-phases">Observing rsync’s transfer phases</h3>
<p>When starting an rsync transfer, looking at the resource usage of both
machines allows us to confirm our understanding of the rsync architecture, and
to pin-point any bottlenecks:</p>















<a href="https://michael.stapelberg.ch/posts/2022-07-02-rsync-how-does-it-work/2022-05-29-rsync-exo1-backup.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2022-07-02-rsync-how-does-it-work/2022-05-29-rsync-exo1-backup_hua2f50278895cfbee4dc18c7ea60b6d4a_2093260_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2022-07-02-rsync-how-does-it-work/2022-05-29-rsync-exo1-backup_hua2f50278895cfbee4dc18c7ea60b6d4a_2093260_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2022-07-02-rsync-how-does-it-work/2022-05-29-rsync-exo1-backup_hua2f50278895cfbee4dc18c7ea60b6d4a_2093260_600x0_resize_q75_box.jpg"
  
  width="600"
  height="331"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<ol>
<li>phase: The rsync sender needs 17 seconds to walk the file system and send
the file list. The rsync receiver reads from the network and writes into RAM
during that time.
<ul>
<li>This phase is random I/O (querying file system metadata) for the sender.</li>
</ul>
</li>
<li>phase: Afterwards, the rsync sender reads from disk and sends to the
network. The rsync receiver receives from the network and writes to disk.
<ul>
<li>The receiver does roughly the same amount of random I/O as the sender did
in phase 1, as it needs to create directories and request missing files.</li>
<li>The sender does sequential disk reads and possibly checksum calculation, if
the file(s) existed on the receiver side.</li>
</ul>
</li>
</ol>
<p>(Again, the above was captured using rsync protocol version 27, later rsync
protocol versions don’t synchronize after completing phase 1, but instead
interleave the phases more.)</p>
<h3 id="rsync-hash-search">rsync hash search</h3>
<p>Up until now, we have described the rsync protocol at a high level. Let’s zoom
into the hash search step, which is what many people might associate with the
term “rsync algorithm”.</p>
<p>When a file exists on both sides, rsync sender and receiver, the receiver first
divides the file into blocks. The block size is a rounded square root of the
file’s length. The receiver then sends the checksums of all blocks to the
sender. In response, the sender finds matching blocks in the file and sends only
the data needed to reconstruct the file on the receiver side.</p>
<p>Specifically, the sender goes through <strong>each byte</strong> of the file and tries to
match existing receiver content. To make this less computationally expensive,
rsync combines two checksums.</p>
<p>rsync first calculates what it calls the
<a href="https://github.com/WayneD/rsync/blob/0ac7ebceef70417355f25daf9e2fd94e84c49749/checksum.c#L182-L203">“sum1”</a>,
or “fast signature”. This is a small checksum (two <code>uint16</code>) that can be
calculated with minimal effort for a rolling window over the file data. tridge
rsync comes with <a href="https://github.com/WayneD/rsync/blob/v3.2.4/simd-checksum-x86_64.cpp">SIMD
implementations</a>
to further speed this up where possible.</p>
<p>Only if the sum1 matches will
<a href="https://github.com/WayneD/rsync/blob/0ac7ebceef70417355f25daf9e2fd94e84c49749/checksum.c#L205-L300">“sum2”</a>
(or “strong signature”) be calculated, a 16-byte MD4 hash. Newer protocol
versions allow negotiating the hash algorithm and support the much faster xxhash
algorithms.</p>
<p>If sum2 matches, the block is considered equal on both sides.</p>
<p>Hence, the best case for rsync is when a file has either not changed at all, or
shares as many full blocks of content as possible with the old contents.</p>
<h2 id="changing-data-sets">Changing data sets</h2>
<p>Now that we know how rsync works on the file level, let’s take a step back to
the data set level.</p>
<p>The easiest situation is when you transfer a data set that is not currently
changing. But what happens when the data set changes while your rsync transfer
is running? Here are two examples.</p>
<p><a href="https://github.com/Debian/debiman">debiman</a>, the manpage generator powering
<a href="https://manpages.debian.org/">manpages.debian.org</a> is running on a Debian VM on
which an rsync job periodically transfers the static manpage archive to
different static web servers across the world. The rsync job and debiman are
not sequenced in any way. Instead, debiman is careful to only ever <a href="https://github.com/Debian/debiman/blob/79b8abe8573daaaf15e4cf40e85daf309e00d454/internal/write/atomically.go#L23">atomically
swap out
files</a>
in its output directory, or add new files before it swaps out an updated index.</p>
<p>The second example, the <a href="https://en.wikipedia.org/wiki/PostgreSQL">PostgreSQL</a>
database management system, is the opposite situation: instead of having full
control over how files are laid out, here I don’t have control over how files
are written (this generalizes to any situation where the model of only ever
replacing files is not feasible). The data files which my Postgres installation
keeps on disk are not great to synchronize using rsync: they are large and
frequently change. Instead, I now exempt them from my rsync transfer and use <a href="https://manpages.debian.org/pg_dump.1"><code>pg_dump(1)</code></a>
 to create a snapshot of my databases instead.</p>
<p>To confirm rsync’s behavior regarding changing data sets in detail, I <a href="#confirmation-hack">modified
rsync to ask for confirmation</a> between generating the file
list and transferring the files. Here’s what I found:</p>
<ul>
<li>If files are added after rsync has transferred the file list, the new files
will just not be part of the transfer.</li>
<li>If a file vanishes between generating the file list and transfering the file,
rsync exits with status code 24, which <a href="https://manpages.debian.org/bullseye/rsync/rsync.1.en.html#EXIT_VALUES">its manpage documents as “Partial
transfer due to vanished source
files”</a>. My
<code>rsyncprom</code> monitoring wrapper <a href="https://github.com/stapelberg/rsyncprom/commit/bbf82934093b938d054d460a7f9764234d30bc17">offers a flag to treat exit code 24 like exit
code
0</a>,
because depending on the data set, vanishing files are expected.</li>
<li>If a file’s contents change (no matter whether the file grows, shrinks, or is
modified in-place) between generating the file list and the actual file
transfer, that’s not a problem — rsync will transfer the file contents as it
reads them once the transfer starts. Note that this might be an inconsistent
view of the data, depending on the application.
<ul>
<li>Ideally, don’t ever modify files within a data set that is rsynced. Instead,
atomically move complete files into the data set.</li>
</ul>
</li>
</ul>
<p>Another way of phrasing the above is that data consistency is not something that
rsync can in any way guarantee. It’s up to you to either live with the
inconsistency (often a good-enough strategy!), or to add an extra step that
ensures the data set you feed to rsync is consistent.</p>
<h2 id="next-up">Next up</h2>
<p>The fourth article in this series is rsync, article 4: My own rsync
implementation (To be published.)</p>
<h2 id="confirmation-hack">Appendix A: rsync confirmation hack</h2>
<p>For verifying rsync’s behavior with regards to changing data sets, I checked
out the following version:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>% git clone https://github.com/WayneD/rsync/ rsync-changing-data-sets
</span></span><span style="display:flex;"><span>% <span style="color:#007020">cd</span> rsync-changing-data-sets
</span></span><span style="display:flex;"><span>% git checkout v3.2.4
</span></span><span style="display:flex;"><span>% ./configure
</span></span><span style="display:flex;"><span>% make
</span></span></code></pre></div><p>Then, I modified <code>flist.c</code> to add a confirmation step between sending the file
list and doing the actual file transfers:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">diff --git i/flist.c w/flist.c
</span></span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold">index 1ba306bc..98981f34 100644
</span></span></span><span style="display:flex;"><span><span style="color:#000080;font-weight:bold"></span><span style="color:#a00000">--- i/flist.c
</span></span></span><span style="display:flex;"><span><span style="color:#a00000"></span><span style="color:#00a000">+++ w/flist.c
</span></span></span><span style="display:flex;"><span><span style="color:#00a000"></span><span style="color:#800080;font-weight:bold">@@ -20,6 +20,8 @@
</span></span></span><span style="display:flex;"><span><span style="color:#800080;font-weight:bold"></span>  * with this program; if not, visit the http://fsf.org website.
</span></span><span style="display:flex;"><span>  */
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#00a000">+#include &lt;stdio.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+
</span></span></span><span style="display:flex;"><span><span style="color:#00a000"></span> #include &#34;rsync.h&#34;
</span></span><span style="display:flex;"><span> #include &#34;ifuncs.h&#34;
</span></span><span style="display:flex;"><span> #include &#34;rounding.h&#34;
</span></span><span style="display:flex;"><span><span style="color:#800080;font-weight:bold">@@ -2516,6 +2518,17 @@ struct file_list *send_file_list(int f, int argc, char *argv[])
</span></span></span><span style="display:flex;"><span><span style="color:#800080;font-weight:bold"></span> 	if (DEBUG_GTE(FLIST, 2))
</span></span><span style="display:flex;"><span> 		rprintf(FINFO, &#34;send_file_list done\n&#34;);
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#00a000">+	char *line = NULL;
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	size_t llen = 0;
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	ssize_t nread;
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	printf(&#34;file list sent. enter &#39;yes&#39; to continue: &#34;);
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	while ((nread = getline(&amp;line, &amp;llen, stdin)) != -1) {
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	  if (nread == strlen(&#34;yes\n&#34;) &amp;&amp; strcasecmp(line, &#34;yes\n&#34;) == 0) {
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	    break;
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	  }
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	  printf(&#34;enter &#39;yes&#39; to continue: &#34;);
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+	}
</span></span></span><span style="display:flex;"><span><span style="color:#00a000">+
</span></span></span><span style="display:flex;"><span><span style="color:#00a000"></span> 	if (inc_recurse) {
</span></span><span style="display:flex;"><span> 		send_dir_depth = 1;
</span></span><span style="display:flex;"><span> 		add_dirs_to_tree(-1, flist, stats.num_dirs);
</span></span></code></pre></div><p>My rsync invocation is:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>./rsync -av --debug<span style="color:#666">=</span>all4 --protocol<span style="color:#666">=</span><span style="color:#40a070">27</span> ~/i3/src /tmp/DEST/
</span></span></code></pre></div><p>It’s necessary to use an older protocol version to make rsync generate a full
file list before starting the transfer. Later protocol versions interleave these
parts of the protocol.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[rsync, article 2: Surroundings]]></title>
    <link href="https://michael.stapelberg.ch/posts/2022-07-02-rsync-surroundings/"/>
    <id>https://michael.stapelberg.ch/posts/2022-07-02-rsync-surroundings/</id>
    <published>2022-07-02T14:30:00+02:00</published>
    <content type="html"><![CDATA[<p>This post is the second article in a series of blog posts about rsync, <a href="../2022-06-18-rsync-overview/">see the
Series Overview</a>.</p>
<p>Now that we know what to use rsync for, how can we best integrate rsync into
monitoring and alerting, and on which operating systems does it work?</p>
<h2 id="monitoring-and-alerting-for-rsync-jobs-using-prometheus">Monitoring and alerting for rsync jobs using Prometheus</h2>
<p>Once you have one or two important <code>rsync</code> jobs, it might make sense to alert
when your job has not completed as expected.</p>
<p>I’m using <a href="https://prometheus.io/">Prometheus</a> for all my monitoring and alerting.</p>
<p>Because Prometheus <em>pulls</em> metrics from its (typically always-running) targets,
we need an extra component: the <a href="https://prometheus.io/docs/practices/pushing/">Prometheus
Pushgateway</a>. The Pushgateway
stores metrics pushed by short-lived jobs like <code>rsync</code> transfers and makes them
available to subsequent Prometheus pulls.</p>
<p>To integrate <code>rsync</code> with the Prometheus Pushgateway, I wrote
<a href="https://github.com/stapelberg/rsyncprom"><code>rsyncprom</code></a>, a small tool that wraps
<code>rsync</code>, or parses rsync output supplied by you. Once <code>rsync</code> completes,
<code>rsyncprom</code> pushes the rsync exit code and parsed statistics about the transfer
to your Pushgateway.</p>
<h3 id="prometheus-server-side-setup">Prometheus server-side setup</h3>
<p>First, I set up the Prometheus Pushgateway (via Docker and systemd) on my
server.</p>
<p>Then, in my <code>prometheus.conf</code> file, I instruct Prometheus to pull data from my
Pushgateway:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># prometheus.conf</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">rule_files</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span>- backups.rules.yml<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">scrape_configs</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#60a0b0;font-style:italic"># […]</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span>- <span style="color:#062873;font-weight:bold">job_name</span>:<span style="color:#bbb"> </span>pushgateway<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">honor_labels</span>:<span style="color:#bbb"> </span><span style="color:#007020;font-weight:bold">true</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">static_configs</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span>- <span style="color:#062873;font-weight:bold">targets</span>:<span style="color:#bbb"> </span>[<span style="color:#4070a0">&#39;pushgateway:9091&#39;</span>]<span style="color:#bbb">
</span></span></span></code></pre></div><p>Finally, in <code>backups.rules.yml</code>, I configure an alert on the time series <code>rsync_exit_code</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># backups.rules.yml</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">groups</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span>- <span style="color:#062873;font-weight:bold">name</span>:<span style="color:#bbb"> </span>backups.rules<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">rules</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span>- <span style="color:#062873;font-weight:bold">alert</span>:<span style="color:#bbb"> </span>RsyncFailing<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">expr</span>:<span style="color:#bbb"> </span>rsync_exit_code{job=&#34;rsync&#34;} &gt; 0<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">for</span>:<span style="color:#bbb"> </span>1m<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">labels</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">      </span><span style="color:#062873;font-weight:bold">job</span>:<span style="color:#bbb"> </span>rsync<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">annotations</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">      </span><span style="color:#062873;font-weight:bold">description</span>:<span style="color:#bbb"> </span>rsync {{ $labels.instance }} is failing<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">      </span><span style="color:#062873;font-weight:bold">summary</span>:<span style="color:#bbb"> </span>rsync {{ $labels.instance }} is failing<span style="color:#bbb">
</span></span></span></code></pre></div><p>This alert will fire any time an rsync job monitored via <code>rsyncprom</code> exits with
a non-zero exit code.</p>
<h3 id="rsync-client-side-setup">rsync client-side setup</h3>
<p>On each machine that runs <code>rsync</code> jobs I want to monitor, I first install
<code>rsyncprom</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>go install github.com/stapelberg/rsyncprom/cmd/rsync-prom@latest
</span></span></code></pre></div><p>Then, I just wrap <code>rsync</code> transfers where it’s most convenient, for example in
my <a href="https://manpages.debian.org/crontab.5"><code>crontab(5)</code></a>
:</p>
<pre tabindex="0"><code class="language-crontab" data-lang="crontab"># crontab -e
9 9 * * * /home/michael/go/bin/rsync-prom --job=&#34;cron&#34; --instance=&#34;gphotos-sync@midna&#34; -- /home/michael/gphotos-sync/sync.sh
</code></pre><p>The same wrapper technique works in <a href="https://github.com/stapelberg/rsyncprom#setup-example-systemd">shell scripts or systemd service
files</a>.</p>
<p>You can also provide <code>rsync</code> output <a href="https://github.com/stapelberg/zkj-nas-tools/blob/02d46d718df60c413844d9218f6dd702ad94e5f1/dornroeschen/sshutil.go#L134-L139">from Go
code</a>
(this example runs <code>rsync</code> via SSH).</p>
<h3 id="monitoring-architecture">Monitoring architecture</h3>
<p>Here’s how the whole setup looks like architecturally:</p>
<p><img src="2022-05-29-rsync-prom-architecture.svg" alt="rsync-prom architecture"></p>
<p>The rsync scheduler runs on a Raspberry Pi running
<a href="https://gokrazy.org/">gokrazy</a>. The scheduler invokes the <code>rsync</code> job to back
up <em>websrv.zekjur.net</em> via SSH and sends the output to Prometheus, which is
running on a (different) server at an ISP.</p>
<h3 id="monitoring-dashboard">Monitoring dashboard</h3>
<p>The grafana dashboard looks like this in action:</p>















<a href="https://michael.stapelberg.ch/posts/2022-07-02-rsync-surroundings/2022-06-12-rsync-grafana-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2022-07-02-rsync-surroundings/2022-06-12-rsync-grafana-featured_hu49255cbd0611171ac9ea093d82565708_603964_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2022-07-02-rsync-surroundings/2022-06-12-rsync-grafana-featured_hu49255cbd0611171ac9ea093d82565708_603964_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2022-07-02-rsync-surroundings/2022-06-12-rsync-grafana-featured_hu49255cbd0611171ac9ea093d82565708_603964_600x0_resize_q75_box.jpg"
  alt="rsync grafana dashboard" title="rsync grafana dashboard"
  width="600"
  height="469"
  style="border: 1px solid #000"
  
  loading="lazy"></a>



<ul>
<li>The top left table shows the most recent rsync exit code, green means 0 (success).</li>
<li>The top right graph shows rsync runtime (wall-clock time) over time. Long
runtime can have any number of bottlenecks as the reason: network connections,
storage devices, slow CPUs.</li>
<li>The bottom left graph shows rsync dataset size over time. This allows you to
quickly pinpoint transfers that are filling your disk up.</li>
<li>The bottom right graph shows transferred bytes per rsync over time. The higher
the value, the higher the amount of change in your data set between
synchronization runs.</li>
</ul>
<h2 id="rsync-operating-system-availability">rsync operating system availability</h2>
<p>Now that we have learnt about a couple of typical use-cases, where can you use
<code>rsync</code> to implement these use-cases? The answer is: in most environments, as
<code>rsync</code> is widely available on different Linux and BSD versions.</p>
<p>Macs come with <code>rsync</code> available by default (but it’s an old, patched version),
and OpenBSD comes with a BSD-licensed implementation called
<a href="https://www.openrsync.org/">openrsync</a> by default.</p>
<p>On Windows, you can use the <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux">Windows Subsystem for
Linux</a>.</p>
<table>
<thead>
<tr>
<th>Operating System</th>
<th>Implementation</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td>FreeBSD 13.1 (ports)</td>
<td>tridge</td>
<td><a href="https://www.freebsd.org/cgi/man.cgi?query=rsync&amp;manpath=FreeBSD+13.1-RELEASE+and+Ports">3.2.3</a></td>
</tr>
<tr>
<td>OpenBSD 7.1</td>
<td>openrsync</td>
<td>(7.1)</td>
</tr>
<tr>
<td>OpenBSD 7.1 (ports)</td>
<td>tridge</td>
<td><a href="https://openports.se/net/rsync">3.2.4</a></td>
</tr>
<tr>
<td>NetBSD 9.2 (pkgsrc)</td>
<td>tridge</td>
<td><a href="https://ftp.netbsd.org/pub/pkgsrc/current/pkgsrc/net/rsync/index.html">3.2.4</a></td>
</tr>
<tr>
<td>Linux</td>
<td>tridge</td>
<td><a href="https://repology.org/project/rsync/versions">repology</a></td>
</tr>
<tr>
<td>macOS</td>
<td>tridge</td>
<td><a href="https://www.unix.com/man-page/osx/1/rsync/">2.6.9</a></td>
</tr>
</tbody>
</table>
<h2 id="next-up">Next Up</h2>
<p>The third article in this series is <a href="../2022-07-02-rsync-how-does-it-work/">rsync, article 3: How does rsync
work?</a>. With rsync up and running, it’s
time to take a peek under the hood of rsync to better understand how it works.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[rsync, article 1: Scenarios]]></title>
    <link href="https://michael.stapelberg.ch/posts/2022-06-18-rsync-article-1-scenarios/"/>
    <id>https://michael.stapelberg.ch/posts/2022-06-18-rsync-article-1-scenarios/</id>
    <published>2022-06-18T15:04:00+02:00</published>
    <content type="html"><![CDATA[<p>This post is the first article in a series of blog posts about rsync, <a href="../2022-06-18-rsync-overview/">see the
Series Overview</a>.</p>
<p>To motivate why it makes sense to look at rsync, I present three scenarios for
which I have come to appreciate rsync: <a href="#dokuwiki-transfers-using-rsync">DokuWiki
transfers</a>, <a href="#software-deployment-using-rsync">Software
deployment</a> and
<a href="#backups-using-rsync">Backups</a>.</p>
<h2 id="dokuwiki-transfers-using-rsync">Scenario: DokuWiki transfers using rsync</h2>
<p>Recently, I set up a couple of tools for a website that is built on DokuWiki,
such as a dead link checker and a statistics program. To avoid overloading the
live website (and possibly causing spurious requests that interfere with
statistics), I decided it would be best to run a separate copy of the DokuWiki
installation locally. This requires synchronizing:</p>
<ol>
<li>The PHP source code files of DokuWiki itself (including plugins and configuration)</li>
<li>One text file per wiki page, and all uploaded media files</li>
</ol>
<p>A DokuWiki installation is exactly the kind of file tree that <a href="https://manpages.debian.org/scp.1"><code>scp(1)</code></a>
 cannot efficiently transfer (too many small files),
but <a href="https://manpages.debian.org/rsync.1"><code>rsync(1)</code></a>
 can! The <code>rsync</code> transfer only takes a few seconds, no matter if
it’s a full download (can be simpler for batch jobs) or an incremental
synchronization (more efficient for regular synchronizations like backups).</p>
<h2 id="software-deployment-using-rsync">Scenario: Software deployment using rsync</h2>
<p>For smaller projects where I don’t publish new versions through Docker, I
instead use a shell script to transfer and run my software on the server.</p>
<p><code>rsync</code> is a great fit here, as it transfers many small files (static assets and
templates) efficiently, only transfers the binaries that actually changed, and
doesn’t mind if the binary file it’s uploading is currently running (contrary to
<a href="https://manpages.debian.org/scp.1"><code>scp(1)</code></a>
, for example).</p>
<p>To illustrate how such a script could look like, here’s my push script for
<a href="https://codesearch.debian.net/">Debian Code Search</a>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#007020">#!/bin/zsh
</span></span></span><span style="display:flex;"><span><span style="color:#007020"></span><span style="color:#007020">set</span> -ex
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Asynchronously transfer assets while compiling:</span>
</span></span><span style="display:flex;"><span><span style="color:#666">(</span>
</span></span><span style="display:flex;"><span>    ssh root@dcs <span style="color:#4070a0">&#39;for i in $(seq 0 5); do mkdir -p /srv/dcs/shard${i}/{src,idx}; done&#39;</span>
</span></span><span style="display:flex;"><span>    ssh root@dcs <span style="color:#4070a0">&#34;adduser --disabled-password --gecos &#39;Debian Code Search&#39; dcs || true&#34;</span>
</span></span><span style="display:flex;"><span>    rsync -r systemd/ root@dcs:/etc/systemd/system/ &amp;
</span></span><span style="display:flex;"><span>    rsync -r cmd/dcs-web/templates/ root@dcs:/srv/dcs/templates/ &amp;
</span></span><span style="display:flex;"><span>    rsync -r static/ root@dcs:/srv/dcs/static/ &amp;
</span></span><span style="display:flex;"><span>    <span style="color:#007020">wait</span>
</span></span><span style="display:flex;"><span><span style="color:#666">)</span> &amp;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Compile a new Debian Code Search version:</span>
</span></span><span style="display:flex;"><span><span style="color:#bb60d5">tmp</span><span style="color:#666">=</span><span style="color:#007020;font-weight:bold">$(</span>mktemp -d<span style="color:#007020;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>mkdir <span style="color:#bb60d5">$tmp</span>/bin
</span></span><span style="display:flex;"><span><span style="color:#bb60d5">GOBIN</span><span style="color:#666">=</span><span style="color:#bb60d5">$tmp</span>/bin <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span><span style="color:#bb60d5">GOAMD64</span><span style="color:#666">=</span>v3 <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  go install <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -ldflags <span style="color:#4070a0">&#39;-X github.com/Debian/dcs/cmd/dcs-web/common.Version=$version&#39;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  github.com/Debian/dcs/cmd/...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Transfer the Debian Code Search binaries:</span>
</span></span><span style="display:flex;"><span>rsync <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  <span style="color:#bb60d5">$tmp</span>/bin/dcs-<span style="color:#666">{</span>web,source-backend,package-importer,compute-ranking,feeder<span style="color:#666">}</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  <span style="color:#bb60d5">$tmp</span>/bin/dcs <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  root@dcs:/srv/dcs/bin/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Wait for the asynchronous asset transfer to complete:</span>
</span></span><span style="display:flex;"><span><span style="color:#007020">wait</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Restart Debian Code Search on the server:</span>
</span></span><span style="display:flex;"><span><span style="color:#bb60d5">UNITS</span><span style="color:#666">=(</span>dcs-package-importer.service dcs-source-backend.service dcs-compute-ranking.timer dcs-web.service<span style="color:#666">)</span>
</span></span><span style="display:flex;"><span>ssh root@dcs systemctl daemon-reload <span style="color:#4070a0;font-weight:bold">\&amp;\&amp;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  systemctl <span style="color:#007020">enable</span> <span style="color:#70a0d0">${</span><span style="color:#bb60d5">UNITS</span><span style="color:#70a0d0">}</span> <span style="color:#4070a0;font-weight:bold">\;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  systemctl reset-failed <span style="color:#70a0d0">${</span><span style="color:#bb60d5">UNITS</span><span style="color:#70a0d0">}</span> <span style="color:#4070a0;font-weight:bold">\;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  systemctl restart <span style="color:#70a0d0">${</span><span style="color:#bb60d5">UNITS</span><span style="color:#70a0d0">}</span> <span style="color:#4070a0;font-weight:bold">\;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  systemctl reload nginx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rm -rf <span style="color:#4070a0">&#34;</span><span style="color:#70a0d0">${</span><span style="color:#bb60d5">tmp</span>?<span style="color:#70a0d0">}</span><span style="color:#4070a0">&#34;</span>
</span></span></code></pre></div><h2 id="backups-using-rsync">Scenario: Backups using rsync</h2>
<p>The first backup system I used was
<a href="https://en.wikipedia.org/wiki/Bacula">bacula</a>, which Wikipedia describes as an
enterprise-level backup system. That certainly matches my impression, both in
positive and negative ways: while bacula is very powerful, some seemingly common
operations turn out quite complicated in bacula. Restoring a single file or
directory tree from a backup was always more effort than I thought
reasonable. For some reason, I often had to restore backup catalogs before I was
able to access the backup contents (I don’t remember the exact details).</p>
<p>When moving apartment last time, I used the opportunity to change my backup
strategy. Instead of using complicated custom software with its own volume file
format (like bacula), I wanted backed-up files to be usable on the file system
level with standard tools like <code>rm</code>, <code>ls</code>, <code>cp</code>, etc.</p>
<p>Working with files in a regular file system makes day-to-day usage easier, and
also ensures that when my network storage hardware dies, I can just plug the
hard disk into any PC, boot a Linux live system, and recover my data.</p>
<p>To back up machines onto my <a href="/posts/2019-10-23-nas/">network storage PC</a>’s file
system, I ended up with a <a href="https://github.com/stapelberg/zkj-nas-tools/blob/85e445a284c89590d595a52e16cb6dd652b1388e/dornroeschen/backup-remote.pl">hand-written rsync wrapper
script</a>
that copies the full file system of each machine into dated directory trees:</p>
<pre tabindex="0"><code>storage2# ls -l backup/midna/2022-05-27
bin   boot  etc  home  lib  lib64  media  opt
proc  root  run  sbin  sys  tmp    usr    var

storage2# ls -l backup/midna/2022-05-27/home/michael/configfiles/zshrc
-rw-r--r--. 7 1000 1000 14554 May  9 19:37 backup/midna/2022-05-27/home/michael/configfiles/zshrc
</code></pre><p>To revert my <code>~/.zshrc</code> to an older version, I can <a href="https://manpages.debian.org/scp.1"><code>scp(1)</code></a>
 the file:</p>
<pre tabindex="0"><code>midna% scp storage2:/srv/backup/midna/2022-05-27/home/michael/configfiles/zshrc ~/configfiles/zshrc
</code></pre><p>To compare a whole older source tree, I can mount it using <a href="https://manpages.debian.org/sshfs.1"><code>sshfs(1)</code></a>
:</p>
<pre tabindex="0"><code>midna% mkdir /tmp/2022-05-27-i3
midna% sshfs storage2:/srv/backup/midna/2022-05-27/$HOME/i3 /tmp/2022-05-27-i3
midna% diff -ur /tmp/2022-05-27-i3 ~/i3/
</code></pre><h3 id="incremental-backups">Incremental backups</h3>
<p>Of course, the idea is not to transfer the full machine contents every day, as
that would quickly fill up my network storage’s 16 TB disk! Instead, we can use
rsync’s <code>--link-dest</code> option to elegantly deduplicate files using file system
hard links:</p>
<pre tabindex="0"><code>backup/midna/2022-05-26
backup/midna/2022-05-27 # rsync --link-dest=2022-05-26
</code></pre><p>To check the de-duplication level, we can use <a href="https://manpages.debian.org/du.1"><code>du(1)</code></a>
,
first on a single directory:</p>
<pre tabindex="0"><code>storage2# du -hs 2022-05-27 
113G	2022-05-27
</code></pre><p>…and then on two subsequent directories:</p>
<pre tabindex="0"><code>storage2# du -hs 2022-05-25 2022-05-27
112G	2022-05-25
7.3G	2022-05-27
</code></pre><p>As you can see, the 2022-05-27 backup took 7.3 GB of disk space, and 104.7 GB
were re-used from the previous backup(s).</p>
<p>To print all files which have changed since the last backup, we can use:</p>
<pre tabindex="0"><code>storage2# find 2022-05-27 -type f -links 1 -print
</code></pre><h3 id="limitation-file-system-compatibility">Limitation: file system compatibility</h3>
<p>A significant limitation of backups at the file level is that the destination
file system (network storage) needs to support all the file system features used
on the machines you are backing up.</p>
<p>For example, if you use <a href="https://help.ubuntu.com/community/FilePermissionsACLs">POSIX
ACLs</a> or <a href="https://wiki.archlinux.org/title/File_permissions_and_attributes#Extended_attributes">Extended
attributes</a>
(possibly for <a href="https://wiki.archlinux.org/title/Capabilities">Capabilities</a> or
<a href="https://wiki.archlinux.org/title/SELinux">SELinux</a>), you need to ensure that
your backup file system has these features enabled, and that you are using <a href="https://manpages.debian.org/rsync.1"><code>rsync(1)</code></a>
’s <code>--xattrs</code> (or <code>-X</code> for short) option.</p>
<p>This can turn from a pitfall into a dealbreaker as soon as multiple operating
systems are involved. For example, the <code>rsync</code> version on macOS has
<a href="https://github.com/apple-oss-distributions/rsync/blob/aa4e500aa53b9417014c718a5ff0e29215f08e48/rsync/generator.c#L1447">Apple-specific
code</a>
to work with Apple <a href="https://en.wikipedia.org/wiki/Resource_fork">resource forks</a>
and other extended attributes. It’s not clear to me whether macOS <code>rsync</code> can
send files to Linux <code>rsync</code>, restore them, and end up with the same system state.</p>
<p>Luckily, I am only interested in backing up Linux systems, or merely home
directories of non-Linux systems, where no extended attributes are used.</p>
<h3 id="downside-slow-bulk-operations-disk-usage-deletion">Downside: slow bulk operations (disk usage, deletion)</h3>
<p>The biggest downside of this architecture is that working with the directory
trees in bulk can be very slow, especially when using a hard disk instead of an
SSD. For example, deleting old backups can easily take many hours to multiple
days (!). Sure, you can just let the <code>rm</code> command run in the background, but
it’s annoying nevertheless.</p>
<p>Even merely calculating the disk space usage of each directory tree is a
painfully slow operation. I tried using stateful disk usage tools like
<a href="http://duc.zevv.nl/">duc</a>, but it <a href="https://github.com/zevv/duc/issues/240">didn’t work
reliably</a> on my backups.</p>
<p>In practice, I found that for tracking down large files, using <a href="https://manpages.debian.org/ncdu.1"><code>ncdu(1)</code></a>
 on any recent backup typically quickly shows the
large file. In one case, I found <code>var/lib/postgresql</code> to consume many
gigabytes. I excluded it in favor of using <a href="https://manpages.debian.org/pg_dump.1"><code>pg_dump(1)</code></a>
, which resulted in much smaller backups!</p>
<p>Unfortunately, even when using an SSD, determining which files take up most
space of a full backup takes a few minutes:</p>
<pre tabindex="0"><code>storage2# time du -hs backup/midna/2022-06-09
742G	backup/midna/2022-06-09

real	8m0.202s
user	0m11.651s
sys	2m0.731s
</code></pre><h3 id="backup-transport-ssh-and-scheduling">Backup transport (SSH) and scheduling</h3>
<p>To transfer data via <code>rsync</code> from the backup host to my network storage, I’m
using SSH.</p>
<p>Each machine’s SSH access is restricted in my network storage’s SSH <a href="https://manpages.debian.org/authorized_keys.5"><code>authorized_keys(5)</code></a>
 config file to not allow arbitrary
commands, but to perform just a specific operation. The only allowed operation
in my case is running <code>rrsync</code> (“restricted rsync”) in a container whose file
system only contains the backup host’s sub directory, e.g. .<code>websrv.zekjur.net</code>:</p>
<pre tabindex="0"><code>command=&#34;/bin/docker run --log-driver none -i -e SSH_ORIGINAL_COMMAND -v /srv/backup/websrv.zekjur.net:/srv/backup/websrv.zekjur.net stapelberg/docker-rsync /srv/backup/websrv.zekjur.net&#34;,no-port-forwarding,no-X11-forwarding ssh-ed25519 AAAAC3…
</code></pre><p>(The <a href="/posts/2016-11-21-gigabit-nas-coreos/#dockerfiles-rrsync-and-samba">corresponding <code>Dockerfile</code> can be found in my Gigabit NAS
article</a>.)</p>
<p>To trigger such an SSH-protected <code>rsync</code> transfer remotely, I’m using a small
custom scheduling program called
<a href="https://github.com/stapelberg/zkj-nas-tools/tree/master/dornroeschen">dornröschen</a>. The
program arranges for all involved machines to be powered on (using
<a href="https://en.wikipedia.org/wiki/Wake-on-LAN">Wake-on-LAN</a>) and then starts
<code>rsync</code> via <em>another operation-restricted SSH connection</em>.</p>
<p>You could easily replace this with a cron job if you don’t care about WOL.</p>
<p>The architecture looks like this:</p>
<p><img src="2022-05-29-backup-architecture.svg" alt="backup architecture"></p>
<p>The operation-restricted SSH connection on each backup host is configured in
SSH’s <a href="https://manpages.debian.org/authorized_keys.5"><code>authorized_keys(5)</code></a>
 config file:</p>
<pre tabindex="0"><code>command=&#34;/root/backup-remote.pl&#34;,no-port-forwarding,no-X11-forwarding ssh-ed25519 AAAAC3…
</code></pre><h2 id="next-up">Next up</h2>
<p>The second article in this series is <a href="../2022-07-02-rsync-surroundings/">rsync, article 2:
Surroundings</a>. Now that we know what to use
rsync for, how can we best integrate rsync into monitoring and alerting, and on
which operating systems does it work?</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[rsync: Series Overview]]></title>
    <link href="https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/"/>
    <id>https://michael.stapelberg.ch/posts/2022-06-18-rsync-overview/</id>
    <published>2022-06-18T15:00:00+02:00</published>
    <content type="html"><![CDATA[<p>For many years, I was only a casual user of
<a href="https://en.wikipedia.org/wiki/Rsync">rsync</a> and used it mostly for one-off file
transfers.</p>
<p>Over time, I found rsync useful in more and more cases, and would recommend
every computer user put this great tool into their toolbox 🛠 🧰 !</p>
<p>I’m publishing a series of blog posts about rsync:</p>
<ul>
<li><a href="../2022-06-18-rsync-article-1-scenarios/">rsync, article 1: Scenarios</a>. To
motivate why it makes sense to look at rsync, I present three scenarios for
which I have come to appreciate rsync: DokuWiki transfers, Software deployment
and Backups.</li>
<li><a href="../2022-07-02-rsync-surroundings/">rsync, article 2: Surroundings</a>. Now that
we know what to use rsync for, how can we best integrate rsync into monitoring
and alerting, and on which operating systems does it work?</li>
<li><a href="../2022-07-02-rsync-how-does-it-work">rsync, article 3: How does rsync
work?</a>. With rsync up and running, it’s
time to take a peek under the hood of rsync to better understand how it works.</li>
<li>rsync, article 4: My own rsync implementation (To be published.)</li>
</ul>
]]></content>
  </entry>
</feed>
