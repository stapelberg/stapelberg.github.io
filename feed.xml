<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael Stapelbergs Website</title>
  <link href="https://michael.stapelberg.ch/feed.xml" rel="self"/>
  <link href="https://michael.stapelberg.ch/"/>
  <id>https://michael.stapelberg.ch/</id>
  <generator>Hugo -- gohugo.io</generator>
  <entry>
    <title type="html"><![CDATA[Intel 9 285K on ASUS Z890: not stable!]]></title>
    <link href="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/"/>
    <id>https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/</id>
    <published>2025-03-19T17:35:38+01:00</published>
    <content type="html"><![CDATA[<p>In January I ordered the components for a new PC and expected that I would
publish a successor to my <a href="/posts/2022-01-15-high-end-linux-pc/">2022 high-end Linux PC
üêß</a> article. Instead, I am now sitting on
a PC which regularly encounters crashes of the worst-to-debug kind, so I am
publishing this article as a warning for others in case you wanted to buy the
same hardware.</p>















<a href="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4799.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4799_hu6be03d573959a180decf49a8830d0de8_1842297_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4799_hu6be03d573959a180decf49a8830d0de8_1842297_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4799_hu6be03d573959a180decf49a8830d0de8_1842297_600x0_resize_q75_box.jpg"
  
  width="600"
  height="450"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h2 id="components">Components</h2>
<p>Which components did I pick for this build? Here‚Äôs the full list:</p>
<table>
<thead>
<tr>
<th>Price</th>
<th>Type</th>
<th>Article</th>
</tr>
</thead>
<tbody>
<tr>
<td>140 CHF</td>
<td>Case</td>
<td><a href="https://www.digitec.ch/de/s1/product/fractal-define-7-compact-black-solid-atx-matx-mini-itx-pc-gehaeuse-13220301">Fractal Define 7 Compact Black Solid</a></td>
</tr>
<tr>
<td>155 CHF</td>
<td>Power Supply</td>
<td><a href="https://www.digitec.ch/de/s1/product/corsair-rm850x-850-w-pc-netzteil-47356173?supplier=8560040">Corsair RM850x</a></td>
</tr>
<tr>
<td>233 CHF</td>
<td>Mainboard</td>
<td><a href="https://www.digitec.ch/de/s1/product/asus-prime-z890-p-lga-1851-intel-z890-atx-mainboard-50252296">ASUS PRIME Z890-P</a></td>
</tr>
<tr>
<td>620 CHF</td>
<td>CPU</td>
<td><a href="https://www.digitec.ch/de/s1/product/intel-core-ultra-9-285k-lga-1851-370-ghz-24-core-prozessor-49734792">Intel Core Ultra 9 285k</a></td>
</tr>
<tr>
<td>120 CHF</td>
<td>CPU fan</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nh-d15-g2-168-mm-cpu-kuehler-46985628">Noctua NH-D15 G2</a></td>
</tr>
<tr>
<td>39 CHF</td>
<td>Case fan</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nf-a14-pwm-140-mm-1-x-pc-luefter-657800?supplier=3204073">Noctua NF-A14 PWM (140 mm)</a></td>
</tr>
<tr>
<td>209 CHF</td>
<td>RAM</td>
<td><a href="https://www.digitec.ch/de/s1/product/corsair-vengeance-2-x-32gb-6400-mhz-ddr5-ram-dimm-ram-24473300">64 GB DDR5-6400 Corsair Vengeance (2 x 32GB)</a></td>
</tr>
<tr>
<td>280 CHF</td>
<td>Disk</td>
<td><a href="https://www.digitec.ch/de/s1/product/samsung-990-pro-4000-gb-m2-2280-ssd-37073751?supplier=406802">4000 GB Samsung 990 Pro</a></td>
</tr>
<tr>
<td>940 CHF</td>
<td>GPU</td>
<td><a href="https://www.digitec.ch/de/s1/product/inno3d-geforce-rtx-4070-ti-x3-oc-12-gb-gddr6x-1-x-hdmi-3-x-dp-12-gb-grafikkarte-23664346?supplier=406802">Inno3D GeForce RTX4070 Ti</a></td>
</tr>
</tbody>
</table>
<p>Total: ‚âà1800 CHF, excluding the Graphics Card I re-used from a previous build.</p>
<p>‚Ä¶and the next couple of sections go into detail on how I selected these components.</p>
<h3 id="case">Case</h3>
<p>I have been a fan of Fractal cases for a couple of generations. In particular, I
realized that the ‚ÄúCompact‚Äù series offers plenty of space even for large
graphics cards and CPU coolers, so that‚Äôs now my go-to case: the Fractal Define
7 Compact (Black Solid).</p>
<p>I really like building components into the case and working with the case. There
are no sharp edges, the mechanisms are a pleasure to use and the
cable-management is well thought-out.</p>
<p>The only thing that wasn‚Äôt top-notch is that Fractal ships the case screws in
sealed plastic packages that you need to cut open. I would have wished for a
re-sealable plastic baggie so that one can keep the unused screws instead of
losing them.</p>
<h3 id="power-supply">Power Supply</h3>
<p>I wanted to keep my options open regarding upgrading to an nVidia 50xx series
graphics card at a later point. Those models have a TGP (‚ÄúTotal Graphics Power‚Äù)
of 575 watts, so I needed a power supply that delivers enough power for the
whole system even at peak power usage in all dimensions.</p>
<p>I ended up selecting the Corsair RM850x, which <a href="https://www.tomshardware.com/reviews/corsair-rm850x-2021-power-supply-review">reviews favoribly (‚Äúleader in
the 850W gold
category‚Äù)</a>
and was available at my electronics store of choice.</p>
<p>This was a good choice: the PSU indeed runs quiet, and I really like the power
cables (e.g. the GPU cable) that they include: they are very flexible, which
makes them easy to cable-manage.</p>
<h3 id="ssd-disk">SSD disk</h3>
<p>I have been avoiding PCIe 5 SSDs so far because they consume a lot more power
compared to PCIe 4 SSDs. While bulk streaming data transfer rates are higher on
PCIe 5 SSDs, random transfers are not significantly faster. Most of my compute
workload are random transfers, not large bulk transfers.</p>
<p>The power draw situation with PCIe 5 SSDs seems to be getting better lately,
with the Phison E31T being the first controller that implements power saving. A
disk that uses the E31T controller is the Corsair Force Series MP700
Elite. Unfortunately, said disk was unavailable when I ordered.</p>
<p>Instead, I picked the Samsung 990 Pro with 4 TB. I made good experiences with
the Samsung Pro series over the years (never had one die or degrade
performance), and my previous 2 TB disk is starting to fill up, so the extra
storage space is appreciated.</p>
<h3 id="mainboard">Mainboard</h3>
<p>One annoying realization is that most mainboard vendors seem to have moved to
2.5 GbE (= 2.5 Gbit/s ethernet) onboard network cards. I would have been
perfectly happy to play it safe and buy another Intel I225 1 GbE network card,
as long as it <em>just works</em> with Linux.</p>
<p>In the 2.5 GbE space, the main players seem to be Realtek and Intel. Most
mainboard vendors opted for Realtek as far as I could see.</p>
<p>Linux includes the <code>r8169</code> driver for Realtek network cards, but you need a
recent-enough Linux version (6.13+) that includes commit ‚Äú<a href="https://github.com/torvalds/linux/commit/f75d1fbe7809bc5ed134204b920fd9e2fc5db1df">r8169: add support
for
RTL8125D</a>‚Äù,
accompanied by a recent-enough linux-firmware package. Even then, there is some
concern around stability and ASPM support. See for example <a href="https://serverfault.com/a/1169558">this ServerFault
post</a> by someone working on the <code>r8169</code>
driver.</p>
<p>Despite the Intel 1 GbE options being well-supported at this point, Intel‚Äôs 2.5
GbE options might not fare any better than the Realtek ones: I found <a href="https://www.reddit.com/r/HomeServer/comments/1cc0yuq/are_intel_25_gbe_nics_i225v_i226v_stable_now/">reports of
instability with Intel‚Äôs 2.5 GbE network
cards</a>.</p>
<p>Aside from the network cards, I decided to stick to the ASUS prime series of
mainboards, as I made good experiences with those in my past few builds. Here
are a couple of thoughts on the ASUS PRIME Z890-P mainboard I went with:</p>
<ul>
<li>I like the quick-release PCIe mechanism: ASUS understood that people had
trouble unlocking large graphics cards from their PCIe slot, so they added a
lever-like mechanism that is easily reachable. In my couple of usages, this
worked pretty well!</li>
<li>I wrote about <a href="/posts/2022-01-15-high-end-linux-pc/#slow-boot">slow boot times with my 2022 PC
build</a> that were caused by
time-consuming memory training. On this ASUS board, I noticed that they blink
the Power LED to signal that memory training is in progress. Very nice! It
hadn‚Äôt occurred to me previously that the various phases of the boot could be
signaled by different Power LED blinking patterns :)
<ul>
<li>The downside of this feature is: While the machine is in suspend-to-RAM, the
Power LED also blinks! This is annoying, so I might just disconnect the
Power LED entirely.</li>
</ul>
</li>
<li>The UEFI firmware includes what they call a Q-Dashboard: An overview of what
is installed/connected in which slot. Quite nice:</li>
</ul>















<a href="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4809.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4809_hubd58b5eea90ff3475e2027d31ae65ea9_1032931_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4809_hubd58b5eea90ff3475e2027d31ae65ea9_1032931_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2025-03-19-intel-core-ultra-9-285k-on-asus-z890-not-stable/IMG_4809_hubd58b5eea90ff3475e2027d31ae65ea9_1032931_600x0_resize_q75_box.jpg"
  
  width="600"
  height="357"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h3 id="cpu-fan">CPU fan</h3>
<p>I am a long-time fan of Noctua‚Äôs products: This company makes silent fans with
great cooling capacity that work reliably! For many years, I have swapped out
every of my PC‚Äôs fans with Noctua fans, and it was always an upgrade. Highly
recommended.</p>
<p>Hence, it is no question that I picked the latest and greatest Noctua CPU cooler
for this build: the Noctua NH-D15 G2. There are a couple of things to pay
attention to with this cooler:</p>
<ul>
<li>I decided to configure it with one fan instead of two fans: Using only one fan
will be the quietest setup, yet still have plenty of cooling capacity for this
setup.</li>
<li>There are 3 different versions that differ in how their base plate is
shaped. Noctua recommends: ‚ÄúFor LGA1851, we generally recommend the regular
standard version with medium base convexity‚Äù
(<a href="https://noctua.at/en/intel-lga1851-all-you-need-to-know">https://noctua.at/en/intel-lga1851-all-you-need-to-know</a>)</li>
<li>The height of this cooler is 168 mm. This fits well into the Fractal Define 7
Compact Black.</li>
</ul>
<h3 id="cpu">CPU</h3>
<p>Probably the point that raises most questions about this build is why I selected
an Intel CPU over an AMD CPU. The primary reason is that Intel CPUs are so much
better at power saving!</p>
<p>Let me explain: Most benchmarks online are for gamers and hence measure a usage
curve that goes ‚Äústart game, run PC at 100% resources for hours‚Äù. Of course,
when you never let the machine idle, you would care about <em>power efficiency</em>:
how much power do you need to use to achive the desired result?</p>
<p>My use-case is software development, not gaming. My usage curve oscillates
between ‚Äúbarely any usage because Michael is reading text‚Äù to ‚Äúcomplete this
compilation as quickly as possible with all the power available‚Äù. For me, I need
both absolute power consumption at idle, and absolute performance to be
best-of-class.</p>
<p>AMD‚Äôs CPUs offer great performance (the recently released <a href="https://www.phoronix.com/review/amd-ryzen-9-9950x3d-linux">Ryzen 9 9950X3D is
even faster</a> than the
Intel 9 285K), and have great <em>power efficiency</em>, but poor <em>power consumption</em>
at idle: With ‚âà35W of idle power draw, Zen 5 CPUs consume ‚âà3x as much power as
Intel CPUs!</p>
<p>Intel‚Äôs CPUs offer great performance (like AMD), but excellent power consumption
at idle.</p>
<p>Therefore, I can‚Äôt in good conscience buy an AMD CPU, but if you want a fast
gaming-only PC or run an always-loaded HPC cluster with those CPUs, definitely
go ahead :)</p>
<h3 id="graphics-card">Graphics card</h3>
<p>I don‚Äôt necessarily recommend any particular nVidia graphics card, but I have
had to stick to nVidia cards because they are the only option that work with my
picky <a href="/posts/2017-12-11-dell-up3218k/">Dell UP3218K monitor</a>.</p>
<p>From time to time, I try out different graphics cards. Recently, I got myself an
AMD Radeon RX 9070 because I read that it works well with open source drivers.</p>
<p>While the Radeon RX 9070 works with my monitor (great!), it seems to consume 45W
in idle, which is much higher than my nVidia cards, which idle at ‚âà 20W. This is
unacceptable to me: Aside from high power costs and wasting precious resources,
the high power draw also means that my room will be hotter in summer and the
fans need to spin faster and therefore louder.</p>
<p>Maybe I‚Äôll write a separate article about the Radeon RX 9070.</p>
<h2 id="installation">Installation</h2>
<h3 id="uefi-setup">UEFI setup</h3>
<p>On the internet, I read that there was some issue related to the Power Limits
that mainboards come with by default. Therefore, I did a <a href="https://www.asus.com/motherboards-components/motherboards/prime/prime-z890-p/helpdesk_bios?model2Name=PRIME-Z890-P">UEFI firmware
update</a>
first thing after getting the mainboard. I upgraded to version 1404 (2025/01/10)
using the provided ZIP file (<code>PRIME-Z890-P-ASUS-1404.zip</code>) on an MS-DOS
FAT-formatted USB stick with the EZ Flash tool in the UEFI firmware
interface. Tip: do not extract the ZIP file, otherwise the EZ Flash tool cannot
update the Intel ME firmware. Just put the ZIP file onto the USB disk as-is.</p>
<p>I verified that with this UEFI version, the <code>Power Limit 1 (PL1)</code> is 250W, and
<code>ICCMAX=347A</code>, which are exactly the values that Intel recommends. Great!</p>
<p>I also enabled XMPP and verified that memtest86 reported no errors.</p>
<h3 id="software-setup-early-adopter-pains">Software setup: early adopter pains</h3>
<p>To copy over the data from the old disk to the new disk, I wanted to boot a live
linux distribution (specifically, <a href="https://grml.org/">grml.org</a>) and follow my
usual procedure: boot with the old disk and the new (empty) disk, then use <code>dd</code>
to copy the data. It‚Äôs nice and simple, hard to screw up.</p>
<p>Unfortunately, while grml 2024.12 technically does boot up, there are two big
problems:</p>
<ol>
<li>
<p>There is no network connectivity because the kernel and linux-firmware
versions are too old.</p>
<ul>
<li>r8169: add support for RTL8125D
<a href="https://github.com/torvalds/linux/commit/f75d1fbe7809bc5ed134204b920fd9e2fc5db1df">https://github.com/torvalds/linux/commit/f75d1fbe7809bc5ed134204b920fd9e2fc5db1df</a></li>
</ul>
</li>
<li>
<p>I could not get Xorg to work at all. Not with the Intel integrated GPU, nor
with the nVidia dedicated GPU. Not with <code>nomodeset</code> or any of the other
options in the grml menu. This wasn‚Äôt merely a convenience problem: I needed
to use <code>gparted</code> (the graphical version) for its partition moving/resizing
support.</p>
</li>
</ol>
<p>Ultimately, it was easier to upgrade my old PC to Linux 6.13 and linux-firmware
20250109, then put in the new disk and copy over the installation.</p>
<h2 id="stability-issues">Stability issues</h2>
<p>At this point (early February), I switched to this new machine as my main PC.</p>
<p>Unfortunately, I could never get it to run stable! This journal shows you some
of the issues I faced and what I tried to troubleshoot them.</p>
<h3 id="xorg-dying-after-resume-from-suspend">Xorg dying after resume-from-suspend</h3>
<p>One of the first issues I encountered with this system was that after resuming
from suspend-to-RAM, I was greeted with a login window instead of my X11
session. The logs say:</p>
<pre tabindex="0"><code>(EE) NVIDIA(GPU-0): Failed to acquire modesetting permission.
(EE) Fatal server error:
(EE) EnterVT failed for screen 0
(EE) 
(EE) 
(EE) Please also check the log file at &#34;/var/log/Xorg.0.log&#34; for additional information.
(EE) 
(WW) NVIDIA(0): Failed to set the display configuration
(WW) NVIDIA(0):  - Setting a mode on head 0 failed: Insufficient permissions
(WW) NVIDIA(0):  - Setting a mode on head 1 failed: Insufficient permissions
(WW) NVIDIA(0):  - Setting a mode on head 2 failed: Insufficient permissions
(WW) NVIDIA(0):  - Setting a mode on head 3 failed: Insufficient permissions
(EE) Server terminated with error (1). Closing log file.
</code></pre><p>I couldn‚Äôt find any good tips online for this error message, so I figured I‚Äôd
wait and see how frequently this happens before investigating further.</p>
<h3 id="feb-18-xhci-host-controller-dying">Feb 18: xHCI host controller dying</h3>
<p>On Feb 18th, after resume-from-suspend, none of my USB peripherals would work
anymore! This affected <em>all USB ports</em> of the machine and could not be fixed,
not even by a reboot, until I fully killed power to the machine! In the kernel
log, I saw the following messages:</p>
<pre tabindex="0"><code>xhci_hcd 0000:80:14.0: xHCI host not responding to stop endpoint command
xhci_hcd 0000:80:14.0: xHCI host controller not responding, assume dead
xhci_hcd 0000:80:14.0: HC died; cleaning up
</code></pre><h3 id="feb-24-xhci-host-controller-dying">Feb 24: xHCI host controller dying</h3>
<p>The HC dying issue happened again when I was writing an SD card in my USB card
reader:</p>
<pre tabindex="0"><code>xhci_hcd 0000:80:14.0: HC died; cleaning up
</code></pre><h3 id="feb-24--uefi-update-disable-xmpp">Feb 24: ‚Üí UEFI update, disable XMPP</h3>
<p>To try and fix the host controller dying issue, I updated the UEFI firmware to
version <code>1601</code> and disabled the XMPP RAM profile.</p>
<h3 id="feb-26--switch-back-from-geforce-4070-ti-to-3060-ti">Feb 26: ‚Üí switch back from GeForce 4070 Ti to 3060 Ti</h3>
<p>To rule out any GPU-specific issues, I decided to switch back from the Inno3D
GeForce RTX4070 Ti to my older MSI GeForce RTX 3060 Ti.</p>
<h3 id="feb-28-pc-dying-on-suspend-to-ram">Feb 28: PC dying on suspend-to-RAM</h3>
<p>On Feb 28th, my PC did not resume from suspend-to-RAM. It would not even react
to a ping, I had to hard-reset the machine. When checking the syslog afterwards,
there are no entries.</p>
<p>I checked my power monitoring and saw that the machine consumed 50W (well above
idle power, and far above suspend-to-RAM power) throughout the entire
night. Hence, I suspect that the suspend-to-RAM did not work correctly and the
machine never actually suspended.</p>
<h3 id="mar-4th-pc-dying-when-running-django-tests">Mar 4th: PC dying when running django tests</h3>
<p>On March 4th, I was running the test suite for a medium-sized Django project (=
100% CPU usage) when I encountered a really hard crash: The machine stopped
working entirely, meaning all peripherals like keyboard and mouse stopped
responding, and the machine even did not respond to a network ping anymore.</p>
<p>At this point, I had enough and switched back to my 2022 PC.</p>
<h2 id="conclusion">Conclusion</h2>
<p>What use is a computer that doesn‚Äôt work? My hierarchy of needs contains
stability as the foundation, then speed and convenience. This machine exhausted
my tolerance for frustration with its frequent crashes.</p>
<p>Manawyrm <a href="https://chaos.social/@manawyrm/113772325172878092">actually warned me about the ASUS board</a>:</p>
<blockquote>
<p>ASUS boards are a typical gamble as always &ndash; they fired their firmware
engineers about 10 years ago, so you might get a nightmare of ACPI
troubleshooting hell now (or it&rsquo;ll just work). ASRock is worth a look as a
replacement if that happens. Electronics are usually solid, though&hellip;</p>
</blockquote>
<p>I didn‚Äôt expect that this PC would crash so hard, though. Like, if it couldn‚Äôt
suspend/resume that would be one thing (a dealbreaker, but somewhat expected and
understandable, probably fixable), but a machine that runs into a hard-lockup
when compiling/testing software? No thanks.</p>
<p>I will buy a different mainboard to see if that helps, likely the ASRock Z890
Pro-A. If you have any recommendations for a Z890 mainboard that actually works
reliably, please let me know!</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Tips to debug hanging Go programs]]></title>
    <link href="https://michael.stapelberg.ch/posts/2025-02-27-debug-hanging-go-programs/"/>
    <id>https://michael.stapelberg.ch/posts/2025-02-27-debug-hanging-go-programs/</id>
    <published>2025-02-27T17:51:38+01:00</published>
    <content type="html"><![CDATA[<p>I was helping someone get my <a href="https://github.com/gokrazy/rsync">gokrazy/rsync</a>
implementation set up to synchronize <a href="https://en.wikipedia.org/wiki/Resource_Public_Key_Infrastructure">RPKI
data</a> (used
for securing BGP routing infrastructure), when we discovered that with the right
invocation, my rsync receiver would just hang indefinitely.</p>
<p>This was a quick problem to solve, but in the process, I realized that I should
probably write down a few Go debugging tips I have come to appreciate over the
years!</p>
<h2 id="scenario-hanging-go-program">Scenario: hanging Go program</h2>
<p>If you want to follow along, you can reproduce the issue by building an older
version of gokrazy/rsync, just before the bug fix commit (you‚Äôll need <a href="https://go.dev/dl/">Go 1.22
or newer</a>):</p>
<pre tabindex="0"><code>git clone https://github.com/gokrazy/rsync
cd rsync
git reset --hard 6c89d4dda3be055f19684c0ed56d623da458194e^
go install ./cmd/...
</code></pre><p>Now we can try to sync the repository:</p>
<pre tabindex="0"><code>% gokr-rsync \
  -rtO \
  --delete \
  rsync://rsync.paas.rpki.ripe.net/repository/ \
  /tmp/rpki-repo
[‚Ä¶]
2025/02/08 09:35:10 Opening TCP connection to rsync.paas.rpki.ripe.net:873
2025/02/08 09:35:10 rsync module &#34;repo&#34;, path &#34;repo/&#34;
2025/02/08 09:35:10 (Client) Protocol versions: remote=31, negotiated=27
2025/02/08 09:35:10 Client checksum: md4
2025/02/08 09:35:10 sending daemon args: [--server --sender -tr . repo/]
2025/02/08 09:35:10 exclusion list sent
2025/02/08 09:35:10 receiving file list
2025/02/08 09:35:11 [Receiver] i=0 ? . mode=40755 len=4096 uid=0 gid=0 flags=?
[‚Ä¶]
2025/02/08 09:35:11 [Receiver] i=89 ? clonoth/1/3139332e33322e3130302e302f32342d3234203d3e203537313936.roa mode=100644 len=1747 uid=0 gid=0 flags=?
</code></pre><p>‚Ä¶and then the program just sits there.</p>
<h2 id="sigquit-stack-trace">Tip 1: Press Ctrl+\ (SIGQUIT) to print a stack trace</h2>
<p>The easiest way to look at where a Go program is hanging is to press <code>Ctrl+\</code>
(backslash) to <a href="https://en.wikipedia.org/wiki/Signal_(IPC)#SIGQUIT">make the terminal send it a <code>SIGQUIT</code>
signal</a>. When the Go runtime
receives <code>SIGQUIT</code>, it prints a stack trace to the terminal before exiting the
process. This behavior is enabled by default and can be customized via the
<code>GOTRACEBACK</code> environment variable, see the <a href="https://pkg.go.dev/runtime"><code>runtime</code> package
docs</a>.</p>
<p>Here is what the output looks like in our case. I have made the font small so
that you can recognize the shape of the output (the details are not important,
continue reading below):</p>
<div style="font-size: 60%">
<pre tabindex="0"><code>^\SIGQUIT: quit
PC=0x47664e m=0 sigcode=128

goroutine 0 gp=0x6e6020 m=0 mp=0x6e6ec0 [idle]:
internal/runtime/syscall.Syscall6()
	/home/michael/sdk/go1.23.0/src/internal/runtime/syscall/asm_linux_amd64.s:36 +0xe fp=0x7ffc58665090 sp=0x7ffc58665088 pc=0x47664e
internal/runtime/syscall.EpollWait(0x586651e0?, {0x7ffc5866511c?, 0x3000000018?, 0x7ffc586651f0?}, 0x58665110?, 0x7ffc?)
	/home/michael/sdk/go1.23.0/src/internal/runtime/syscall/syscall_linux.go:32 +0x45 fp=0x7ffc586650e0 sp=0x7ffc58665090 pc=0x4765e5
runtime.netpoll(0xc0000000c0?)
	/home/michael/sdk/go1.23.0/src/runtime/netpoll_epoll.go:116 +0xd2 fp=0x7ffc58665768 sp=0x7ffc586650e0 pc=0x432332
runtime.findRunnable()
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:3580 +0x8c5 fp=0x7ffc586658e0 sp=0x7ffc58665768 pc=0x43f045
runtime.schedule()
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:3995 +0xb1 fp=0x7ffc58665918 sp=0x7ffc586658e0 pc=0x4405b1
runtime.park_m(0xc0000061c0)
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:4102 +0x1eb fp=0x7ffc58665970 sp=0x7ffc58665918 pc=0x4409cb
runtime.mcall()
	/home/michael/sdk/go1.23.0/src/runtime/asm_amd64.s:459 +0x4e fp=0x7ffc58665988 sp=0x7ffc58665970 pc=0x470e2e

goroutine 1 gp=0xc0000061c0 m=nil [IO wait]:
runtime.gopark(0x452658?, 0x0?, 0x98?, 0xb3?, 0xb?)
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:424 +0xce fp=0xc0000eb358 sp=0xc0000eb338 pc=0x46bc0e
runtime.netpollblock(0x4a01b8?, 0x4058e6?, 0x0?)
	/home/michael/sdk/go1.23.0/src/runtime/netpoll.go:575 +0xf7 fp=0xc0000eb390 sp=0xc0000eb358 pc=0x4318f7
internal/poll.runtime_pollWait(0x7ef586628808, 0x72)
	/home/michael/sdk/go1.23.0/src/runtime/netpoll.go:351 +0x85 fp=0xc0000eb3b0 sp=0xc0000eb390 pc=0x46af05
internal/poll.(*pollDesc).wait(0xc0000ce180?, 0xc00020e99c?, 0x0)
	/home/michael/sdk/go1.23.0/src/internal/poll/fd_poll_runtime.go:84 +0x27 fp=0xc0000eb3d8 sp=0xc0000eb3b0 pc=0x4b0ce7
internal/poll.(*pollDesc).waitRead(...)
	/home/michael/sdk/go1.23.0/src/internal/poll/fd_poll_runtime.go:89
internal/poll.(*FD).Read(0xc0000ce180, {0xc00020e99c, 0x4, 0x4})
	/home/michael/sdk/go1.23.0/src/internal/poll/fd_unix.go:165 +0x27a fp=0xc0000eb470 sp=0xc0000eb3d8 pc=0x4b17da
net.(*netFD).Read(0xc0000ce180, {0xc00020e99c?, 0x6eeea0?, 0x1?})
	/home/michael/sdk/go1.23.0/src/net/fd_posix.go:55 +0x25 fp=0xc0000eb4b8 sp=0xc0000eb470 pc=0x4f7e85
net.(*conn).Read(0xc000206000, {0xc00020e99c?, 0xc000212000?, 0x6e6ec0?})
	/home/michael/sdk/go1.23.0/src/net/net.go:189 +0x45 fp=0xc0000eb500 sp=0xc0000eb4b8 pc=0x5001a5
net.(*TCPConn).Read(0x0?, {0xc00020e99c?, 0xc0000eb568?, 0x46d449?})
	&lt;autogenerated&gt;:1 +0x25 fp=0xc0000eb530 sp=0xc0000eb500 pc=0x50bb25
io.ReadAtLeast({0x5d9640, 0xc000206000}, {0xc00020e99c, 0x4, 0x4}, 0x4)
	/home/michael/sdk/go1.23.0/src/io/io.go:335 +0x90 fp=0xc0000eb578 sp=0xc0000eb530 pc=0x4957d0
io.ReadFull(...)
	/home/michael/sdk/go1.23.0/src/io/io.go:354
encoding/binary.Read({0x5d9640, 0xc000206000}, {0x5da8b0, 0x7059a0}, {0x55e7c0, 0xc0000eb6a0})
	/home/michael/sdk/go1.23.0/src/encoding/binary/binary.go:244 +0xa5 fp=0xc0000eb670 sp=0xc0000eb578 pc=0x5102a5
github.com/gokrazy/rsync/internal/rsyncwire.(*MultiplexReader).ReadMsg(0xc00020a100)
	/home/michael/kr/rsync/internal/rsyncwire/wire.go:50 +0x48 fp=0xc0000eb6e8 sp=0xc0000eb670 pc=0x514428
github.com/gokrazy/rsync/internal/rsyncwire.(*MultiplexReader).Read(0x7ef5869b9a68?, {0xc000280000, 0x40000, 0x4dd4fb?})
	/home/michael/kr/rsync/internal/rsyncwire/wire.go:72 +0x2f fp=0xc0000eb788 sp=0xc0000eb6e8 pc=0x5145af
bufio.(*Reader).Read(0xc0002020c0, {0xc00020e998, 0x4, 0x40ece5?})
	/home/michael/sdk/go1.23.0/src/bufio/bufio.go:241 +0x197 fp=0xc0000eb7c0 sp=0xc0000eb788 pc=0x4d5a57
io.ReadAtLeast({0x5d93e0, 0xc0002020c0}, {0xc00020e998, 0x4, 0x4}, 0x4)
	/home/michael/sdk/go1.23.0/src/io/io.go:335 +0x90 fp=0xc0000eb808 sp=0xc0000eb7c0 pc=0x4957d0
io.ReadFull(...)
	/home/michael/sdk/go1.23.0/src/io/io.go:354
github.com/gokrazy/rsync/internal/rsyncwire.(*Conn).ReadInt32(0xc000208060)
	/home/michael/kr/rsync/internal/rsyncwire/wire.go:163 +0x4a fp=0xc0000eb850 sp=0xc0000eb808 pc=0x51490a
github.com/gokrazy/rsync/internal/receiver.(*Transfer).recvIdMapping1(0xc000202120, 0x5a9b58)
	/home/michael/kr/rsync/internal/receiver/uidlist.go:16 +0x3d fp=0xc0000eb8c0 sp=0xc0000eb850 pc=0x51fc7d
github.com/gokrazy/rsync/internal/receiver.(*Transfer).RecvIdList(0xc000202120)
	/home/michael/kr/rsync/internal/receiver/uidlist.go:52 +0x1dd fp=0xc0000eba08 sp=0xc0000eb8c0 pc=0x51ffbd
github.com/gokrazy/rsync/internal/receiver.(*Transfer).ReceiveFileList(0xc000202120)
	/home/michael/kr/rsync/internal/receiver/flist.go:229 +0x378 fp=0xc0000ebb10 sp=0xc0000eba08 pc=0x51c5b8
github.com/gokrazy/rsync/internal/receivermaincmd.clientRun({{0x5d9280, 0xc000078058}, {0x5d92a0, 0xc000078060}, {0x5d92a0, 0xc000078068}}, 0xc0000d0d90, {0x7ef53d47efc8, 0xc000206000}, {0x7ffc5866600e, ...}, ...)
	/home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:341 +0x5cd fp=0xc0000ebc10 sp=0xc0000ebb10 pc=0x550c2d
github.com/gokrazy/rsync/internal/receivermaincmd.socketClient({{0x5d9280, 0xc000078058}, {0x5d92a0, 0xc000078060}, {0x5d92a0, 0xc000078068}}, 0xc0000d0d90, {0x7ffc58665ff4?, 0x1?}, {0x7ffc5866600e, ...})
	/home/michael/kr/rsync/internal/receivermaincmd/clientserver.go:44 +0x425 fp=0xc0000ebcd0 sp=0xc0000ebc10 pc=0x54c205
github.com/gokrazy/rsync/internal/receivermaincmd.rsyncMain({{0x5d9280, 0xc000078058}, {0x5d92a0, 0xc000078060}, {0x5d92a0, 0xc000078068}}, 0xc0000d0d90, {0xc00007e440, 0x1, 0x2}, ...)
	/home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:160 +0x5d7 fp=0xc0000ebdf0 sp=0xc0000ebcd0 pc=0x54f697
github.com/gokrazy/rsync/internal/receivermaincmd.Main({0xc0000160a0, 0x5, 0x5}, {0x5d9280?, 0xc000078058?}, {0x5d92a0?, 0xc000078060?}, {0x5d92a0?, 0xc000078068?})
	/home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:394 +0x272 fp=0xc0000ebee8 sp=0xc0000ebdf0 pc=0x5510d2
main.main()
	/home/michael/kr/rsync/cmd/gokr-rsync/rsync.go:12 +0x4e fp=0xc0000ebf50 sp=0xc0000ebee8 pc=0x5515ae
runtime.main()
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:272 +0x28b fp=0xc0000ebfe0 sp=0xc0000ebf50 pc=0x438d4b
runtime.goexit({})
	/home/michael/sdk/go1.23.0/src/runtime/asm_amd64.s:1700 +0x1 fp=0xc0000ebfe8 sp=0xc0000ebfe0 pc=0x472e61

goroutine 2 gp=0xc000006c40 m=nil [force gc (idle)]:
runtime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:424 +0xce fp=0xc000074fa8 sp=0xc000074f88 pc=0x46bc0e
runtime.goparkunlock(...)
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:430
runtime.forcegchelper()
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:337 +0xb3 fp=0xc000074fe0 sp=0xc000074fa8 pc=0x439093
runtime.goexit({})
	/home/michael/sdk/go1.23.0/src/runtime/asm_amd64.s:1700 +0x1 fp=0xc000074fe8 sp=0xc000074fe0 pc=0x472e61
created by runtime.init.7 in goroutine 1
	/home/michael/sdk/go1.23.0/src/runtime/proc.go:325 +0x1a
</code></pre></div>
<p>Phew! This output is pretty dense.</p>
<p>We can use the <a href="https://github.com/maruel/panicparse">https://github.com/maruel/panicparse</a> program to present this
stack trace in a more colorful and much shorter version:</p>















<a href="https://michael.stapelberg.ch/posts/2025-02-27-debug-hanging-go-programs/2025-02-08-panicparse.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2025-02-27-debug-hanging-go-programs/2025-02-08-panicparse_hu3e0f2d5aa6180df20bb553ed5c6fa57b_1741005_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2025-02-27-debug-hanging-go-programs/2025-02-08-panicparse_hu3e0f2d5aa6180df20bb553ed5c6fa57b_1741005_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2025-02-27-debug-hanging-go-programs/2025-02-08-panicparse_hu3e0f2d5aa6180df20bb553ed5c6fa57b_1741005_600x0_resize_q75_box.jpg"
  
  width="600"
  height="394"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>The functions helpfully highlighted in red are where the problem lies: My rsync
receiver implementation was incorrectly expecting the server to send a uid/gid
list, despite the PreserveUid and PreserveGid options not being enabled. <a href="https://github.com/gokrazy/rsync/commit/6c89d4dda3be055f19684c0ed56d623da458194e">Commit
<code>6c89d4d</code></a>
fixes the issue.</p>
<h2 id="attach-dlv">Tip 2: Attach the delve debugger to the process</h2>
<p>If dumping the stack trace in the moment is not sufficient to diagnose the
problem, you can go one step further and reach for an interactive debugger.</p>
<p>The most well-known Linux debugger is probably GDB, but when working with Go, I
recommend using <a href="https://github.com/go-delve/delve">the delve debugger</a> instead
as it typically works better. Install delve if you haven‚Äôt already:</p>
<pre tabindex="0"><code>% go install github.com/go-delve/delve/cmd/dlv@latest
</code></pre><p>In this article, I am using delve v1.24.0.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><p><strong>Note:</strong> If you want to explore local variables, you should rebuild your
program without optimizations and inlining (see the <a href="https://github.com/go-delve/delve/blob/master/Documentation/usage/dlv_exec.md"><code>dlv exec</code>
docs</a>):</p>
<pre tabindex="0"><code>% go install -gcflags=all=&#34;-N -l&#34; ./cmd/...
</code></pre></div>
  </div>
</aside>

<p>While you can run a new child process in a debugger (use <code>dlv exec</code>) without any
special permissions, attaching existing processes in a debugger is <a href="https://www.kernel.org/doc/Documentation/security/Yama.txt">disabled by
default in Linux</a>
for security reasons. We can allow this feature (remember to turn it off later!)
using:</p>
<pre tabindex="0"><code>% sudo sysctl -w kernel.yama.ptrace_scope=0
kernel.yama.ptrace_scope = 0
</code></pre><p>‚Ä¶and then we can just <code>dlv attach</code> to the hanging <code>gokr-rsync</code> process:</p>
<pre tabindex="0"><code>% dlv attach $(pidof gokr-rsync)
Type &#39;help&#39; for list of commands.
(dlv)
</code></pre><p>Great. But if we just print a stack trace, we only see functions from the
<code>runtime</code> package:</p>
<pre tabindex="0"><code>(dlv) bt
0  0x000000000047bb83 in runtime.futex
   at /home/michael/sdk/go1.23.6/src/runtime/sys_linux_amd64.s:558
1  0x00000000004374d0 in runtime.futexsleep
   at /home/michael/sdk/go1.23.6/src/runtime/os_linux.go:69
2  0x000000000040d89d in runtime.notesleep
   at /home/michael/sdk/go1.23.6/src/runtime/lock_futex.go:170
3  0x000000000044123e in runtime.mPark
   at /home/michael/sdk/go1.23.6/src/runtime/proc.go:1866
4  0x000000000044290d in runtime.stopm
   at /home/michael/sdk/go1.23.6/src/runtime/proc.go:2886
5  0x00000000004433d0 in runtime.findRunnable
   at /home/michael/sdk/go1.23.6/src/runtime/proc.go:3623
6  0x0000000000444e1d in runtime.schedule
   at /home/michael/sdk/go1.23.6/src/runtime/proc.go:3996
7  0x00000000004451cb in runtime.park_m
   at /home/michael/sdk/go1.23.6/src/runtime/proc.go:4103
8  0x0000000000477eee in runtime.mcall
   at /home/michael/sdk/go1.23.6/src/runtime/asm_amd64.s:459
</code></pre><p>The reason is that no goroutine is running (the program is waiting indefinitely
to receive data from the server), so we see one of the OS threads waiting in the
Go scheduler.</p>
<p>We first need to switch to the goroutine we are interested in (<code>grs</code> prints all
goroutines), and then the stack trace looks like what we expect:</p>
<pre tabindex="0"><code>(dlv) gr 1
Switched from 0 to 1 (thread 414327)
(dlv) bt
 0  0x0000000000474ebc in runtime.gopark
    at /home/michael/sdk/go1.23.6/src/runtime/proc.go:425
 1  0x000000000043819e in runtime.netpollblock
    at /home/michael/sdk/go1.23.6/src/runtime/netpoll.go:575
 2  0x000000000047435c in internal/poll.runtime_pollWait
    at /home/michael/sdk/go1.23.6/src/runtime/netpoll.go:351
 3  0x00000000004ed15a in internal/poll.(*pollDesc).wait
    at /home/michael/sdk/go1.23.6/src/internal/poll/fd_poll_runtime.go:84
 4  0x00000000004ed1f1 in internal/poll.(*pollDesc).waitRead
    at /home/michael/sdk/go1.23.6/src/internal/poll/fd_poll_runtime.go:89
 5  0x00000000004ee351 in internal/poll.(*FD).Read
    at /home/michael/sdk/go1.23.6/src/internal/poll/fd_unix.go:165
 6  0x0000000000569bb3 in net.(*netFD).Read
    at /home/michael/sdk/go1.23.6/src/net/fd_posix.go:55
 7  0x000000000057a025 in net.(*conn).Read
    at /home/michael/sdk/go1.23.6/src/net/net.go:189
 8  0x000000000058fcc5 in net.(*TCPConn).Read
    at &lt;autogenerated&gt;:1
 9  0x00000000004b72e8 in io.ReadAtLeast
    at /home/michael/sdk/go1.23.6/src/io/io.go:335
10  0x00000000004b74d3 in io.ReadFull
    at /home/michael/sdk/go1.23.6/src/io/io.go:354
11  0x0000000000598d5f in encoding/binary.Read
    at /home/michael/sdk/go1.23.6/src/encoding/binary/binary.go:244
12  0x00000000005a0b7a in github.com/gokrazy/rsync/internal/rsyncwire.(*MultiplexReader).ReadMsg
    at /home/michael/kr/rsync/internal/rsyncwire/wire.go:50
13  0x00000000005a0f17 in github.com/gokrazy/rsync/internal/rsyncwire.(*MultiplexReader).Read
    at /home/michael/kr/rsync/internal/rsyncwire/wire.go:72
14  0x0000000000528de8 in bufio.(*Reader).Read
    at /home/michael/sdk/go1.23.6/src/bufio/bufio.go:241
15  0x00000000004b72e8 in io.ReadAtLeast
    at /home/michael/sdk/go1.23.6/src/io/io.go:335
16  0x00000000004b74d3 in io.ReadFull
    at /home/michael/sdk/go1.23.6/src/io/io.go:354
17  0x00000000005a19ef in github.com/gokrazy/rsync/internal/rsyncwire.(*Conn).ReadInt32
    at /home/michael/kr/rsync/internal/rsyncwire/wire.go:163
18  0x00000000005b77d2 in github.com/gokrazy/rsync/internal/receiver.(*Transfer).recvIdMapping1
    at /home/michael/kr/rsync/internal/receiver/uidlist.go:16
19  0x00000000005b7ea8 in github.com/gokrazy/rsync/internal/receiver.(*Transfer).RecvIdList
    at /home/michael/kr/rsync/internal/receiver/uidlist.go:52
20  0x00000000005b18db in github.com/gokrazy/rsync/internal/receiver.(*Transfer).ReceiveFileList
    at /home/michael/kr/rsync/internal/receiver/flist.go:229
21  0x0000000000605390 in github.com/gokrazy/rsync/internal/receivermaincmd.clientRun
    at /home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:341
22  0x00000000005fe572 in github.com/gokrazy/rsync/internal/receivermaincmd.socketClient
    at /home/michael/kr/rsync/internal/receivermaincmd/clientserver.go:44
23  0x0000000000602f10 in github.com/gokrazy/rsync/internal/receivermaincmd.rsyncMain
    at /home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:160
24  0x0000000000605e7e in github.com/gokrazy/rsync/internal/receivermaincmd.Main
    at /home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:394
25  0x0000000000606653 in main.main
    at /home/michael/kr/rsync/cmd/gokr-rsync/rsync.go:12
26  0x000000000043fa47 in runtime.main
    at /home/michael/sdk/go1.23.6/src/runtime/proc.go:272
27  0x000000000047bd01 in runtime.goexit
    at /home/michael/sdk/go1.23.6/src/runtime/asm_amd64.s:1700
</code></pre><h2 id="save-core-dump">Tip 3: Save a core dump for later</h2>
<p>If you don‚Äôt have time to poke around in the debugger now, you can save a core
dump for later.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Tip:</strong> Check out my <a href="/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/">debugging Go core dumps with
delve</a> blog post from
2024 for more details! This section just explains how to collect core dumps.</div>
  </div>
</aside>

<p>In addition to printing the stack trace on <code>SIGQUIT</code>, we can make the Go runtime
crash the program, which in turn makes the Linux kernel write a core dump, by
running our program with the environment variable
<a href="https://pkg.go.dev/runtime"><code>GOTRACEBACK=crash</code></a>.</p>
<p>Modern Linux systems typically include <a href="https://manpages.debian.org/systemd-coredump.8"><code>systemd-coredump(8)</code></a>
 (but you might need to explicitly install it, for example on
Ubuntu) to collect core dumps (and remove old ones). You can use <a href="https://manpages.debian.org/coredumpctl.1"><code>coredumpctl(1)</code></a>
 to list and work with them. On macOS,
<a href="https://developer.apple.com/forums/thread/694233#695943022">collecting cores is more
involved</a>. I don‚Äôt
know about Windows.</p>
<p>In case your Linux system does not use <code>systemd-coredump</code>, you can use <code>ulimit -c unlimited</code> and set the kernel‚Äôs <code>kernel.core_pattern</code> sysctl setting. You can
find more details and options in the <a href="https://go.dev/wiki/CoreDumpDebugging">CoreDumpDebugging page of the Go
wiki</a>. For this article, we will stick to
<code>coredumpctl</code>:</p>
<pre tabindex="0"><code>% GOTRACEBACK=crash gokr-rsync -rtO --delete rsync://rsync.paas.rpki.ripe.net/repo/ /tmp/rpki-repo
[‚Ä¶]
^\SIGQUIT: quit
[‚Ä¶]
zsh: IOT instruction (core dumped)  GOTRACEBACK=crash gokr-rsync -rtO [‚Ä¶]
</code></pre><p>The last line is what we want to see: it should say ‚Äúcore dumped‚Äù.</p>
<p>This core should now show up in <a href="https://manpages.debian.org/coredumpctl.1"><code>coredumpctl(1)</code></a>
:</p>
<pre tabindex="0"><code>% coredumpctl info
           PID: 414607 (gokr-rsync)
           UID: 1000 (michael)
           GID: 1000 (michael)
        Signal: 6 (ABRT)
     Timestamp: Sat 2025-02-08 10:18:27 CET (12s ago)
  Command Line: gokr-rsync -rtO --delete rsync://rsync.paas.rpki.ripe.net/repo/ /tmp/rpki-repo
    Executable: /bin/gokr-rsync
 Control Group: /user.slice/user-1000.slice/session-1.scope
          Unit: session-1.scope
         Slice: user-1000.slice
       Session: 1
     Owner UID: 1000 (michael)
       Boot ID: 6158dd3b52af4b8384c103a8a336fc02
    Machine ID: ecb5a44f1a5846ad871566e113bf8937
      Hostname: midna
       Storage: /var/lib/systemd/coredump/core.gokr-rsync.1000.6158dd3b52af4b8384c103a8a336fc02.414607.1739006307000000.zst (present)
  Size on Disk: 158.3K
       Message: Process 414607 (gokr-rsync) of user 1000 dumped core.
                
    Module [dso] without build-id.
    Module [dso]
    Stack trace of thread 1604447:
    #0  0x0000000000475a41 runtime.raise.abi0 (/bin/gokr-rsync + 0x75a41)
    #1  0x0000000000451d85 runtime.dieFromSignal (/bin/gokr-rsync + 0x51d85)
    #2  0x00000000004522e6 runtime.sigfwdgo (/bin/gokr-rsync + 0x522e6)
    #3  0x0000000000450c45 runtime.sigtrampgo (/bin/gokr-rsync + 0x50c45)
    #4  0x0000000000475d26 runtime.sigtramp.abi0 (/bin/gokr-rsync + 0x75d26)
    #5  0x0000000000475e20 n/a (/bin/gokr-rsync + 0x75e20)
    ELF object binary architecture: AMD x86-64
</code></pre><p>If you see only hexadecimal addresses followed by <code>n/a (n/a + 0x0)</code>, that means
<code>systemd-coredump</code> could not symbolize (= resolve addresses to function names)
your core dump. Here are a few possible reasons for missing symbolization:</p>
<ul>
<li>Linux 6.12 and 6.13 <a href="https://sourceware.org/bugzilla/show_bug.cgi?id=32713">produced core dumps that elfutils cannot
symbolize</a>. <code>systemd-coredump</code>
uses elfutils for symbolization, so avoid 6.12/6.13 in favor of using 6.14 or
newer.</li>
<li>With systemd v234-v256, <code>systemd-coredump</code> did not have permission to look
into programs living in the <code>/home</code> directory (fixed with <a href="https://github.com/systemd/systemd/commit/4ac1755be2d6c141fae7e57c42936e507c5b54e3">commit
<code>4ac1755</code></a>
in systemd v257+).
<ul>
<li>Similarly, <code>systemd-coredump</code> runs with
<a href="http://manpages.debian.org/systemd.exec"><code>PrivateTmp=yes</code></a>, meaning it
won‚Äôt be able to access programs you place in <code>/tmp</code>.</li>
</ul>
</li>
<li>Go builds with debug symbols by default, but maybe you are explicitly
stripping debug symbols in your build, by building with <code>-ldflags=-w</code>?</li>
</ul>
<p>We can now use <a href="https://manpages.debian.org/coredumpctl.1"><code>coredumpctl(1)</code></a>
 to launch delve for
this program + core dump:</p>
<pre tabindex="0"><code>% coredumpctl debug --debugger=dlv --debugger-arguments=core
[‚Ä¶]
Type &#39;help&#39; for list of commands.
(dlv) gr 1
Switched from 0 to 1 (thread 414607)
(dlv) bt
[‚Ä¶]
16  0x00000000004b74d3 in io.ReadFull
    at /home/michael/sdk/go1.23.6/src/io/io.go:354
17  0x00000000005a19ef in github.com/gokrazy/rsync/internal/rsyncwire.(*Conn).ReadInt32
    at /home/michael/kr/rsync/internal/rsyncwire/wire.go:163
18  0x00000000005b77d2 in github.com/gokrazy/rsync/internal/receiver.(*Transfer).recvIdMapping1
    at /home/michael/kr/rsync/internal/receiver/uidlist.go:16
19  0x00000000005b7ea8 in github.com/gokrazy/rsync/internal/receiver.(*Transfer).RecvIdList
    at /home/michael/kr/rsync/internal/receiver/uidlist.go:52
20  0x00000000005b18db in github.com/gokrazy/rsync/internal/receiver.(*Transfer).ReceiveFileList
    at /home/michael/kr/rsync/internal/receiver/flist.go:229
21  0x0000000000605390 in github.com/gokrazy/rsync/internal/receivermaincmd.clientRun
    at /home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:341
22  0x00000000005fe572 in github.com/gokrazy/rsync/internal/receivermaincmd.socketClient
    at /home/michael/kr/rsync/internal/receivermaincmd/clientserver.go:44
23  0x0000000000602f10 in github.com/gokrazy/rsync/internal/receivermaincmd.rsyncMain
    at /home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:160
24  0x0000000000605e7e in github.com/gokrazy/rsync/internal/receivermaincmd.Main
    at /home/michael/kr/rsync/internal/receivermaincmd/receivermaincmd.go:394
25  0x0000000000606653 in main.main
    at /home/michael/kr/rsync/cmd/gokr-rsync/rsync.go:12
26  0x000000000043fa47 in runtime.main
    at /home/michael/sdk/go1.23.6/src/runtime/proc.go:272
27  0x000000000047bd01 in runtime.goexit
    at /home/michael/sdk/go1.23.6/src/runtime/asm_amd64.s:1700
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>In my experience, in the medium to long term, it always pays off to set up your
environment such that you can debug your programs conveniently. I strongly
encourage every programmer (and even users!) to invest time into your
development and debugging setup.</p>
<p>Luckily, Go comes with stack printing functionality by default (just press
<code>Ctrl+\</code>) and we can easily get a core dump out of our Go programs by running
them with <code>GOTRACEBACK=crash</code> ‚Äî provided the system is set up to collect core
dumps.</p>
<p>Together with the delve debugger, this gives us all we need to effectively and
efficiently diagnose problems in Go programs.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Go Protobuf: The new Opaque API]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-12-21-go-protobuf-opaque/"/>
    <id>https://michael.stapelberg.ch/posts/2024-12-21-go-protobuf-opaque/</id>
    <published>2024-12-21T11:06:00+01:00</published>
    <content type="html"><![CDATA[<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">I originally published this post in <a href="https://go.dev/blog">the Go blog</a>, but am
publishing this copy of it in my own blog as well for readers who don‚Äôt follow
the Go blog.</div>
  </div>
</aside>

<p>[<a href="https://en.wikipedia.org/wiki/Protocol_Buffers">Protocol Buffers (Protobuf)</a>
is Google&rsquo;s language-neutral data interchange format. See
<a href="https://protobuf.dev/">protobuf.dev</a>.]</p>
<p>Back in March 2020, we released <a href="https://go.dev/blog/protobuf-apiv2">a major overhaul of the Go Protobuf
API</a>. The <code>google.golang.org/protobuf</code>
package introduced first-class <a href="https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect">support for
reflection</a>,
a <a href="https://pkg.go.dev/google.golang.org/protobuf/types/dynamicpb"><code>dynamicpb</code></a>
implementation and the
<a href="https://pkg.go.dev/google.golang.org/protobuf/testing/protocmp"><code>protocmp</code></a>
package for easier testing.</p>
<p>That release introduced a new protobuf module with a new API. Today, we are
releasing an additional API for generated code, meaning the Go code in the
<code>.pb.go</code> files created by the protocol compiler (<code>protoc</code>). This blog post
explains our motivation for creating a new API and shows you how to use it in
your projects.</p>
<p>To be clear: We are not removing anything. We will continue to support the
existing API for generated code, just like we still support the older protobuf
module (by wrapping the <code>google.golang.org/protobuf</code> implementation). Go is
<a href="https://go.dev/blog/compat">committed to backwards compatibility</a> and this
applies to Go Protobuf, too!</p>
<h2 id="background">Background: the (existing) Open Struct API</h2>
<p>We now call the existing API the Open Struct API, because generated struct types
are open to direct access. In the next section, we will see how it differs from
the new Opaque API.</p>
<p>To work with protocol buffers, you first create a <code>.proto</code> definition file like
this one:</p>
<pre><code>edition = &quot;2023&quot;;  // successor to proto2 and proto3

package log;

message LogEntry {
  string backend_server = 1;
  uint32 request_size = 2;
  string ip_address = 3;
}
</code></pre>
<p>Then, you <a href="https://protobuf.dev/getting-started/gotutorial/">run the protocol compiler
(<code>protoc</code>)</a> to generate code
like the following (in a <code>.pb.go</code> file):</p>
<pre><code>package logpb

type LogEntry struct {
  BackendServer *string
  RequestSize   *uint32
  IPAddress     *string
  // ‚Ä¶internal fields elided‚Ä¶
}

func (l *LogEntry) GetBackendServer() string { ‚Ä¶ }
func (l *LogEntry) GetRequestSize() uint32   { ‚Ä¶ }
func (l *LogEntry) GetIPAddress() string     { ‚Ä¶ }
</code></pre>
<p>Now you can import the generated <code>logpb</code> package from your Go code and call
functions like
<a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Marshal"><code>proto.Marshal</code></a>
to encode <code>logpb.LogEntry</code> messages into protobuf wire format.</p>
<p>You can find more details in the <a href="https://protobuf.dev/reference/go/go-generated/">Generated Code API
documentation</a>.</p>
<h3 id="presence">(Existing) Open Struct API: Field Presence</h3>
<p>An important aspect of this generated code is how <em>field presence</em> (whether a
field is set or not) is modeled. For instance, the above example models presence
using pointers, so you could set the <code>BackendServer</code> field to:</p>
<ol>
<li><code>proto.String(&quot;zrh01.prod&quot;)</code>: the field is set and contains &ldquo;zrh01.prod&rdquo;</li>
<li><code>proto.String(&quot;&quot;)</code>: the field is set (non-<code>nil</code> pointer) but contains an
empty value</li>
<li><code>nil</code> pointer: the field is not set</li>
</ol>
<p>If you are used to generated code not having pointers, you are probably using
<code>.proto</code> files that start with <code>syntax = &quot;proto3&quot;</code>. The field presence behavior
changed over the years:</p>
<ul>
<li><code>syntax = &quot;proto2&quot;</code> uses <em>explicit presence</em> by default</li>
<li><code>syntax = &quot;proto3&quot;</code> used <em>implicit presence</em> by default (where cases 2 and 3
cannot be distinguished and are both represented by an empty string), but was
later extended to allow <a href="https://protobuf.dev/programming-guides/proto3/#field-labels">opting into explicit presence with the <code>optional</code>
keyword</a></li>
<li><code>edition = &quot;2023&quot;</code>, the <a href="https://protobuf.dev/editions/overview/">successor to both proto2 and
proto3</a>, uses <a href="https://protobuf.dev/programming-guides/field_presence/"><em>explicit
presence</em></a> by default</li>
</ul>
<h2 id="opaqueapi">The new Opaque API</h2>
<p>We created the new <em>Opaque API</em> to uncouple the <a href="https://protobuf.dev/reference/go/go-generated/">Generated Code
API</a> from the underlying
in-memory representation. The (existing) Open Struct API has no such separation:
it allows programs direct access to the protobuf message memory. For example,
one could use the <code>flag</code> package to parse command-line flag values into protobuf
message fields:</p>
<pre><code>var req logpb.LogEntry
flag.StringVar(&amp;req.BackendServer, &quot;backend&quot;, os.Getenv(&quot;HOST&quot;), &quot;‚Ä¶&quot;)
flag.Parse() // fills the BackendServer field from -backend flag
</code></pre>
<p>The problem with such a tight coupling is that we can never change how we lay
out protobuf messages in memory. Lifting this restriction enables many
implementation improvements, which we&rsquo;ll see below.</p>
<p>What changes with the new Opaque API? Here is how the generated code from the
above example would change:</p>
<pre><code>package logpb

type LogEntry struct {
  xxx_hidden_BackendServer *string // no longer exported
  xxx_hidden_RequestSize   uint32  // no longer exported
  xxx_hidden_IPAddress     *string // no longer exported
  // ‚Ä¶internal fields elided‚Ä¶
}

func (l *LogEntry) GetBackendServer() string { ‚Ä¶ }
func (l *LogEntry) HasBackendServer() bool   { ‚Ä¶ }
func (l *LogEntry) SetBackendServer(string)  { ‚Ä¶ }
func (l *LogEntry) ClearBackendServer()      { ‚Ä¶ }
// ‚Ä¶
</code></pre>
<p>With the Opaque API, the struct fields are hidden and can no longer be
directly accessed. Instead, the new accessor methods allow for getting, setting,
or clearing a field.</p>
<h3 id="lessmemory">Opaque structs use less memory</h3>
<p>One change we made to the memory layout is to model field presence for
elementary fields more efficiently:</p>
<ul>
<li>The (existing) Open Struct API uses pointers, which adds a 64-bit word to the
space cost of the field.</li>
<li>The Opaque API uses <a href="https://en.wikipedia.org/wiki/Bit_field">bit
fields</a>, which require one bit per
field (ignoring padding overhead).</li>
</ul>
<p>Using fewer variables and pointers also lowers load on the allocator and on the
garbage collector.</p>
<p>The performance improvement depends heavily on the shapes of your protocol
messages: The change only affects elementary fields like integers, bools, enums,
and floats, but not strings, repeated fields, or submessages (because it is
<a href="https://protobuf.dev/reference/go/opaque-faq/#memorylayout">less
profitable</a>
for those types).</p>
<p>Our benchmark results show that messages with few elementary fields exhibit
performance that is as good as before, whereas messages with more elementary
fields are decoded with significantly fewer allocations:</p>
<pre><code>             ‚îÇ Open Struct API ‚îÇ             Opaque API             ‚îÇ
             ‚îÇ    allocs/op    ‚îÇ  allocs/op   vs base               ‚îÇ
Prod#1          360.3k ¬± 0%       360.3k ¬± 0%  +0.00% (p=0.002 n=6)
Search#1       1413.7k ¬± 0%       762.3k ¬± 0%  -46.08% (p=0.002 n=6)
Search#2        314.8k ¬± 0%       132.4k ¬± 0%  -57.95% (p=0.002 n=6)
</code></pre>
<p>Reducing allocations also makes decoding protobuf messages more efficient:</p>
<pre><code>             ‚îÇ Open Struct API ‚îÇ             Opaque API            ‚îÇ
             ‚îÇ   user-sec/op   ‚îÇ user-sec/op  vs base              ‚îÇ
Prod#1         55.55m ¬± 6%        55.28m ¬± 4%  ~ (p=0.180 n=6)
Search#1       324.3m ¬± 22%       292.0m ¬± 6%  -9.97% (p=0.015 n=6)
Search#2       67.53m ¬± 10%       45.04m ¬± 8%  -33.29% (p=0.002 n=6)
</code></pre>
<p>(All measurements done on an AMD Castle Peak Zen 2. Results on ARM and Intel
CPUs are similar.)</p>
<p>Note: proto3 with implicit presence similarly does not use pointers, so you will
not see a performance improvement if you are coming from proto3. If you were
using implicit presence for performance reasons, forgoing the convenience of
being able to distinguish empty fields from unset ones, then the Opaque API now
makes it possible to use explicit presence without a performance penalty.</p>
<h3 id="lazydecoding">Motivation: Lazy Decoding</h3>
<p>Lazy decoding is a performance optimization where the contents of a submessage
are decoded when first accessed instead of during
<a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Unmarshal"><code>proto.Unmarshal</code></a>. Lazy
decoding can improve performance by avoiding unnecessarily decoding fields which
are never accessed.</p>
<p>Lazy decoding can&rsquo;t be supported safely by the (existing) Open Struct API. While
the Open Struct API provides getters, leaving the (un-decoded) struct fields
exposed would be extremely error-prone. To ensure that the decoding logic runs
immediately before the field is first accessed, we must make the field private
and mediate all accesses to it through getter and setter functions.</p>
<p>This approach made it possible to implement lazy decoding with the Opaque
API. Of course, not every workload will benefit from this optimization, but for
those that do benefit, the results can be spectacular: We have seen logs
analysis pipelines that discard messages based on a top-level message condition
(e.g. whether <code>backend_server</code> is one of the machines running a new Linux kernel
version) and can skip decoding deeply nested subtrees of messages.</p>
<p>As an example, here are the results of the micro-benchmark we included,
demonstrating how lazy decoding saves over 50% of the work and over 87% of
allocations!</p>
<pre><code>                  ‚îÇ   nolazy    ‚îÇ                lazy                ‚îÇ
                  ‚îÇ   sec/op    ‚îÇ   sec/op     vs base               ‚îÇ
Unmarshal/lazy-24   6.742¬µ ¬± 0%   2.816¬µ ¬± 0%  -58.23% (p=0.002 n=6)

                  ‚îÇ    nolazy    ‚îÇ                lazy                 ‚îÇ
                  ‚îÇ     B/op     ‚îÇ     B/op      vs base               ‚îÇ
Unmarshal/lazy-24   3.666Ki ¬± 0%   1.814Ki ¬± 0%  -50.51% (p=0.002 n=6)

                  ‚îÇ   nolazy    ‚îÇ               lazy                ‚îÇ
                  ‚îÇ  allocs/op  ‚îÇ allocs/op   vs base               ‚îÇ
Unmarshal/lazy-24   64.000 ¬± 0%   8.000 ¬± 0%  -87.50% (p=0.002 n=6)
</code></pre>
<h3 id="pointercomparison">Motivation: reduce pointer comparison mistakes</h3>
<p>Modeling field presence with pointers invites pointer-related bugs.</p>
<p>Consider an enum, declared within the <code>LogEntry</code> message:</p>
<pre><code>message LogEntry {
  enum DeviceType {
    DESKTOP = 0;
    MOBILE = 1;
    VR = 2;
  };
  DeviceType device_type = 1;
}
</code></pre>
<p>A simple mistake is to compare the <code>device_type</code> enum field like so:</p>
<pre><code>if cv.DeviceType == logpb.LogEntry_DESKTOP.Enum() { // incorrect!
</code></pre>
<p>Did you spot the bug? The condition compares the memory address instead of the
value. Because the <code>Enum()</code> accessor allocates a new variable on each call, the
condition can never be true. The check should have read:</p>
<pre><code>if cv.GetDeviceType() == logpb.LogEntry_DESKTOP {
</code></pre>
<p>The new Opaque API prevents this mistake: Because fields are hidden, all access
must go through the getter.</p>
<h3 id="accidentalsharing">Motivation: reduce accidental sharing mistakes</h3>
<p>Let&rsquo;s consider a slightly more involved pointer-related bug. Assume you are
trying to stabilize an RPC service that fails under high load. The following
part of the request middleware looks correct, but still the entire service goes
down whenever just one customer sends a high volume of requests:</p>
<pre><code>logEntry.IPAddress = req.IPAddress
logEntry.BackendServer = proto.String(hostname)
// The redactIP() function redacts IPAddress to 127.0.0.1,
// unexpectedly not just in logEntry *but also* in req!
go auditlog(redactIP(logEntry))
if quotaExceeded(req) {
	// BUG: All requests end up here, regardless of their source.
	return fmt.Errorf(&quot;server overloaded&quot;)
}
</code></pre>
<p>Did you spot the bug? The first line accidentally copied the pointer (thereby
sharing the pointed-to variable between the <code>logEntry</code> and <code>req</code> messages)
instead of its value. It should have read:</p>
<pre><code>logEntry.IPAddress = proto.String(req.GetIPAddress())
</code></pre>
<p>The new Opaque API prevents this problem as the setter takes a value
(<code>string</code>) instead of a pointer:</p>
<pre><code>logEntry.SetIPAddress(req.GetIPAddress())
</code></pre>
<h3 id="reflection">Motivation: Fix Sharp Edges: reflection</h3>
<p>To write code that works not only with a specific message type
(e.g. <code>logpb.LogEntry</code>), but with any message type, one needs some kind of
reflection. The previous example used a function to redact IP addresses. To work
with any type of message, it could have been defined as <code>func redactIP(proto.Message) proto.Message { ‚Ä¶ }</code>.</p>
<p>Many years ago, your only option to implement a function like <code>redactIP</code> was to
reach for <a href="https://go.dev/blog/laws-of-reflection">Go&rsquo;s <code>reflect</code> package</a>,
which resulted in very tight coupling: you had only the generator output and had
to reverse-engineer what the input protobuf message definition might have looked
like. The <a href="https://go.dev/blog/protobuf-apiv2"><code>google.golang.org/protobuf</code> module
release</a> (from March 2020) introduced
<a href="https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect">Protobuf
reflection</a>,
which should always be preferred: Go&rsquo;s <code>reflect</code> package traverses the data
structure&rsquo;s representation, which should be an implementation detail. Protobuf
reflection traverses the logical tree of protocol messages without regard to its
representation.</p>
<p>Unfortunately, merely <em>providing</em> protobuf reflection is not sufficient and
still leaves some sharp edges exposed: In some cases, users might accidentally
use Go reflection instead of protobuf reflection.</p>
<p>For example, encoding a protobuf message with the <code>encoding/json</code> package (which
uses Go reflection) was technically possible, but the result is not <a href="https://protobuf.dev/programming-guides/proto3/#json">canonical
Protobuf JSON
encoding</a>. Use the
<a href="https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson"><code>protojson</code></a>
package instead.</p>
<p>The new Opaque API prevents this problem because the message struct fields are
hidden: accidental usage of Go reflection will see an empty message. This is
clear enough to steer developers towards protobuf reflection.</p>
<h3 id="idealmemory">Motivation: Making the ideal memory layout possible</h3>
<p>The benchmark results from the <a href="#lessmemory">More Efficient Memory
Representation</a> section have already shown that protobuf
performance heavily depends on the specific usage: How are the messages defined?
Which fields are set?</p>
<p>To keep Go Protobuf as fast as possible for <em>everyone</em>, we cannot implement
optimizations that help only one program, but hurt the performance of other
programs.</p>
<p>The Go compiler used to be in a similar situation, up until <a href="https://go.dev/blog/go1.20">Go 1.20 introduced
Profile-Guided Optimization (PGO)</a>. By recording the
production behavior (through <a href="https://go.dev/blog/pprof">profiling</a>) and feeding
that profile back to the compiler, we allow the compiler to make better
trade-offs <em>for a specific program or workload</em>.</p>
<p>We think using profiles to optimize for specific workloads is a promising
approach for further Go Protobuf optimizations. The Opaque API makes those
possible: Program code uses accessors and does not need to be updated when the
memory representation changes, so we could, for example, move rarely set fields
into an overflow struct.</p>
<h2 id="migration">Migration</h2>
<p>You can migrate on your own schedule, or even not at all‚Äîthe (existing) Open
Struct API will not be removed. But, if you‚Äôre not on the new Opaque API, you
won‚Äôt benefit from its improved performance, or future optimizations that target
it.</p>
<p>We recommend you select the Opaque API for new development. Protobuf Edition
2024 (see <a href="https://protobuf.dev/editions/overview/">Protobuf Editions Overview</a>
if you are not yet familiar) will make the Opaque API the default.</p>
<h3 id="hybridapi">The Hybrid API</h3>
<p>Aside from the Open Struct API and Opaque API, there is also the Hybrid API,
which keeps existing code working by keeping struct fields exported, but also
enabling migration to the Opaque API by adding the new accessor methods.</p>
<p>With the Hybrid API, the protobuf compiler will generate code on two API levels:
the <code>.pb.go</code> is on the Hybrid API, whereas the <code>_protoopaque.pb.go</code> version is
on the Opaque API and can be selected by building with the <code>protoopaque</code> build
tag.</p>
<h3 id="rewriting">Rewriting Code to the Opaque API</h3>
<p>See the <a href="https://protobuf.dev/reference/go/opaque-migration/">migration
guide</a>
for detailed instructions. The high-level steps are:</p>
<ol>
<li>Enable the Hybrid API.</li>
<li>Update existing code using the <code>open2opaque</code> migration tool.</li>
<li>Switch to the Opaque API.</li>
</ol>
<h3 id="publishing">Advice for published generated code: Use Hybrid API</h3>
<p>Small usages of protobuf can live entirely within the same repository, but
usually, <code>.proto</code> files are shared between different projects that are owned by
different teams. An obvious example is when different companies are involved: To
call Google APIs (with protobuf), use the <a href="https://github.com/googleapis/google-cloud-go">Google Cloud Client Libraries for
Go</a> from your project. Switching
the Cloud Client Libraries to the Opaque API is not an option, as that would be
a breaking API change, but switching to the Hybrid API is safe.</p>
<p>Our advice for such packages that publish generated code (<code>.pb.go</code> files) is to
switch to the Hybrid API please! Publish both the <code>.pb.go</code> and the
<code>_protoopaque.pb.go</code> files, please. The <code>protoopaque</code> version allows your
consumers to migrate on their own schedule.</p>
<h3 id="enablelazy">Enabling Lazy Decoding</h3>
<p>Lazy decoding is available (but not enabled) once you migrate to the Opaque API!
üéâ</p>
<p>To enable: in your <code>.proto</code> file, annotate your message-typed fields with the
<code>[lazy = true]</code> annotation.</p>
<p>To opt out of lazy decoding (despite <code>.proto</code> annotations), the <a href="https://pkg.go.dev/google.golang.org/protobuf/runtime/protolazy"><code>protolazy</code>
package
documentation</a>
describes the available opt-outs, which affect either an individual Unmarshal
operation or the entire program.</p>
<h2 id="nextsteps">Next Steps</h2>
<p>By using the open2opaque tool in an automated fashion over the last few years,
we have converted the vast majority of Google‚Äôs <code>.proto</code> files and Go code to
the Opaque API. We continuously improved the Opaque API implementation as we
moved more and more production workloads to it.</p>
<p>Therefore, we expect you should not encounter problems when trying the Opaque
API. In case you do encounter any issues after all, please <a href="https://github.com/golang/protobuf/issues/">let us know on the
Go Protobuf issue tracker</a>.</p>
<p>Reference documentation for Go Protobuf can be found on <a href="https://protobuf.dev/reference/go/">protobuf.dev ‚Üí Go
Reference</a>.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Get a solar panel for your balcony now ‚òÄÔ∏è]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-12-10-solar-panel-for-your-balcony/"/>
    <id>https://michael.stapelberg.ch/posts/2024-12-10-solar-panel-for-your-balcony/</id>
    <published>2024-12-10T17:13:00+01:00</published>
    <content type="html"><![CDATA[<p>A year ago, I got a solar panel for my balcony ‚Äî an easy way to vote with your
wallet to convert more of the world‚Äôs energy usage to solar power. That was a
great decision and I would recommend everyone get a solar panel (or two)!</p>
<h2 id="its-called-plug-in-solar-panel-because-you-can-just-plug-it-in">It‚Äôs called plug-in solar panel because you can just plug it in</h2>
<p>In my experience, many people are surprised about the basics of how power works:
You do not need to connect devices to a battery in order to enjoy solar
power. You can just plug in the solar panel into your household electricity
setup. Any of your consumers (like a TV, or electric cooktop) will now use the
power that your solar panel produces before consuming power from the grid.</p>
<p>Here‚Äôs the panel I have (Weber barbecue for scale). As you can see, the panel is
not yet mounted at an angle, just hung over the balcony. The black box at the
back of the panel is the inverter (‚ÄúWechselrichter‚Äù). You connect the panel on
one side and get electricity out the other side.</p>
<p><img src="IMG_2882.jpg" alt=""></p>
<h2 id="which-solar-panel-to-buy">Which solar panel to buy?</h2>
<p>There are two big questions to answer when chosing a solar panel: what peak
capacity should your panel(s) have and which company / seller do you buy from?</p>
<p>Regarding panel capacity: When I look at my energy usage, I see about 100 watts
of baseline load. This includes always-on servers and other home automation
devices. During working hours, running a PC and (power-hungry) monitor adds
another 100 watts or so. Around noon, there is quite a spike in usage when
cooking with my induction cooktop.</p>
<p>Hence, I figured a plug &amp; play solar panel with the smallest size of 385 Wp
would be well equipped to cover baseline usage, compared to the next bigger unit
with 780 Wp, which seems oversized for my usage. Note that a peak capacity of
385 Wp will not necessarily mean that you will measure 380W of output. I did
repeatedly measure energy production exceeding 300W.</p>
<p>Regarding the company, the best offer I found in Switzerland was a small company
called <a href="https://www.erneuer.bar/">erneuer.bar</a>, which means ‚Äúrenewable‚Äù in
German. They ship the panels with barely any packaging in fully electric
vehicles and their offer is eligible for <a href="https://www.topten.ch/private/page/ewz">the topten bonus program from
EWZ</a>, meaning you‚Äôll get back 200 CHF if
you fill in a form.</p>
<p>The specific model I ordered was called ‚Äú385 Wp Plug &amp; Play Solar (DE)‚Äù. Here‚Äôs
the bill:</p>
<table>
<thead>
<tr>
<th>Produkt</th>
<th>Preis</th>
</tr>
</thead>
<tbody>
<tr>
<td>385 Wp Plug &amp; Play Solar (DE)</td>
<td>CHF 520.00</td>
</tr>
<tr>
<td>Mounting kit: balcony, 1 panel</td>
<td>CHF 75.00</td>
</tr>
<tr>
<td>Pre-mount: mounting kit balcony</td>
<td>CHF 60.00</td>
</tr>
<tr>
<td>WiFi measurement myStrom</td>
<td>CHF 55.00</td>
</tr>
<tr>
<td>Shipping</td>
<td>CHF 68.00</td>
</tr>
<tr>
<td>Total</td>
<td>CHF 778.00</td>
</tr>
</tbody>
</table>
<p>Of course, you can save some money in various ways. For example, the measurement
device and pre-mount option are both not required, but convenient. Similarly,
you can probably find solar panels for cheaper, but the offer that erneuer.bar
has put together truly is very convenient and works well, and to me that‚Äôs worth
some money.</p>
<p>One mistake I made when ordering is selecting a 5m cable. It turned out I needed
a 10m cable, so I recommend you measure better than I did (or just select the
longer cable). On the plus side, customer service was excellent: I quickly
received an email response and could just send back my cable in exchange for a
new one.</p>
<h2 id="amortization-who-cares">Amortization? Who cares!</h2>
<p>Many people seem to consider <strong>only the financial aspect</strong> of buying a solar
panel and calculate when the solar panel will have paid for itself. I don‚Äôt
care. My goal is to convert more energy usage to green energy, not to save
money.</p>
<p>Similarly, some people install batteries so that they can use ‚Äútheir‚Äù energy for
themselves, in case the solar panel produces more than they use at that
moment. I couldn‚Äôt care less who uses the energy I produce ‚Äî as long as it‚Äôs
green energy, anyone is welcome to consume it.</p>
<p>(Of course I understand these questions become more important the larger a solar
installation gets. But we‚Äôre talking about one balcony and one solar panel (or
two) covering someone‚Äôs baseline residential household electricity load. Don‚Äôt
overthink it!)</p>
<h2 id="requirement-balcony-power-socket">Requirement: balcony power socket</h2>
<p>Aside from having a balcony, there is only one hard requirement: you need a
power socket.</p>
<p>This requirement is either trivially fulfilled if you already have an outdoor
power socket on your balcony (lucky you!), or might turn out to be the most
involved part of the project. Either way, because an electrician needs to
install power sockets, all you can do is get permission from your landlord and
make an appointment with your electrician of choice.</p>
<p>In terms of cost, you will probably spend a few hundred bucks, depending on your
area‚Äôs cost of living. A good idea that did not occur to me back then: Ask
around in your house if any neighbors would be interested in getting a balcony
power socket, too, and do it all in one go (for cheaper).</p>
<h2 id="bureaucracy">Bureaucracy</h2>
<p>One can easily find stories online about electricity providers and landlords not
permitting the installation of solar panels for‚Ä¶ rather questionable
reasons. For example, some claimed that solar panels could overload the house
electricity infrastructure! A drastic-sounding claim, but nonsense in
practice. Luckily, law makers are recognizing this and are removing barriers.</p>
<h3 id="electricity-provider-and-the-law">Electricity provider and the law</h3>
<p>In Switzerland üá®üá≠, you can connect panels producing up to 600W without an
electrician, but you need to notify your electricity provider.</p>
<p>In Germany üá©üá™, you can connect panels producing up to 800W (as of May 16th 2024)
without an electrician, but <a href="https://www.adac.de/rund-ums-haus/energie/versorgung/balkonkraftwerk-anmelden/">you need to register with the
Bundesnetzagentur</a>.</p>
<p>Be sure to check your country‚Äôs laws and your electricity provider‚Äôs rules and
processes.</p>
<h3 id="landlord-and-neighbors">Landlord and neighbors</h3>
<p>In Switzerland üá®üá≠, you need to <a href="https://www.mieterverband.ch/mv/politik-positionen/news/2024/mustervereinbarung-fuer-bewilligung-von-balkonsolaranlagen.html">ask your landlord for
permission</a>
because if your solar panel were to fall down from the balcony, the landlord
would be liable. Usually, the landlord insists on proper mounting and the tenant
taking over liability. In my case, the landlord also asked me to ensure the
neighbors wouldn‚Äôt mind. I put up a letter, nobody complained, the landlord
accepted.</p>
<p>In Germany üá©üá™, you do need to ask your landlord for permission, but the landlord
pretty much has to agree (<a href="https://www.computerbild.de/artikel/cb-News-Energie-Bundeskabinett-Balkonkraftwerk-Wohnung-Privileg-36684829.html">as of October 17th
2024</a>). The
question is not ‚Äúif‚Äù, but ‚Äúhow‚Äù the landlord wants you to install the solar
panel.</p>
<h2 id="optimizing-the-installation-angle">Optimizing the installation angle</h2>
<p>Earlier I wrote that you can just hang the solar panel onto your balcony and
plug it in. While this is true, there is one factor that is worth optimizing (as
time permits): the installation angle.</p>
<p>If you want more details about the physics background and various considerations
that go into chasing the optimal angle, check out these (German) articles about
<a href="https://www.golem.de/news/balkonkraftwerke-was-bringt-der-neigungswinkel-fuer-den-stromertrag-2405-185599-2.html">optimizing the installation angle (at
Golem)</a>
or <a href="https://www.heise.de/ratgeber/Photovoltaik-Anlagen-dimensionieren-Wirtschaftlichkeit-berechnen-9688108.html?seite=2">sizing solar installations (at
Heise)</a>. I‚Äôll
summarize: the angle is important and can result in twice as much energy
production! Any angle is usually better than no angle.</p>
<p>In my case, I first ‚Äúinstalled‚Äù the solar panel (no angle) at 2023-09-30.</p>
<p>Then, about a month later, I installed it at an angle at 2023-10-28.</p>
<p><img src="IMG_2996.jpg" alt=""></p>
<p>I unfortunately don‚Äôt have a great before/after graph because after I installed
the proper angle mount, there were almost no sunny days.</p>
<p>Instead, I will show you data from a comparable time range (early October) in
2023 (before mounting the panel at an angle) and in 2024 (with a properly
mounted panel). As you can see, the difference is not that huge, but clearly
visible: without an angle mount, I could never exceed 300 Wh per day. With a
proper mount, a number of days exceed 300 Wh:</p>
<table>
<thead>
<tr>
<th></th>
<th>1st</th>
<th>2nd</th>
<th>3rd</th>
<th>4th</th>
<th>5th</th>
<th>6th</th>
<th>7th</th>
<th>8th</th>
<th>9th</th>
<th>10th</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023 üåû Wh</td>
<td>133</td>
<td>268</td>
<td>262</td>
<td>208</td>
<td>271</td>
<td>255</td>
<td>274</td>
<td>277</td>
<td>275</td>
<td>194</td>
</tr>
<tr>
<td>2024 üåû Wh</td>
<td>529</td>
<td>119</td>
<td>246</td>
<td>205</td>
<td>160</td>
<td>324</td>
<td>265</td>
<td>335</td>
<td>73</td>
<td>444</td>
</tr>
</tbody>
</table>
<h2 id="how-much-electricity-does-my-panel-generate">How much electricity does my panel generate?</h2>
<p>The exact electricity production numbers depend on how much sun ends up on the
solar panel. This in turn depends on the weather and how obstructed the solar
panel is (neighbors, trees, ‚Ä¶).</p>
<p>I like measuring things, so I will share some measurements to give you a rough
idea. But note that measuring your solar panel is strictly optional.</p>
<p>On the best recorded day, my panel produced about 1.680 kWh of energy:</p>
<p><img src="2024-06-05-1680Wh.jpg" alt=""></p>
<p>The missing parts before 14:00 are caused by the neighbor‚Äôs house blocking the sun.</p>
<p>Now, compare this best case with the worst case, a January day with little sun
(&lt; 50 Wh):</p>
<p><img src="2024-12-04-solar-january-14th.jpg" alt=""></p>
<p>Let‚Äôs zoom out a bit and consider an entire year instead.</p>
<p>In 2024, the panel produced over 177 kWh so far, or, averaged to the daily
value, ‚âà0.5 kWh/day:</p>
<p><img src="2024-12-04-solar-whole-year.jpg" alt=""></p>
<p>Or, in numeric form (all numbers in kWh):</p>
<table>
<thead>
<tr>
<th>Jan</th>
<th>Feb</th>
<th>Mar</th>
<th>Apr</th>
<th>May</th>
<th>Jun</th>
<th>Jul</th>
<th>Aug</th>
<th>Sep</th>
<th>Oct</th>
<th>Nov</th>
<th>Dec</th>
</tr>
</thead>
<tbody>
<tr>
<td>2.9</td>
<td>6.6</td>
<td>10.9</td>
<td>18.4</td>
<td>29.1</td>
<td>27.7</td>
<td>37.6</td>
<td>22.1</td>
<td>12.0</td>
<td>6.5</td>
<td>3.3</td>
<td>n/a</td>
</tr>
</tbody>
</table>
<!--

% for f in *.csv; do head -2 "$f"; (IFS=$'\n'; for measure in $(cut -d, -f2 "$f" |grep Wh); do units -t "$measure" Wh; done | tr '\n' '+'; echo 0) | bc; done 

| Month   | Solar energy (kWh) |
|---------|--------------------|
| 2024-01 | 2.901              |
| 2024-02 | 6.614              |
| 2024-03 | 10.956             |
| 2024-04 | 18.451             |
| 2024-05 | 29.150             |
| 2024-06 | 27.743             |
| 2024-07 | 37.683             |
| 2024-08 | 22.128             |
| 2024-09 | 12.074             |
| 2024-10 | 6.521              |
| 2024-11 | 3.361              |

-->
<h2 id="conclusion">Conclusion</h2>
<p>A solar panel is a great project to make incremental progress on. It‚Äôs just 3 to
4 simple steps, each of which is valuable on its own:</p>
<ol>
<li>Check with your landlord that installing an outdoor power socket and solar panel is okay.
<ul>
<li>Even if you personally do not go any further with your project, you can
share the result with your neighbors, who might‚Ä¶</li>
</ul>
</li>
<li>Order an outdoor power socket from your (or your landlord‚Äôs) preferred electrician.
<ul>
<li>Power will come in handy for lighting when spending summer evenings on the
balcony.</li>
</ul>
</li>
<li>Order a solar panel and plug it in.</li>
<li>Optional, but recommended: Optimize the mounting angle later.</li>
</ol>
<p>That‚Äôs it! Come on, get started right away üåû</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Testing with Go and PostgreSQL: ephemeral DBs]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-11-19-testing-with-go-and-postgresql-ephemeral-dbs/"/>
    <id>https://michael.stapelberg.ch/posts/2024-11-19-testing-with-go-and-postgresql-ephemeral-dbs/</id>
    <published>2024-11-19T17:04:00+01:00</published>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/PostgreSQL" target="_blank"><img
src="postgresql-elephant-featured.png" align="right" width="125"
style="margin-left: 1.5em" alt="PostgreSQL elephant logo"></a></p>
<p>Let‚Äôs say you created a Go program that stores data in PostgreSQL ‚Äî you
installed PostgreSQL, wrote the Go code, and everything works; great!</p>
<p>But after writing a test for your code, you wonder: how do you best provide
PostgreSQL to your automated tests? Do you start a separate PostgreSQL in a
Docker container, for example, or do you maybe reuse your development PostgreSQL
instance?</p>
<p>I have come to like using <strong>ephemeral PostgreSQL instances</strong> for their many benefits:</p>
<ul>
<li>Easier development setup: no need to <em>configure</em> a database, installation is enough.
<br>
I recommend installing PostgreSQL from your package manager, e.g. <code>apt install postgresql</code> (Debian) or <code>brew install postgresql</code> (macOS). No need for Docker :)</li>
<li>No risk of ‚Äúworks on my machine‚Äù (but nowhere else) problems: every test run
starts with an empty database instance, so your test <em>must</em> set up the database
correctly.</li>
<li>The same approach works locally and on CI systems like GitHub Actions.</li>
</ul>
<p>In this article, I want to show how to integrate ephemeral PostgreSQL instances
into your test setup. The examples are all specific to Go, but I expect that
users of other programming languages and environments can benefit from some of
these techniques as well.</p>
<h2 id="single-package-tests">Single-package tests</h2>
<p>When you are in the very early stages of your project, you might start out with
just a single test file (say, <code>app_test.go</code>), containing one or more test
functions (say, <code>TestSignupForm</code>).</p>
<p>In this scenario, all tests will run in the same process. While it‚Äôs easy enough
to write a few lines of code to start and stop PostgreSQL, I recommend reaching
for an existing test helper package.</p>
<p>Throughout this article, I will be using the
<a href="https://pkg.go.dev/github.com/stapelberg/postgrestest"><code>github.com/stapelberg/postgrestest</code></a>
package, which is based on <a href="https://pkg.go.dev/zombiezen.com/go/postgrestest">Roxy Light‚Äôs <code>postgrestest</code>
package</a> but was extended to
work well in the scenarios this article explains.</p>
<p>To start an ephemeral PostgreSQL instance before your test functions run, you
would <a href="https://pkg.go.dev/testing#hdr-Main">declare a custom <code>TestMain</code>
function</a>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">var</span> pgt <span style="color:#666">*</span>postgrestest.Server
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">TestMain</span>(m <span style="color:#666">*</span>testing.M) {
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">var</span> err <span style="color:#902000">error</span>
</span></span><span style="display:flex;"><span>	pgt, err = postgrestest.<span style="color:#06287e">Start</span>(context.<span style="color:#06287e">Background</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020">panic</span>(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">defer</span> pgt.<span style="color:#06287e">Cleanup</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	m.<span style="color:#06287e">Run</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Starting a PostgreSQL instance takes about:</p>
<ul>
<li>300ms on my <a href="/posts/2022-01-15-high-end-linux-pc/">Intel Core i9 12900K CPU</a> (from 2022)</li>
<li>800ms on my <a href="/posts/2021-11-28-macbook-air-m1/">MacBook Air M1</a> (from 2020)</li>
</ul>
<p>Then, you can create a separate database for each test on this ephemeral
Postgres instance:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">TestSignupForm</span>(t <span style="color:#666">*</span>testing.T) {
</span></span><span style="display:flex;"><span>	pgurl, err <span style="color:#666">:=</span> pgt.<span style="color:#06287e">CreateDatabase</span>(context.<span style="color:#06287e">Background</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		t.<span style="color:#06287e">Fatal</span>(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// test goes here‚Ä¶
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>}
</span></span></code></pre></div><p>Each CreateDatabase call takes about:</p>
<ul>
<li>5-10ms on my <a href="/posts/2022-01-15-high-end-linux-pc/">Intel Core i9 12900K CPU</a> (from 2022)</li>
<li>20ms on my <a href="/posts/2021-11-28-macbook-air-m1/">MacBook Air M1</a> (from 2020)</li>
</ul>
<p>Usually, most projects quickly grow beyond just a single <code>_test.go</code> file.</p>
<p>In one project if mine, I eventually reached over 50 test functions in 25 Go
packages. I stuck to the above approach of adding a custom <code>TestMain</code> to each
package in which my tests needed PostgreSQL, and my test runtimes eventually
looked like this:</p>
<pre tabindex="0"><code># Intel Core i9 12900K
CGO_ENABLED=0 GOGC=off go test -count=1 -fullpath ./...
14,24s user 4,11s system 709% cpu 2,586 total

# MacBook Air M1
CGO_ENABLED=0 GOGC=off go test -count=1 -fullpath ./...
20,23s user 8,67s system 350% cpu 8,257 total
</code></pre><p>That‚Äôs not <em>terrible</em>, but not great either.</p>
<p>If you happen to open a process monitor while running tests, you might have
noticed that there are quite a number of PostgreSQL instances running. This
seems like something to optimize! Shouldn‚Äôt one PostgreSQL instance be enough
for all tests of a test run?</p>
<p>Let‚Äôs review the process model of <code>go test</code> before we can talk about how to
integrate with it.</p>
<h2 id="go-test-process-model">go test process model</h2>
<p>The usual command to run all tests of a Go project is <code>go test ./...</code> (see <a href="https://pkg.go.dev/cmd/go/internal/help#HelpPackages"><code>go help packages</code></a> for
details on the <code>/...</code> pattern syntax), which matches the Go package in the
current directory and all Go packages in its subdirectories.</p>
<p>Each Go package (‚âà directory), including <code>_test.go</code> files, is compiled into a
<em>separate test binary:</em></p>
<pre tabindex="0"><code>% go help test
[‚Ä¶]
&#39;Go test&#39; recompiles each package along with any files with names matching
the file pattern &#34;*_test.go&#34;.
[‚Ä¶]
Each listed package causes the execution of a separate test binary.
[‚Ä¶]
</code></pre><p>These test binaries are then run in parallel. In fact, there are two levels of
parallelism at play here:</p>
<ol>
<li>All test functions (within a single test binary) that call <code>t.Parallel()</code> will be
run in parallel (in batches of size <code>-parallel</code>).</li>
<li><code>go test</code> will run different test binaries in parallel.</li>
</ol>
<p>The documentation explains that the <code>-parallel</code> test flag defaults to
<code>GOMAXPROCS</code> and references the <code>go test</code> parallelism:</p>
<pre tabindex="0"><code>% go help testflag
[‚Ä¶]
-parallel n
    Allow parallel execution of test functions that call t.Parallel, and
    fuzz targets that call t.Parallel when running the seed corpus.
    The value of this flag is the maximum number of tests to run
    simultaneously.
[‚Ä¶]
    By default, -parallel is set to the value of GOMAXPROCS.
    Setting -parallel to values higher than GOMAXPROCS may cause degraded
    performance due to CPU contention, especially when fuzzing.
    Note that -parallel only applies within a single test binary.
    The &#39;go test&#39; command may run tests for different packages
    in parallel as well, according to the setting of the -p flag
    (see &#39;go help build&#39;).
</code></pre><p>The <code>go test</code> parallelism is controlled by the <code>-p</code> flag, which also defaults to
<code>GOMAXPROCS</code>:</p>
<pre tabindex="0"><code>% go help build
[‚Ä¶]
-p n
	the number of programs, such as build commands or
	test binaries, that can be run in parallel.
	The default is GOMAXPROCS, normally the number of CPUs available.
[‚Ä¶]
</code></pre><p>To print <code>GOMAXPROCS</code> on a given machine, we can run a test program like this
<code>gomaxprocs.go</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">import</span> <span style="color:#4070a0">&#34;runtime&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#007020">print</span>(runtime.<span style="color:#06287e">GOMAXPROCS</span>(<span style="color:#40a070">0</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>For me, <code>GOMAXPROCS</code> defaults to the <a href="https://ark.intel.com/content/www/us/en/ark/products/134597/intel-core-i9-12900-processor-30m-cache-up-to-5-10-ghz.html">24 <em>threads</em> of my Intel Core i9 12900K
CPU</a>,
which has 16 <em>cores</em> (8 Performance, 8 Efficiency; only the Performance cores
have Hyper Threading):</p>
<pre tabindex="0"><code>% go run gomaxprocs.go
24
% grep &#39;model name&#39; /proc/cpuinfo | wc -l
24
</code></pre><p>So with a single <code>go test ./...</code> command, we can expect 24 parallel processes
each running 24 tests in parallel. With our current approach, we would start up
to 24 concurrent ephemeral PostgreSQL instances (if we have that many packages),
which seems wasteful to me.</p>
<p>Starting one ephemeral PostgreSQL instance per <code>go test</code> run seems better.</p>
<h2 id="sharing-one-postgresql-among-all-tests">Sharing one PostgreSQL among all tests</h2>
<p>How can we go from starting 24 Postgres instances to starting just one?</p>
<p>First, we need to update our test setup code to work with a passed-in database
URL. For that, we switch from calling
<a href="https://pkg.go.dev/github.com/stapelberg/postgrestest#Server.CreateDatabase"><code>CreateDatabase</code></a>
to using a
<a href="https://pkg.go.dev/github.com/stapelberg/postgrestest#DBCreator"><code>DBCreator</code></a>
for a database identified by a URL. The old code still needs to remain so that
you can run a single test without bothering with <code>PGURL</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">var</span> dbc <span style="color:#666">*</span>postgrestest.DBCreator
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">TestMain</span>(m <span style="color:#666">*</span>testing.M) {
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	<span style="color:#60a0b0;font-style:italic">// It is best to specify the PGURL environment variable so that only
</span></span></span><span style="display:flex; background-color:#d8d8d8"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// one PostgreSQL instance is used for all tests.
</span></span></span><span style="display:flex; background-color:#d8d8d8"><span><span style="color:#60a0b0;font-style:italic"></span>	pgurl <span style="color:#666">:=</span> os.<span style="color:#06287e">Getenv</span>(<span style="color:#4070a0">&#34;PGURL&#34;</span>)
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	<span style="color:#007020;font-weight:bold">if</span> pgurl <span style="color:#666">==</span> <span style="color:#4070a0">&#34;&#34;</span> {
</span></span><span style="display:flex; background-color:#d8d8d8"><span>		<span style="color:#60a0b0;font-style:italic">// &#39;go test&#39; was started directly, start one Postgres per process:
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>		pgt, err <span style="color:#666">:=</span> postgrestest.<span style="color:#06287e">Start</span>(context.<span style="color:#06287e">Background</span>())
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#007020">panic</span>(err)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">defer</span> pgt.<span style="color:#06287e">Cleanup</span>()
</span></span><span style="display:flex;"><span>		pgurl = pgt.<span style="color:#06287e">DefaultDatabase</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	<span style="color:#007020;font-weight:bold">var</span> err <span style="color:#902000">error</span>
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	dbc, err = postgrestest.<span style="color:#06287e">NewDBCreator</span>(pgurl)
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex; background-color:#d8d8d8"><span>		<span style="color:#007020">panic</span>(err)
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	m.<span style="color:#06287e">Run</span>()
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Inside the test function(s), we only need to update the <code>CreateDatabase</code>
receiver name:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">TestSignupForm</span>(t <span style="color:#666">*</span>testing.T) {
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	pgurl, err <span style="color:#666">:=</span> dbc.<span style="color:#06287e">CreateDatabase</span>(context.<span style="color:#06287e">Background</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		t.<span style="color:#06287e">Fatal</span>(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// test goes here‚Ä¶
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>}</span></span></code></pre></div>
<p>Then, we create a new wrapper program (e.g. <code>internal/cmd/initpg/initpg.go</code>)
which calls <code>postgrestest.Start</code> and passes the <code>PGURL</code> environment variable to
the process(es) it starts:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic">// initpg is a small test helper command which starts a Postgres
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic">// instance and makes it available to the wrapped &#39;go test&#39; command.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;context&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;os/exec&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;github.com/stapelberg/postgrestest&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Use the same database driver as in the rest of your project.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	_ <span style="color:#4070a0">&#34;github.com/lib/pq&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">runWrappedCommand</span>(pgurl <span style="color:#902000">string</span>) <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// os.Args[0] is initpg
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// os.Args[1] is --
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// os.Args[2] is go
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// os.Args[3] is test
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// etc.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	wrapped <span style="color:#666">:=</span> exec.<span style="color:#06287e">Command</span>(os.Args[<span style="color:#40a070">2</span>], os.Args[<span style="color:#40a070">3</span>:]<span style="color:#666">...</span>)
</span></span><span style="display:flex;"><span>	wrapped.Stdin = os.Stdin
</span></span><span style="display:flex;"><span>	wrapped.Stdout = os.Stdout
</span></span><span style="display:flex;"><span>	wrapped.Stderr = os.Stderr
</span></span><span style="display:flex;"><span>	wrapped.Env = <span style="color:#007020">append</span>(os.<span style="color:#06287e">Environ</span>(), <span style="color:#4070a0">&#34;PGURL=&#34;</span><span style="color:#666">+</span>pgurl)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> wrapped.<span style="color:#06287e">Run</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;%v: %v&#34;</span>, wrapped.Args, err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">initpg</span>() <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	pgt, err <span style="color:#666">:=</span> postgrestest.<span style="color:#06287e">Start</span>(context.<span style="color:#06287e">Background</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// NOTE: keep reading the article, do not submit as-is
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">defer</span> pgt.<span style="color:#06287e">Cleanup</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Run the wrapped command (&#39;go test&#39;, typically)
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">return</span> <span style="color:#06287e">runWrappedCommand</span>(pgt.<span style="color:#06287e">DefaultDatabase</span>())
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">initpg</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		log.<span style="color:#06287e">Fatal</span>(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="running-the-initpg-wrapper-program">Running the initpg wrapper program</h3>
<p>While we could use <code>go run ./internal/cmd/initpg</code> to compile and run this
wrapper program, it is a bit wasteful to recompile this program over and over
when it rarely changes.</p>
<p>One alternative is to use <code>go install</code> instead of <code>go run</code>. I have two minor
concerns with that:</p>
<ol>
<li>
<p><code>go install</code> installs into the bin directory, which is <code>~/go/bin</code> by default.</p>
<ul>
<li>This means we need to rely on the <code>PATH</code> environment variable containing
the bin directory to run the installed program. Unfortunately, influencing
or determining the <code>go install</code> destination path is tricky.</li>
<li>It would be nice to not litter the user‚Äôs bin directory. I think the bin
directory should contain programs which the user explicitly requested to
install, not helper programs that are only necessary to run tests.</li>
</ul>
</li>
<li>
<p>On my machine, <code>go install</code> takes about 100ms, even when nothing has changed.</p>
</li>
</ol>
<p>I like to define a <code>Makefile</code> in each of my projects with a set of targets that
are consistently named, e.g. <code>make test</code>, <code>make push</code>, etc. Given that I already
use <code>make</code>, I like to set up my <code>Makefile</code> to build initpg in the <code>_bin</code>
directory:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span><span style="color:#06287e">.PHONY</span><span style="color:#666">:</span> test
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#06287e">_bin/initpg</span><span style="color:#666">:</span> internal/cmd/initpg/initpg.go
</span></span><span style="display:flex;"><span>	mkdir -p _bin
</span></span><span style="display:flex;"><span>	go build -o _bin/initpg ./internal/cmd/initpg
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#06287e">test</span><span style="color:#666">:</span> _bin/initpg
</span></span><span style="display:flex;"><span>	./_bin/initpg -- go <span style="color:#007020">test</span> ./...
</span></span></code></pre></div><p>Because <code>initpg.go</code> rarely changes, the program will typically not need to be
recompiled.</p>
<p>Note that this <code>Makefile</code> is only approximately correct: <code>initpg</code>‚Äôs dependency
on <code>postgrestest</code> is not modeled, so you need to delete <code>_bin/initpg</code> to pick up
changes to <code>postgrestest</code>.</p>
<h2 id="performance">Performance</h2>
<p>Let‚Äôs compare the before and after test runtimes on the Intel Core i9 12900K:</p>
<pre tabindex="0"><code># Intel Core i9 12900K: one Postgres for each test
CGO_ENABLED=0 GOGC=off go test -count=1 -fullpath ./...
14,24s user 4,11s system 709% cpu 2,586 total

# Intel Core i9 12900K: one Postgres shared among all tests
CGO_ENABLED=0 GOGC=off ./_bin/initpg -- go test -count=1 -fullpath ./...
11,40s user 3,10s system 659% cpu 2,199 total
</code></pre><p>For comparison, the effect is more pronounced on the MacBook Air M1:</p>
<pre tabindex="0"><code># MacBook Air M1: one Postgres for each test
CGO_ENABLED=0 GOGC=off go test -count=1 -fullpath ./...
20,23s user 8,67s system 350% cpu 8,257 total

# MacBook Air M1: one Postgres shared among all tests
CGO_ENABLED=0 GOGC=off ./_bin/initpg -- go test -count=1 -fullpath ./...
14,25s user 4,36s system 275% cpu 6,752 total
</code></pre><p>Sharing one PostgreSQL instance has reduced the total test runtime for a full
run by about 20%!</p>
<h3 id="why-is-it-sometimes-slower">Why is it sometimes slower?</h3>
<p>We have measurably reduced the runtime of a full test run, but if you pay close
attention during development you will notice that now <strong>every test run is a full
test run</strong>, even when you only change a single package!</p>
<p>Why can Go no longer cache any of the test results? The problem is that the
<code>PGURL</code> environment variable has a different value on each run: the name of the
temporary directory that the <code>postgrestest</code> package uses for its ephemeral
database instance changes on each run.</p>
<p>The documentation on the <code>go test</code> caching behavior explains this in the last
paragraph:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>% go help test
</span></span><span style="display:flex;"><span>[‚Ä¶]
</span></span><span style="display:flex;"><span>In package list mode only, go test caches successful package test
</span></span><span style="display:flex;"><span>results to avoid unnecessary repeated running of tests. When the
</span></span><span style="display:flex;"><span>result of a test can be recovered from the cache, go test will
</span></span><span style="display:flex;"><span>redisplay the previous output instead of running the test binary
</span></span><span style="display:flex;"><span>again. When this happens, go test prints &#39;(cached)&#39; in place of the
</span></span><span style="display:flex;"><span>elapsed time in the summary line.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>The rule for a match in the cache is that the run involves the same
</span></span><span style="display:flex;"><span>test binary and the flags on the command line come entirely from a
</span></span><span style="display:flex;"><span>restricted set of &#39;cacheable&#39; test flags, defined as -benchtime, -cpu,
</span></span><span style="display:flex;"><span>-list, -parallel, -run, -short, -timeout, -failfast, -fullpath and -v.
</span></span><span style="display:flex;"><span>If a run of go test has any test or non-test flags outside this set,
</span></span><span style="display:flex;"><span>the result is not cached. To disable test caching, use any test flag
</span></span><span style="display:flex;"><span>or argument other than the cacheable flags. The idiomatic way to disable
</span></span><span style="display:flex;"><span>test caching explicitly is to use -count=1.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Tests that open files within the package&#39;s source root (usually $GOPATH)
</span></span><span style="display:flex; background-color:#d8d8d8"><span>or that consult environment variables only match future runs in which
</span></span><span style="display:flex; background-color:#d8d8d8"><span>the files and environment variables are unchanged.
</span></span><span style="display:flex;"><span>[‚Ä¶]</span></span></code></pre></div>
<p>(See also <a href="https://github.com/golang/go/issues/22593">Go issue #22593</a> for more details.)</p>
<h3 id="fixing-go-test-caching-env-vars">Fixing Go test caching (env vars)</h3>
<p>For the Go test caching to work, all environment variables our tests access
(including <code>PGURL</code>) need to contain the same value between runs. For us, this
means we cannot use a randomly generated name for the Postgres data directory,
but instead need to use a fixed name.</p>
<p>My <code>postgrestest</code> package offers convenient support for specifying the desired
directory:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">initpg</span>() <span style="color:#902000">error</span> {
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	cacheDir, err <span style="color:#666">:=</span> os.<span style="color:#06287e">UserCacheDir</span>()
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex; background-color:#d8d8d8"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	}
</span></span><span style="display:flex; background-color:#d8d8d8"><span>	pgt, err <span style="color:#666">:=</span> postgrestest.<span style="color:#06287e">Start</span>(context.<span style="color:#06287e">Background</span>(),
</span></span><span style="display:flex; background-color:#d8d8d8"><span>		postgrestest.<span style="color:#06287e">WithDir</span>(filepath.<span style="color:#06287e">Join</span>(cacheDir, <span style="color:#4070a0">&#34;initpg.gus&#34;</span>)))
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">defer</span> pgt.<span style="color:#06287e">Cleanup</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Run the wrapped command (&#39;go test&#39;, typically)
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">return</span> <span style="color:#06287e">runWrappedCommand</span>(pgt.<span style="color:#06287e">DefaultDatabase</span>())
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>When running the tests now, starting with the second run (without any changes),
you should see a ‚Äú (cached)‚Äù suffix printed behind tests that were successfully
cached, and the test runtime should be much shorter ‚Äî under a second in my
project:</p>
<pre tabindex="0"><code>% time ./_bin/initpg -- go test -fullpath ./...
ok  	example/internal/handlers/adminhandler	(cached)
[‚Ä¶]
./_bin/initpg -- go test -fullpath ./...
1,30s user 0,88s system 288% cpu 0,756 total
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>In this article, I have shown how to integrate PostgreSQL into your test
environment in a way that is convenient for developers, light on system
resources and measurably reduces total test time.</p>
<p>Adopting <code>postgrestest</code> seems easy enough to me. If you want to see a complete
example, see <a href="https://github.com/gokrazy/gus/commit/b97c652fd03754ba817bd3c13f18ea6e2e154ef4">how I converted the <code>gokrazy/gus</code> repository to use
<code>postgrestest</code></a>.</p>
<h2 id="further-optimization-potential">Further optimization potential</h2>
<p>Now that we have a detailed understanding of the <code>go test</code> process model and
PostgreSQL startup, we can consider further optimizations. I won‚Äôt actually
implement them in this article, which is already long enough, but maybe you want
to go further in your project‚Ä¶</p>
<h3 id="hide-postgres-startup">Hide Postgres startup</h3>
<p>My journey into ephemeral PostgreSQL instances started with <a href="https://eradman.com/ephemeralpg/">Eric Radman‚Äôs
<code>pg_tmp</code> shell script</a>. Ultimately, I ended up
with the <code>postgrestest</code> Go solution that I much prefer: I don‚Äôt need to ship (or
require) the <code>pg_tmp</code> shell script with my projects. The fewer languages, the
better.</p>
<p>Also, <code>pg_tmp</code> is not a wrapper program, which resulted in problems regarding
cleanup: A wrapper program can reliably trigger cleanup when tests are done,
whereas <code>pg_tmp</code> has to poll for activity. Polling is prone to running too
quickly (cleaning up a database before tests were even started) or too slowly,
requiring constant tuning.</p>
<p>But, <code>pg_tmp</code> does have quite a clever concept of preparing PostgreSQL instances
in the background and thereby amortizing startup costs between test runs.</p>
<p>There might be an even simpler approach that could amount to the same startup
latency hiding behavior: Turning the sequential startup (<code>initpg</code> needs to wait
for PostgreSQL to start and only then can begin running <code>go test</code>) into parallel
startup using Socket Activation.</p>
<p>Note that PostgreSQL does not seem to support Socket Activation natively, so
probably one would need to implement a program-agnostic solution into <code>initpg</code>
as described in this <a href="https://unix.stackexchange.com/questions/352495/systemd-on-demand-start-of-services-like-postgresql-and-mysql-that-do-not-yet-s">Unix Stack Exchange
question</a>
or <a href="https://andreas.rammhold.de/posts/postgresql-tmpfs-with-sytemdsocket-activation-for-local-ephemeral-data-during-development/">Andreas Rammhold‚Äôs blog
post</a>.</p>
<h3 id="de-duplicate-schema-creation-cost">De-duplicate schema creation cost</h3>
<p>For isolation, we use a different PostgreSQL database for every test. This means
we need to initialize the database schema for each of these per-test databases.</p>
<p>We can eliminate this duplicative work by <strong>sharing the same database</strong> across
all tests, provided we have another way of isolating the tests from each other.</p>
<p>The <a href="https://github.com/DATA-DOG/go-txdb"><code>txdb</code> package</a> provides a standard
<code>database/sql.Driver</code> which runs all queries of an entire test in a single
transaction. Using <code>txdb</code> means we can now safely share the same database
between tests without running into conflicts, failing tests, or needing extra
locking.</p>
<p>Be sure to initialize the database schema <em>before</em> using <code>txdb</code> to share the
database: long-running transactions needs to lock the PostgreSQL catalog as soon
as you change the database schema (i.e. create or modify tables), meaning only
one test can run at a time. (Using <a href="https://sourcegraph.com/blog/go/an-introduction-to-go-tool-trace-rhys-hiltner"><code>go tool trace</code></a>
is a great way to understand such performance issues.)</p>
<p>I am aware that some people don‚Äôt like the transaction isolation approach. For
example, <a href="https://gajus.com/blog/setting-up-postgre-sql-for-running-integration-tests">Gajus Kuizinas‚Äôs blog post ‚ÄúSetting up PostgreSQL for running
integration
tests‚Äù</a>
finds that transactions don‚Äôt work in their (JavaScript) setup. I don‚Äôt share
this experience at all: In Go, the <a href="https://github.com/DATA-DOG/go-txdb"><code>txdb</code>
package</a> works well, even with nested
transactions. I have used <code>txdb</code> for months without problems.</p>
<p>In my tests, eliminating this duplicative schema initialization work saves
about:</p>
<ul>
<li>0.5s on my Intel Core i9 12900K</li>
<li>1s on the MacBook Air M1</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Debug Go core dumps with delve: export byte slices]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/"/>
    <id>https://michael.stapelberg.ch/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/</id>
    <published>2024-10-22T17:22:23+02:00</published>
    <content type="html"><![CDATA[<p>Not all bugs can easily be reproduced ‚Äî sometimes, all you have is a core dump
from a crashing program, but no idea about the triggering conditions of the bug
yet.</p>
<p>When using Go, we can use <a href="https://github.com/go-delve/delve">the delve
debugger</a> for core dump debugging, but I had
trouble figuring out how to save byte slice contents (for example: the incoming
request causing the crash) from memory into a file for further analysis, so this
article walks you through how to do it.</p>
<h2 id="simple-example">Simple Example</h2>
<p>Let‚Äôs imagine the following scenario: You are working on a performance
optimization in <a href="https://pkg.go.dev/google.golang.org/protobuf">Go Protobuf</a> and
have accidentally badly broken the <a href="https://pkg.go.dev/google.golang.org/protobuf/proto#Marshal"><code>proto.Marshal</code>
function</a>. The
function is now returning an error, so let‚Äôs run one of the failing tests with
delve:</p>
<pre tabindex="0"><code>~/protobuf/proto master % dlv test
(dlv) b ExampleMarshal
(dlv) c
&gt; [Breakpoint 1] google.golang.org/protobuf/proto_test.ExampleMarshal() ./encode_test.go:293 (hits goroutine(1):1 total:1) (PC: 0x9d6c96)
(dlv) next 4
&gt; google.golang.org/protobuf/proto_test.ExampleMarshal() ./encode_test.go:297 (PC: 0xb54495)
   292: // [google.golang.org/protobuf/types/known/durationpb.New].
   293: func ExampleMarshal() {
   294: b, err := proto.Marshal(&amp;durationpb.Duration{
   295: Nanos: 125,
   296: })
=&gt; 297: if err != nil {
   298: panic(err)
   299: }
   300:
   301: fmt.Printf(&#34;125ns encoded into %d bytes of Protobuf wire format:\n% x\n&#34;, len(b), b)
   302:
</code></pre><p>Go Protobuf happens to return the already encoded bytes even when returning an
error, so we can inspect the <code>b</code> byte slice to see how far the encoding got
before the error happened:</p>
<pre tabindex="0"><code>(dlv) print b
[]uint8 len: 2, cap: 2, [16,125]
</code></pre><p>In this case, we can see that the entire (trivial) message was encoded, so our
error must happen at a later stage ‚Äî this allows us to rule out a large chunk of
code in our search for the bug.</p>
<p>But what would we do if a longer part of the message was displayed and we wanted
to load it into a different tool for further analysis, e.g. the excellent
<a href="https://github.com/protocolbuffers/protoscope">protoscope</a>?</p>
<p>The low-tech approach is to print the contents and copy&amp;paste from the delve
output into an editor or similar. This stops working as soon as your data
contains non-printable characters.</p>
<p>We have multiple options to export the byte slice to a file:</p>
<ol>
<li>
<p>We could add <code>os.WriteFile(&quot;/tmp/b.raw&quot;, b, 0644)</code> to the source code and
re-run the test. This is definitely the simplest option, as it works with or
without a debugger.</p>
</li>
<li>
<p>As long as delve is connected to a running program, we can use delve‚Äôs call
command to just execute the same code without having to add it to our source:</p>
<pre tabindex="0"><code>(dlv) call os.WriteFile(&#34;/tmp/b.raw&#34;, b, 0644)
(dlv)
</code></pre></li>
</ol>
<p>Notably, both options only work when you can debug interactively. For the first
option, you need to be able to change the source. The second option requires
that delve is attached to a running process that you can afford to pause and
interactively control.</p>
<p>These are trivial requirements when running a unit tests on your local machine,
but get much harder when debugging an RPC service that crashes with specific
requests, as you need to only run your changed debugging code for the
troublesome requests, skipping the unproblematic requests that should still be
handled normally.</p>
<h2 id="core-dump-debugging-with-go">Core dump debugging with Go</h2>
<p>So let‚Äôs switch example: we are no longer working on Go Protobuf. Instead, we
now need to debug an RPC service where certain requests crash the service. We‚Äôll
use core dump debugging!</p>















<a href="https://michael.stapelberg.ch/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/core-memory-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/core-memory-featured_huc92a382266793767583fa56b2a20c9d0_1575273_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/core-memory-featured_huc92a382266793767583fa56b2a20c9d0_1575273_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-10-22-debug-go-core-dumps-delve-export-bytes/core-memory-featured_huc92a382266793767583fa56b2a20c9d0_1575273_600x0_resize_q75_box.jpg"
  alt="Core memory" title="Core memory"
  width="600"
  height="516"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>In case you‚Äôre wondering: The name ‚Äú<a href="https://en.wikipedia.org/wiki/Core_dump">core
dump</a>‚Äù comes from <a href="https://en.wikipedia.org/wiki/Magnetic-core_memory">magnetic-core
memory</a>. These days we
should probably say ‚Äúmemory dump‚Äù instead. The picture above shows an exhibit
from the <a href="https://mitmuseum.mit.edu/">MIT Museum</a> (<em>Core Memory Unit, Bank C
(from Project Whirlwind, 1953-1959))</em>, a core memory unit with 4 KB of capacity.</p>
<p>To make Go write a core dump when panicing, run your program with the
environment variable <code>GOTRACEBACK=crash</code> set (all possible values are documented
<a href="https://pkg.go.dev/runtime">in the <code>runtime</code> package</a>).</p>
<p>You also need to ensure your system is set up to collect core dumps, as they are
typically discarded by default:</p>
<ul>
<li>On Linux, the easiest way is to install <a href="https://manpages.debian.org/systemd-coredump.8"><code>systemd-coredump(8)</code></a>
, after which core dumps will automatically be collected. You
can use <a href="https://manpages.debian.org/coredumpctl.1"><code>coredumpctl(1)</code></a>
 to list and work with them.</li>
<li>On macOS, you can enable core dump collection, but <a href="https://github.com/go-delve/delve/issues/2026">delve cannot open macOS
core dumps</a>. Luckily, macOS is
rarely used for production servers.</li>
<li>I don‚Äôt know about Windows and other systems.</li>
</ul>
<p>You can find more details and options in the <a href="https://go.dev/wiki/CoreDumpDebugging">CoreDumpDebugging page of the Go
wiki</a>. For this article, we will stick to
the <code>coredumpctl</code> route:</p>
<p>We‚Äôll use the <a href="https://grpc.io/docs/languages/go/quickstart/">gRPC Go Quick start
example</a>, a greeter client/server
program, and add a <code>panic()</code> call to the server <code>SayHello</code> handler:</p>
<pre tabindex="0"><code>% cd greeter_server
% go build -gcflags=all=&#34;-N -l&#34;  # disable optimizations
% GOTRACEBACK=crash ./greeter_server
2024/10/19 21:48:01 server listening at [::]:50051
2024/10/19 21:48:03 Received: world
panic: oh no!

goroutine 5 gp=0xc000007c00 m=5 mp=0xc000100008 [running]:
panic({0x83ca60?, 0x9a3710?})
	/home/michael/sdk/go1.23.0/src/runtime/panic.go:804 +0x168 fp=0xc000169850 sp=0xc0001697a0 pc=0x46fe88
main.(*server).SayHello(0xcbb840?, {0x877200?, 0xc000094900?}, 0x4a6f25?)
	/home/michael/go/src/github.com/grpc/grpc-go/examples/helloworld/greeter_server/main.go:45 +0xbf fp=0xc0001698c0 sp=0xc000169850 pc=0x8037ff
[‚Ä¶]
signal: aborted (core dumped)
</code></pre><p>The last line is what we want to see: it should say ‚Äúcore dumped‚Äù.</p>
<p>We can now use <a href="https://manpages.debian.org/coredumpctl.1"><code>coredumpctl(1)</code></a>
 to launch delve for
this program + core dump:</p>
<pre tabindex="0"><code>% coredumpctl debug --debugger=dlv --debugger-arguments=core
           PID: 1729467 (greeter_server)
           UID: 1000 (michael)
           GID: 1000 (michael)
        Signal: 6 (ABRT)
     Timestamp: Sat 2024-10-19 21:50:12 CEST (1min 49s ago)
  Command Line: ./greeter_server
    Executable: /home/michael/go/src/github.com/grpc/grpc-go/examples/helloworld/greeter_server/greeter_server
 Control Group: /user.slice/user-1000.slice/session-1.scope
          Unit: session-1.scope
         Slice: user-1000.slice
       Session: 1
     Owner UID: 1000 (michael)
       Storage: /var/lib/systemd/coredump/core.greeter_server.1000.zst (present)
  Size on Disk: 204.7K
       Message: Process 1729467 (greeter_server) of user 1000 dumped core.
                
                Module /home/michael/go/src/github.com/grpc/grpc-go/examples/helloworld/greeter_server/greeter_server without build-id.
                Stack trace of thread 1729470:
                #0  0x0000000000479461 n/a (greeter_server + 0x79461)
[‚Ä¶]
                ELF object binary architecture: AMD x86-64

Type &#39;help&#39; for list of commands.
(dlv) bt
 0  0x0000000000479461 in runtime.raise
    at /home/michael/sdk/go1.23.0/src/runtime/sys_linux_amd64.s:154
 1  0x0000000000451a85 in runtime.dieFromSignal
    at /home/michael/sdk/go1.23.0/src/runtime/signal_unix.go:942
 2  0x00000000004520e6 in runtime.sigfwdgo
    at /home/michael/sdk/go1.23.0/src/runtime/signal_unix.go:1154
 3  0x0000000000450a85 in runtime.sigtrampgo
    at /home/michael/sdk/go1.23.0/src/runtime/signal_unix.go:432
 4  0x0000000000479461 in runtime.raise
    at /home/michael/sdk/go1.23.0/src/runtime/sys_linux_amd64.s:153
 5  0x0000000000451a85 in runtime.dieFromSignal
    at /home/michael/sdk/go1.23.0/src/runtime/signal_unix.go:942
 6  0x0000000000439551 in runtime.crash
    at /home/michael/sdk/go1.23.0/src/runtime/signal_unix.go:1031
 7  0x0000000000439551 in runtime.fatalpanic
    at /home/michael/sdk/go1.23.0/src/runtime/panic.go:1290
 8  0x000000000046fe88 in runtime.gopanic
    at /home/michael/sdk/go1.23.0/src/runtime/panic.go:804
 9  0x00000000008037ff in main.(*server).SayHello
    at ./main.go:45
10  0x00000000008033a6 in google.golang.org/grpc/examples/helloworld/helloworld._Greeter_SayHello_Handler
    at /home/michael/go/src/github.com/grpc/grpc-go/examples/helloworld/helloworld/helloworld_grpc.pb.go:115
11  0x00000000007edeeb in google.golang.org/grpc.(*Server).processUnaryRPC
    at /home/michael/go/src/github.com/grpc/grpc-go/server.go:1394
12  0x00000000007f2eab in google.golang.org/grpc.(*Server).handleStream
    at /home/michael/go/src/github.com/grpc/grpc-go/server.go:1805
13  0x00000000007ebbff in google.golang.org/grpc.(*Server).serveStreams.func2.1
    at /home/michael/go/src/github.com/grpc/grpc-go/server.go:1029
14  0x0000000000477c21 in runtime.goexit
    at /home/michael/sdk/go1.23.0/src/runtime/asm_amd64.s:1700
(dlv) 
</code></pre><p>Alright! Now let‚Äôs switch to frame 9 (our server‚Äôs <code>SayHello</code> handler) and
inspect the <code>Name</code> field of the incoming RPC request:</p>
<pre tabindex="0"><code>(dlv) frame 9
&gt; runtime.raise() /home/michael/sdk/go1.23.0/src/runtime/sys_linux_amd64.s:154 (PC: 0x482681)
Warning: debugging optimized function
Frame 9: ./main.go:45 (PC: aaabf8)
    40:	}
    41:	
    42:	// SayHello implements helloworld.GreeterServer
    43:	func (s *server) SayHello(_ context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {
    44:		log.Printf(&#34;Received: %v&#34;, in.GetName())
=&gt;  45:		panic(&#34;oh no!&#34;)
    46:		return &amp;pb.HelloReply{Message: &#34;Hello &#34; + in.GetName()}, nil
    47:	}
    48:	
    49:	func main() {
    50:		flag.Parse()
(dlv) p in
(&#34;*google.golang.org/grpc/examples/helloworld/helloworld.HelloRequest&#34;)(0xc000120100)
*google.golang.org/grpc/examples/helloworld/helloworld.HelloRequest {
[‚Ä¶]
	unknownFields: []uint8 len: 0, cap: 0, nil,
	Name: &#34;world&#34;,}
</code></pre><p>In this case, it‚Äôs easy to see that the <code>Name</code> field was set to <code>world</code> in the
incoming request, but let‚Äôs assume the request contained lots of binary data
that was not as easy to read or copy.</p>
<p>How do we write the byte slice contents to a file? In this scenario, we cannot
modify the source code and delve‚Äôs <code>call</code> command does not work on core dumps
(only when delve is attached to a running process):</p>
<pre tabindex="0"><code>(dlv) call os.WriteFile(&#34;/tmp/name.raw&#34;, in.Name, 0644)
&gt; runtime.raise() /home/michael/sdk/go1.23.0/src/runtime/sys_linux_amd64.s:154 (PC: 0x482681)
Warning: debugging optimized function
Command failed: can not continue execution of core process
</code></pre><p>Luckily, we can extend delve with a custom Starlark function to write byte slice
contents to a file.</p>
<h2 id="exporting-byte-slices-with-writebytestofile">Exporting byte slices with writebytestofile</h2>
<p>You need a version of dlv that contains commit
<a href="https://github.com/go-delve/delve/commit/52405ba86bd9e14a2e643db391cbdebdcbdb3368">https://github.com/go-delve/delve/commit/52405ba86bd9e14a2e643db391cbdebdcbdb3368</a>. Until
the commit is part of a released version, you can install the latest dlv
directly from git:</p>
<pre tabindex="0"><code>% go install github.com/go-delve/delve/cmd/dlv@master
</code></pre><p>Save the following Starlark code to a file, for example <code>~/dlv_writebytestofile.star</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Syntax: writebytestofile &lt;byte slice var&gt; &lt;output file path&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">def</span> <span style="color:#06287e">command_writebytestofile</span>(args):
</span></span><span style="display:flex;"><span>	var_name, filename <span style="color:#666">=</span> args<span style="color:#666">.</span>split(<span style="color:#4070a0">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>	s <span style="color:#666">=</span> <span style="color:#007020">eval</span>(<span style="color:#007020;font-weight:bold">None</span>, var_name)<span style="color:#666">.</span>Variable
</span></span><span style="display:flex;"><span>	mem <span style="color:#666">=</span> examine_memory(s<span style="color:#666">.</span>Base, s<span style="color:#666">.</span>Len)<span style="color:#666">.</span>Mem
</span></span><span style="display:flex;"><span>	write_file(filename, mem)
</span></span></code></pre></div><p>Then, in delve, load the Starlark code and run the function to export the byte
slice contents of <code>in.Name</code> to <code>/tmp/name.raw</code>:</p>
<pre tabindex="0"><code>% coredumpctl debug --debugger=dlv --debugger-arguments=core
(dlv) frame 9
(dlv) source ~/dlv_writebytestofile.star
(dlv) writebytestofile in.Name /tmp/name.raw
</code></pre><p>Let‚Äôs verify that we got the right contents:</p>
<pre tabindex="0"><code>% hexdump -C /tmp/name.raw
00000000  77 6f 72 6c 64                                    |world|
00000005
</code></pre><h2 id="core-dump-debugging-with-nethttp-servers">Core dump debugging with <code>net/http</code> servers</h2>
<p>When you want to apply the core dump debugging technique on a <code>net/http</code> server
(instead of a gRPC server, as above), you will notice that panics in your HTTP
handlers do not actually result in a core dump! This code in
<code>go/src/net/http/server.go</code> recovers panics and logs a stack trace:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">defer</span> <span style="color:#007020;font-weight:bold">func</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#007020">recover</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#666">&amp;&amp;</span> err <span style="color:#666">!=</span> ErrAbortHandler {
</span></span><span style="display:flex;"><span>        <span style="color:#007020;font-weight:bold">const</span> size = <span style="color:#40a070">64</span> <span style="color:#666">&lt;&lt;</span> <span style="color:#40a070">10</span>
</span></span><span style="display:flex;"><span>        buf <span style="color:#666">:=</span> <span style="color:#007020">make</span>([]<span style="color:#902000">byte</span>, size)
</span></span><span style="display:flex;"><span>        buf = buf[:runtime.<span style="color:#06287e">Stack</span>(buf, <span style="color:#007020;font-weight:bold">false</span>)]
</span></span><span style="display:flex;"><span>        c.server.<span style="color:#06287e">logf</span>(<span style="color:#4070a0">&#34;http: panic serving %v: %v\n%s&#34;</span>, c.remoteAddr, err, buf)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}()
</span></span></code></pre></div><p>Or, in other words: the <code>GOTRACEBACK=crash</code> environment variable configures what
happens for unhandled signals, but this signal is handled with the <code>recover()</code>
call, so no core is dumped.</p>
<p>This default behavior of <code>net/http</code> servers <a href="https://github.com/golang/go/issues/25245">is now considered regrettable but
cannot be changed for
compatibility</a>. (We probably can add
a struct field to optionally not recover panics, though. I‚Äôll update this
paragraph once there is a proposal.)</p>
<p>So, what options do we have in the meantime?</p>
<p>We could recover panics in our own code (before <code>net/http</code>‚Äôs panic handler is
called), but then how do we produce a core dump from our own handler?</p>
<p>A closer look reveals that the Go runtime‚Äôs <code>crash</code> function is defined in
<code>signal_unix.go</code> and <a href="https://cs.opensource.google/go/go/+/refs/tags/go1.23.2:src/runtime/signal_unix.go;l=938">sends signal <code>SIGABRT</code> with the <code>dieFromSignal</code>
function</a>
to the current thread:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic">//go:nosplit
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">crash</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#06287e">dieFromSignal</span>(_SIGABRT)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The default action for <code>SIGABRT</code> is to ‚Äúterminate the process and dump core‚Äù,
see <a href="https://manpages.debian.org/signal.7"><code>signal(7)</code></a>
.</p>
<p>We can follow the same strategy and send <code>SIGABRT</code> to our process:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
</span></span><span style="display:flex;"><span>	http.<span style="color:#06287e">HandleFunc</span>(<span style="color:#4070a0">&#34;/&#34;</span>, <span style="color:#007020;font-weight:bold">func</span>(w http.ResponseWriter, r <span style="color:#666">*</span>http.Request) {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">defer</span> <span style="color:#007020;font-weight:bold">func</span>() {
</span></span><span style="display:flex;"><span>			<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#007020">recover</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>				proc, err <span style="color:#666">:=</span> os.<span style="color:#06287e">FindProcess</span>(syscall.<span style="color:#06287e">Getpid</span>())
</span></span><span style="display:flex;"><span>				<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#007020">panic</span>(fmt.<span style="color:#06287e">Sprintf</span>(<span style="color:#4070a0">&#34;could not find own process (pid %d): %v&#34;</span>, syscall.<span style="color:#06287e">Getpid</span>(), err))
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>				proc.<span style="color:#06287e">Signal</span>(syscall.SIGABRT)
</span></span><span style="display:flex;"><span>				<span style="color:#60a0b0;font-style:italic">// Ensure the stack triggering the core dump sticks around
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>				proc.<span style="color:#06287e">Wait</span>()
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}()
</span></span><span style="display:flex;"><span>		<span style="color:#60a0b0;font-style:italic">// ‚Ä¶buggy handler code goes here; for illustration we panic
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>		<span style="color:#007020">panic</span>(<span style="color:#4070a0">&#34;this should result in a core dump&#34;</span>)
</span></span><span style="display:flex;"><span>	})
</span></span><span style="display:flex;"><span>	log.<span style="color:#06287e">Fatal</span>(http.<span style="color:#06287e">ListenAndServe</span>(<span style="color:#4070a0">&#34;:8080&#34;</span>, <span style="color:#007020;font-weight:bold">nil</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>There is one caveat: If you have any non-Go threads running in your program,
e.g. by using cgo, they might pick up the signal, so ensure they do not install
a <code>SIGABRT</code> handler (see also: <a href="https://pkg.go.dev/os/signal#hdr-Go_programs_that_use_cgo_or_SWIG">cgo-related documentation in
<code>os/signal</code></a>).</p>
<p>If this is a concern, you can make the above code more platform-specific and use
the <a href="https://manpages.debian.org/tgkill.2"><code>tgkill(2)</code></a>
 syscall to direct the signal to the
current thread, as <a href="https://cs.opensource.google/go/go/+/refs/tags/go1.23.2:src/runtime/sys_linux_amd64.s;l=143">the Go runtime
does</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Core dump debugging can be a very useful technique to quickly make progress on
otherwise hard-to-debug problems. In small environments (single to few Linux
servers), core dumps are easy enough to turn on and work with, but in larger
environments you might need to invest into central core dump collection.</p>
<p>I hope the technique shown above comes in handy when you need to work with core
dumps.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[A Signal run a day keeps the un-link away]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-09-18-a-signal-run-a-day-keeps-the-un-link-away/"/>
    <id>https://michael.stapelberg.ch/posts/2024-09-18-a-signal-run-a-day-keeps-the-un-link-away/</id>
    <published>2024-09-18T20:30:00+02:00</published>
    <content type="html"><![CDATA[<p>I have a couple of people who are best reachable on the <a href="https://en.wikipedia.org/wiki/Signal_(software)">Signal messaging
app</a>, but not that many. This
exposes me to an awkward edge case of Signal‚Äôs design decisions: Whenever I get
a message (on my phone), I want to reply to it (on my laptop) only to discover
that Signal has un-linked my laptop because of inactivity and won‚Äôt sync the
message history from my phone to my laptop, making it impossible to quote-reply
to messages.</p>
<p>After complaining about this on Social Media for the n-th time, I figured I‚Äôd
write a quick program to run Signal once a day, so that it won‚Äôt un-link my
devices because of too long a period of inactivity. (Of course, the easiest
solution would be to just run Signal in the background all the time. But I don‚Äôt
use Signal often enough to justify letting it drain my battery and mobile data.)</p>
<p>In this article, I want to share the program in case it‚Äôs useful to anyone else,
and also explain how to install it on a Mac, as this kind of ‚Äúdo a task once a
day‚Äù automation is a useful pattern.</p>
<p><img src="2024-09-18-signal-screenshot-featured.jpg" alt=""></p>
<h2 id="high-level-sketch">High-level sketch</h2>
<ol>
<li>Run Signal for, say, 5 minutes.</li>
<li>Ensure at-most-once semantics regardless of the task scheduler. For example,
if I wanted to start this program from an <code>@reboot</code> hook and restart my
computer a few times, I don‚Äôt want the program to do anything after the first
run of the day. (Similarly, an on-online hook of NetworkManager or similar
software might fire once per network interface, or something like that.)</li>
<li>Depending on the specifics of the activation mechanism, the computer might be
online or not. The program should wait for a little while, say, 10 minutes,
until internet connectivity was established.</li>
<li>I would like to log the program‚Äôs output (and Signal‚Äôs output) for debugging.</li>
</ol>
<h2 id="checking-connectivity">Checking connectivity</h2>
<p>The easiest option is to just‚Ä¶ not do a connectivity check at all, and hope for
the best. This would probably work well enough in practice, but I would like the
debug logs to have a high signal-to-noise ratio: If I have to debug why Signal
was unlinked despite my automation attempts, I don‚Äôt want to comb through tons
of spurious log messages that were a result from being offline. So, I want to
check that I‚Äôm online before even starting Signal.</p>
<p>The most thorough option would be to somehow ask Signal programmatically whether
it can connect to its servers and then wait until it can. I don‚Äôt think Signal
has such an interface, so we‚Äôll chose a middle-ground solution and work with a
stand-in.</p>
<p>Using HTTP for connectivity checks is an easy way in today‚Äôs world. We just need
a target website that doesn‚Äôt go offline unless I want it to. So let‚Äôs just use
this website! Go‚Äôs <code>net/http</code> package that is included in Go‚Äôs standard library
makes this super easy:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">checkConnectivity</span>() <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	_, err <span style="color:#666">:=</span> http.<span style="color:#06287e">Get</span>(<span style="color:#4070a0">&#34;https://michael.stapelberg.ch/&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now we just need to loop around this single connectivity check:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">waitForConnectivity</span>(timeout time.Duration) <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">const</span> freq = <span style="color:#40a070">1</span> <span style="color:#666">*</span> time.Second
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">for</span> start <span style="color:#666">:=</span> time.<span style="color:#06287e">Now</span>(); time.<span style="color:#06287e">Since</span>(start) &lt; timeout; time.<span style="color:#06287e">Sleep</span>(freq) {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">checkConnectivity</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>			log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;connectivity check failed: %v&#34;</span>, err)
</span></span><span style="display:flex;"><span>			<span style="color:#007020;font-weight:bold">continue</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#60a0b0;font-style:italic">// connectivity check succeeded
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;no connectivity established within %v&#34;</span>, timeout)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We could improve this code to be more generally applicable by adding
<a href="https://en.wikipedia.org/wiki/Exponential_backoff">Exponential Backoff</a>, but
for this particular connectivity check, we should be fine even without
Exponential Backoff.</p>
<h2 id="ensuring-at-most-once-semantics">Ensuring at-most-once semantics</h2>
<p>An easy way to implement at-most-once semantics is to delegate to the file
system: we can specify the <code>O_EXCL</code> flag when creating our program‚Äôs log file to
make the first creation attempt proceed, but any further creation attempt fail
because the file already exists. We‚Äôll then redirect the standard library‚Äôs
<code>log</code> package output to the log file:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span>logFn <span style="color:#666">:=</span> filepath.<span style="color:#06287e">Join</span>(home, <span style="color:#4070a0">&#34;signal-keepalive&#34;</span>, <span style="color:#4070a0">&#34;_logs&#34;</span>, time.<span style="color:#06287e">Now</span>().<span style="color:#06287e">Format</span>(<span style="color:#4070a0">&#34;2006-01-02&#34;</span>)<span style="color:#666">+</span><span style="color:#4070a0">&#34;.txt&#34;</span>)
</span></span><span style="display:flex;"><span>f, err <span style="color:#666">:=</span> os.<span style="color:#06287e">OpenFile</span>(logFn, os.O_RDWR|os.O_CREATE|os.O_EXCL, <span style="color:#40a070">0666</span>)
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> os.<span style="color:#06287e">IsExist</span>(err) {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#60a0b0;font-style:italic">// nothing to do, already ran today
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic">// Intentionally not closing this file so that even the log.Fatal()
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic">// call in the calling function will end up in the log file.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>
</span></span><span style="display:flex;"><span>log.<span style="color:#06287e">SetOutput</span>(f) <span style="color:#60a0b0;font-style:italic">// redirect standard library logging into this file
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;signal-keepalive, waiting for internet connectivity&#34;</span>)
</span></span></code></pre></div><p>Not closing the file might seem weird at first, but remember that this is a
short-lived program and the operating system closes all file handles of a
process when it exits.</p>
<h2 id="full-program-code">Full program code</h2>
<p>For your convenience, here is the full program code. It contains a bunch of file
system paths that you might want or need to adjust.</p>
<details>
<summary>Click to expand: <code>keepalive.go</code></summary>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">package</span> main
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">import</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;log&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;net/http&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;os&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;os/exec&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;path/filepath&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#4070a0">&#34;time&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">checkConnectivity</span>() <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	_, err <span style="color:#666">:=</span> http.<span style="color:#06287e">Get</span>(<span style="color:#4070a0">&#34;https://michael.stapelberg.ch/&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">waitForConnectivity</span>(timeout time.Duration) <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">for</span> start <span style="color:#666">:=</span> time.<span style="color:#06287e">Now</span>(); time.<span style="color:#06287e">Since</span>(start) &lt; timeout; time.<span style="color:#06287e">Sleep</span>(<span style="color:#40a070">1</span> <span style="color:#666">*</span> time.Second) {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">checkConnectivity</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>			log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;connectivity check failed: %v&#34;</span>, err)
</span></span><span style="display:flex;"><span>			<span style="color:#007020;font-weight:bold">continue</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#60a0b0;font-style:italic">// connectivity check succeeded
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;no connectivity established within %v&#34;</span>, timeout)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">keepalive</span>() <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Limit to one attempt per day by exclusively creating a logfile.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	home <span style="color:#666">:=</span> os.<span style="color:#06287e">Getenv</span>(<span style="color:#4070a0">&#34;HOME&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> home <span style="color:#666">==</span> <span style="color:#4070a0">&#34;&#34;</span> {
</span></span><span style="display:flex;"><span>		home = <span style="color:#4070a0">&#34;/Users/michael&#34;</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	logFn <span style="color:#666">:=</span> filepath.<span style="color:#06287e">Join</span>(home, <span style="color:#4070a0">&#34;signal-keepalive&#34;</span>, <span style="color:#4070a0">&#34;_logs&#34;</span>, time.<span style="color:#06287e">Now</span>().<span style="color:#06287e">Format</span>(<span style="color:#4070a0">&#34;2006-01-02&#34;</span>)<span style="color:#666">+</span><span style="color:#4070a0">&#34;.txt&#34;</span>)
</span></span><span style="display:flex;"><span>	f, err <span style="color:#666">:=</span> os.<span style="color:#06287e">OpenFile</span>(logFn, os.O_RDWR|os.O_CREATE|os.O_EXCL, <span style="color:#40a070">0666</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">if</span> os.<span style="color:#06287e">IsExist</span>(err) {
</span></span><span style="display:flex;"><span>			<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span> <span style="color:#60a0b0;font-style:italic">// nothing to do, already ran today
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Intentionally not closing this file so that even the log.Fatal()
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#60a0b0;font-style:italic">// call in the calling function will end up in the log file.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>
</span></span><span style="display:flex;"><span>	log.<span style="color:#06287e">SetOutput</span>(f) <span style="color:#60a0b0;font-style:italic">// redirect standard library logging into this file
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;signal-keepalive, waiting for internet connectivity&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Wait for network connectivity
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">waitForConnectivity</span>(<span style="color:#40a070">10</span> <span style="color:#666">*</span> time.Minute); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Start signal
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;connectivity verified, starting signal&#34;</span>)
</span></span><span style="display:flex;"><span>	signal <span style="color:#666">:=</span> exec.<span style="color:#06287e">Command</span>(<span style="color:#4070a0">&#34;/Applications/Signal.app/Contents/MacOS/Signal&#34;</span>, <span style="color:#4070a0">&#34;--start-in-tray&#34;</span>)
</span></span><span style="display:flex;"><span>	signal.Stdout = f
</span></span><span style="display:flex;"><span>	signal.Stderr = f
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> signal.<span style="color:#06287e">Start</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Wait for some time to give Signal a chance to synchronize messages.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">const</span> signalWaitTime = <span style="color:#40a070">5</span> <span style="color:#666">*</span> time.Minute
</span></span><span style="display:flex;"><span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;giving signal %v to sync messages&#34;</span>, signalWaitTime)
</span></span><span style="display:flex;"><span>	time.<span style="color:#06287e">Sleep</span>(signalWaitTime)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#60a0b0;font-style:italic">// Stop signal
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;killing signal&#34;</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> signal.Process.<span style="color:#06287e">Kill</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> err
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;waiting for signal&#34;</span>)
</span></span><span style="display:flex;"><span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;signal returned: %v&#34;</span>, signal.<span style="color:#06287e">Wait</span>())
</span></span><span style="display:flex;"><span>	log.<span style="color:#06287e">Printf</span>(<span style="color:#4070a0">&#34;all done&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> f.<span style="color:#06287e">Sync</span>()
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> err <span style="color:#666">:=</span> <span style="color:#06287e">keepalive</span>(); err <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		log.<span style="color:#06287e">Fatal</span>(err)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></details>
<p>(Use <code>go build keepalive.go</code> to compile if you‚Äôre unfamiliar with <a href="https://go.dev">Go</a>.)</p>
<h2 id="macos-installation-launchd">macOS installation: launchd</h2>
<p>The corresponding piece of infrastructure to
<a href="https://en.wikipedia.org/wiki/Systemd">systemd</a> on Linux is called
<a href="https://en.wikipedia.org/wiki/Launchd">launchd</a> on macOS. Aside from managing
daemon processes, launchd also supports time-triggered program execution,
specifically via the <code>StartCalendarInterval</code> configuration option.</p>
<p>I followed <a href="https://alvinalexander.com/mac-os-x/launchd-plist-examples-startinterval-startcalendarinterval/">Alvin Alexander‚Äôs blog post about launchd StartCalendarInterval
examples</a>
and decided to configure my program to run at 08:03 each day:</p>
<details>
<summary>
Click to expand: <code>net.zekjur.signalkeepalive.plist</code>
</summary>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#007020">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#007020">&lt;!DOCTYPE plist PUBLIC &#34;-//Apple Computer//DTD PLIST 1.0//EN&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#007020">&#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#062873;font-weight:bold">&lt;plist</span> <span style="color:#4070a0">version=</span><span style="color:#4070a0">&#34;1.0&#34;</span><span style="color:#062873;font-weight:bold">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#062873;font-weight:bold">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;key&gt;</span>StartCalendarInterval<span style="color:#062873;font-weight:bold">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#062873;font-weight:bold">&lt;key&gt;</span>Hour<span style="color:#062873;font-weight:bold">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#062873;font-weight:bold">&lt;integer&gt;</span>8<span style="color:#062873;font-weight:bold">&lt;/integer&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#062873;font-weight:bold">&lt;key&gt;</span>Minute<span style="color:#062873;font-weight:bold">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#062873;font-weight:bold">&lt;integer&gt;</span>3<span style="color:#062873;font-weight:bold">&lt;/integer&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;key&gt;</span>Label<span style="color:#062873;font-weight:bold">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;string&gt;</span>net.zekjur.signalkeepalive<span style="color:#062873;font-weight:bold">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;key&gt;</span>Program<span style="color:#062873;font-weight:bold">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#062873;font-weight:bold">&lt;string&gt;</span>/Users/michael/signal-keepalive/signalkeepalive<span style="color:#062873;font-weight:bold">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#062873;font-weight:bold">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#062873;font-weight:bold">&lt;/plist&gt;</span>
</span></span></code></pre></div></details>
<p>What happens when my computer isn‚Äôt running at 08:03, for example because the
lid is closed? Apple documents the behavior in the <a href="https://keith.github.io/xcode-man-pages/launchd.plist.5.html"><code>launchd.plist(5)</code> man
page</a>:</p>
<blockquote>
<p><em>Unlike cron which skips job invocations when the computer is asleep, launchd
will start the job the next time the computer wakes up.</em></p>
</blockquote>
<p>To install and test this configuration:</p>
<ol>
<li>Copy the plist file to <code>~/Library/LaunchAgents</code></li>
<li>Run <code>launchctl load ~/Library/LaunchAgents/net.zekjur.signalkeepalive.plist</code></li>
<li>Run <code>launchctl start net.zekjur.signalkeepalive</code></li>
</ol>
<h2 id="in-practice">In practice</h2>
<p>It‚Äôs interesting to see this behavior in practice. Take note of the time stamps
in the following log. The computer was not running at 08:03. At 08:18, it woke
up to update background information (Apple calls this <a href="https://support.apple.com/en-az/guide/mac-help/mh40773/mac">‚ÄúPower
Nap‚Äù</a>), and then it
suspended again (while Signal was running) until it woke up at 08:47 again:</p>
<pre tabindex="0"><code>2024/09/07 08:18:10 signal-keepalive, waiting for internet connectivity
2024/09/07 08:18:11 connectivity verified, starting signal
2024/09/07 08:18:11 giving signal 5m0s to sync messages
Set Windows Application User Model ID (AUMID) { AUMID: &#39;org.whispersystems.signal-desktop&#39; }
NODE_ENV production
NODE_CONFIG_DIR /Applications/Signal.app/Contents/Resources/app.asar/config
NODE_CONFIG {}
ALLOW_CONFIG_MUTATIONS undefined
HOSTNAME m1a.fritz.box
NODE_APP_INSTANCE undefined
SUPPRESS_NO_CONFIG_WARNING undefined
SIGNAL_ENABLE_HTTP undefined
userData: /Users/michael/Library/Application Support/Signal
config/get: Successfully read user config file
config/get: Successfully read ephemeral config file
2024/09/07 08:47:31 killing signal
2024/09/07 08:47:31 waiting for signal
2024/09/07 08:47:31 signal returned: signal: killed
2024/09/07 08:47:31 all done
</code></pre><h2 id="linux-installation-systemd">Linux installation: systemd</h2>
<p>With systemd, we need two units. First, a <code>signal-keepalive.service</code> unit to
declare which program should be run:</p>
<pre tabindex="0"><code>cat &gt; ~/.config/systemd/user/signal-keepalive.service &lt;&lt;&#39;EOT&#39;
[Unit]
Description=signal keepalive
After=network.target

[Service]
Type=oneshot
ExecStart=/home/michael/signal-keepalive/signalkeepalive

[Install]
WantedBy=default.target
EOT
</code></pre><p>And secondly, a <code>signal-keepalive.timer</code> unit which automatically starts the
<code>signal-keepalive.service</code> every day:</p>
<pre tabindex="0"><code>cat &gt; ~/.config/systemd/user/signal-keepalive.timer &lt;&lt;&#39;EOT&#39;
[Unit]
Description=signal keepalive

[Timer]
Persistent=true
OnCalendar=daily

[Install]
WantedBy=timers.target
EOT
</code></pre><p>The <code>Persistent=true</code> line is important so that the program will be run even
when the computer is asleep when the timer would have fired.</p>
<p>Let‚Äôs enable the timer:</p>
<pre tabindex="0"><code>systemctl --user enable --now signal-keepalive.timer
</code></pre><p>For an initial test run, we can start the .service directly:</p>
<pre tabindex="0"><code>systemctl --user restart signal-keepalive.service
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>It‚Äôs silly that I need to go through so much trouble just because I don‚Äôt use
Signal enough.</p>
<p>I also don‚Äôt understand why Signal can‚Äôt just sync message history from my phone
to my computer when linking. WhatsApp and Telegram have no trouble doing it.</p>
<p>Either way, I thought this was a fun little refresher on automating periodic
jobs.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Ryzen 7 Mini-PC makes a power-efficient VM host]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/"/>
    <id>https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/</id>
    <published>2024-07-02T17:17:00+02:00</published>
    <content type="html"><![CDATA[<p>When I saw the first reviews of the <a href="https://www.asrock.com/nettop/AMD/DeskMini%20X600%20Series/index.asp">ASRock DeskMini X600
barebone</a>,
I was immediately interested in building a home-lab hypervisor (VM host) with
it. Apparently, the DeskMini X600 uses less than 10W of power but supports
latest-generation AMD CPUs like the Ryzen 7 8700G!</p>
<p>Sounds like the perfect base for a power-efficient, always-on VM host that still
provides enough compute power (and fast disks!) to be competitive with
commercial VM offerings. In this article, I‚Äôll show how I built and set up my
DIY self-hosting VM host.</p>















<a href="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/240630-server-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/240630-server-featured_hu3cb7c72c5372ea18e945c976b24c8b83_4997169_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/240630-server-featured_hu3cb7c72c5372ea18e945c976b24c8b83_4997169_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/240630-server-featured_hu3cb7c72c5372ea18e945c976b24c8b83_4997169_600x0_resize_q75_box.jpg"
  alt="ASRock DeskMini X600" title="ASRock DeskMini X600"
  width="600"
  height="401"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h2 id="component-list">Component List</h2>
<p>The term ‚Äúbarebone‚Äù means that the machine comes without CPU, RAM and disk. You
only get a case with a mainboard and power supply, the rest is up to you. I
chose the following parts:</p>
<table>
<thead>
<tr>
<th>Price</th>
<th>Type</th>
<th>Article</th>
</tr>
</thead>
<tbody>
<tr>
<td>215 EUR</td>
<td>barebone</td>
<td><a href="https://shop.jzelectronic.de/product_info.php?info=p75250_asrock-deskmini-x600.html">ASRock DeskMini X600</a></td>
</tr>
<tr>
<td>293 CHF</td>
<td>CPU</td>
<td><a href="https://www.digitec.ch/de/s1/product/amd-ryzen-7-8700g-am5-420-ghz-8-core-prozessor-42390585?supplier=406802">AMD Ryzen 7 8700G (AM5, 4.20 GHz, 8 Core)</a></td>
</tr>
<tr>
<td>48 CHF</td>
<td>CPU fan</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nh-l9a-am5-37-mm-cpu-kuehler-24147242?supplier=406802">Noctua NH-L9a-AM5 (37 mm)</a></td>
</tr>
<tr>
<td>195 CHF</td>
<td>RAM</td>
<td><a href="https://www.digitec.ch/de/s1/product/kingston-fury-impact-2-x-32gb-5600-mhz-ddr5-ram-so-dimm-ram-23704483?supplier=406802">Kingston FURY Impact (2 x 32GB, DDR5-5600 SO-DIMM)</a></td>
</tr>
<tr>
<td>218 CHF</td>
<td>SSD</td>
<td>2 x <a href="https://www.digitec.ch/de/s1/product/samsung-980-pro-1000-gb-m2-2280-ssd-13823466?supplier=406802">Samsung 980 Pro (1000 GB, M.2 2280)</a> (for RAID-1)</td>
</tr>
</tbody>
</table>
<p>Total cost: 969 CHF</p>
<p>The CPU fan is not strictly required (the DeskMini X600 already comes with a
fan), but I wanted the best cooling performance at lowest noise levels, so
Noctua it is.</p>
<p><del>I read that the machine should support ECC RAM, too</del>. <strong>Update:</strong> The <a href="https://www.tomshardware.com/pc-components/cpus/amd-confirms-ryzen-8000g-apus-dont-support-ecc-ram-despite-initial-claims">Ryzen
8700G does not support
ECC-RAM</a>
after all. Only the Ryzen 7 <strong>PRO</strong> 8700G supports ECC-RAM.</p>















<a href="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/IMG_3871.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/IMG_3871_hu59fa65490ce2e48b2c5b284fe97e0775_2062424_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/IMG_3871_hu59fa65490ce2e48b2c5b284fe97e0775_2062424_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/IMG_3871_hu59fa65490ce2e48b2c5b284fe97e0775_2062424_600x0_resize_q75_box.jpg"
  alt="components" title="components"
  width="600"
  height="631"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>It took me about an hour to assemble the parts. Note that the M.2 SSD screws
might seem a little hard to screw in, but don‚Äôt be deterred by that. When first
powering on the system, be patient as the memory training will take a minute or so,
during which the screen will stay black.</p>
<h2 id="uefi-setup">UEFI Setup</h2>
<p>The UEFI on the DeskMini X600 comes with reasonable defaults.</p>
<p>The CPU fan setting alreadys defaults to ‚ÄúSilent Mode‚Äù, for example.</p>
<p>I changed the following option, which is typical for server usage:</p>
<ul>
<li>Advanced ‚Üí ACPI Configuration ‚Üí Restore on AC/Power Loss: Power On</li>
</ul>
<p>And I disabled the onboard devices I know I won‚Äôt need, just in case it saves power:</p>
<ul>
<li>Advanced ‚Üí Onboard Devices Configuration ‚Üí Onboard HD Audio: Disabled</li>
<li>SATA3 Controller: Disabled</li>
</ul>
<h2 id="operating-system-setup">Operating System Setup</h2>
<p>I want to run this machine as a VM hypervisor. The easiest way that I know to set up such a hypervisor is to install Proxmox, an open
source virtualization appliance based on Debian.</p>
<p>I booted the machine with the Proxmox installer copied to a USB memory stick,
then selected ZFS in a RAID-1 configuration. The setup worked smoothly and was
done in a few minutes.</p>
<p>Then, I set up Tailscale <a href="https://tailscale.com/kb/1133/proxmox">as recommended</a>
and used <code>tailscale serve</code> so that I can access the Proxmox web interface on its
Tailscale hostname via HTTPS, instead of having to deal with certificates and
custom ports:</p>
<pre tabindex="0"><code>pve# curl -fsSL https://tailscale.com/install.sh | sh
pve# tailscale up
[‚Ä¶]
  follow instructions and disable key expiration
[‚Ä¶]
pve# tailscale serve --bg https+insecure://localhost:8006
</code></pre><p>(Of course I‚Äôll also install Tailscale on each VM running on the host.)</p>
<p>Now I can log into the Proxmox web interface from anywhere without certificate
warnings:</p>















<a href="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-30-proxmox.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-30-proxmox_hu72d4f4d0189dc6f0891d857b6c038b39_1406117_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-30-proxmox_hu72d4f4d0189dc6f0891d857b6c038b39_1406117_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-30-proxmox_hu72d4f4d0189dc6f0891d857b6c038b39_1406117_600x0_resize_q75_box.jpg"
  alt="proxmox web interface" title="proxmox web interface"
  width="600"
  height="418"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>In this screenshot, I have already created 2 VMs (‚Äúbatch‚Äù and ‚Äúweb‚Äù) using the
‚ÄúCreate VM‚Äù button at the top right. Proxmox allows controlling the installer
via its ‚ÄúConsole‚Äù tab and once set up, the VM shows up in the same network that
the hypervisor is connected to with a MAC address from the ‚ÄúProxmox Server
Solutions GmbH‚Äù range. That‚Äôs pretty much all there is to it.</p>
<p>I don‚Äôt have enough nodes for advanced features like clustering, but I might
investigate whether I want to set up backups on the Proxmox layer or keep doing
them on the OS layer.</p>
<h3 id="fan-speed-monitoring">Fan speed monitoring</h3>
<p>Sven Geggus shared how to make the fan speed sensors work in current versions of
Debian:</p>
<pre tabindex="0"><code>pve# echo &#34;options nct6683 force=1&#34; &gt;&gt; /etc/modprobe.d/sensors.conf
pve# echo nct6683 &gt;&gt; /etc/modules-load.d/sensors.conf
pve# modprobe nct6683
pve# systemctl restart prometheus-node-exporter
</code></pre><h2 id="power-usage">Power Usage</h2>
<p>The power usage values I measure are indeed excellent: The DeskMini X600 with
Ryzen 7 8700G consumes less than 10W (idle)! When the machine has something to
do, it spikes up to 50W:</p>















<a href="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-24-energy-usage.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-24-energy-usage_hu6ff618f9e9023ea7df34e8fd6d4f3691_213887_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-24-energy-usage_hu6ff618f9e9023ea7df34e8fd6d4f3691_213887_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-07-02-ryzen-7-mini-pc-low-power-proxmox-hypervisor/2024-06-24-energy-usage_hu6ff618f9e9023ea7df34e8fd6d4f3691_213887_600x0_resize_q75_box.jpg"
  alt="Grafana dashboard showing power usage" title="Grafana dashboard showing power usage"
  width="600"
  height="257"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h2 id="noise">Noise</h2>
<p>ASRock explicitly lists the Noctua NH-L9a-AM5 as compatible with the DeskMini
X600, which was one of the factors that made me select this barebone. Installing
the fan was easy.</p>
<p>Fan noise is very low, as expected with Noctua. I can‚Äôt hear the device even
when it is standing in front of me on my desk. Of course, under heavy load, the
fan will be audible. This is an issue with all small form-factor PCs, as they
just don‚Äôt have enough case space to swallow more noise.</p>
<p>Aside from the fan noise, if you hold your ear directly next to the X600, you
can hear the usual electrical component noise (not coil whine per se, but that
sort of thing).</p>
<p>I recommend positioning this device under a desk, or on a shelf, or
similar.</p>
<h2 id="performance-comparison">Performance comparison</h2>
<p>You can find synthetic benchmark results for the Ryzen 8700G elsewhere, so as
usual, I will write about the specific angle I care about: How fast can this
machine handle Go workloads?</p>
<h3 id="compiling-go-1224">Compiling Go 1.22.4</h3>
<p>On the Ryzen 8700G, we can compile Go 1.22.4 in a little under 40 seconds:</p>
<pre tabindex="0"><code>% time ./make.bash
[‚Ä¶]
./make.bash  208,55s user 36,96s system 631% cpu 38,896 total
</code></pre><p>For comparison, <a href="/posts/2022-01-15-high-end-linux-pc/">my 2022 high-end Linux PC with Core
i9-12900K</a> is only a few seconds faster:</p>
<pre tabindex="0"><code>% time ./make.bash
[‚Ä¶]
./make.bash  207,33s user 29,55s system 685% cpu 34,550 total
</code></pre><h3 id="go-http-and-json-benchmarks">Go HTTP and JSON benchmarks</h3>
<p>I also ran the HTTP and JSON benchmarks from Go‚Äôs <a href="https://github.com/golang/benchmarks">x/benchmarks
repository</a>.</p>
<p>Compared to the Virtual Server I‚Äôm currently renting, the Ryzen 8700G is more
than twice as fast:</p>
<pre tabindex="0"><code>% benchstat rentedvirtual ryzen8700g 
name    old time/op                  new time/op                  delta
HTTP-2  28.5¬µs ¬± 2%                  10.2¬µs ¬± 1%  -64.17%  (p=0.008 n=5+5)
JSON-2  24.1ms ¬±29%                   9.4ms ¬± 1%  -61.06%  (p=0.008 n=5+5)
</code></pre><p>Of course, the Intel i9 12900K is still a bit faster ‚Äî how much depends on the
specific workload:</p>
<pre tabindex="0"><code>% benchstat ryzen8700g i9_12900k 
name    old time/op                  new time/op                  delta
HTTP-2  10.2¬µs ¬± 1%                   7.6¬µs ¬± 1%  -25.13%  (p=0.008 n=5+5)
JSON-2  9.40ms ¬± 1%                  9.23ms ¬± 1%   -1.82%  (p=0.008 n=5+5)
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>What a delightful little Mini-PC! It‚Äôs modern enough to house the current
generation of CPUs, compact enough to fit in well anywhere, yet just large
enough to fit a Noctua CPU cooler for super-quiet operation. The low power draw
makes it acceptable to run this machine 24/7.</p>
<p>Paired with 64 GB of RAM and large, fast NVMe disks, this machine packs a punch
and will easily power your home automation, home lab, hobby project, small office server, etc.</p>
<p>If a Raspberry Pi isn‚Äôt enough for your needs, check out the DeskMini X600, or
perhaps its larger variant, the <a href="https://www.asrock.com/nettop/AMD/DeskMeet%20X600%20Series/index.asp">DeskMeet
X600</a>
which is largely identical, but comes with a PCIe slot.</p>
<p>If this one doesn‚Äôt fit your needs, keep looking: there are many more mini PCs
on the market. Check out <a href="https://www.servethehome.com/introducing-project-tinyminimicro-home-lab-revolution/">ServeTheHome‚Äôs ‚ÄúProject
TinyMiniMicro‚Äù</a>
for a lot more reviews.</p>
<p><strong>Update:</strong> Apparently ASRock is <a href="https://www.golem.de/news/asrock-x600tm-itx-sehr-flaches-am5-mainboard-mit-externer-stromversorgung-2407-187469.html">releasing their X600
mainboard</a>
as a standalone product, too, if you like the electronics but not the form
factor.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Minimal Linux Bootloader debugging story üêû]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/"/>
    <id>https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/</id>
    <published>2024-02-11T10:28:00+01:00</published>
    <content type="html"><![CDATA[<p>I maintain two builds of the Linux kernel, a <code>linux/arm64</code> build for <a href="https://gokrazy.org">gokrazy,
my Go appliance platform</a>, which started out on the
Raspberry Pi, and then a <code>linux/amd64</code> one for <a href="https://router7.org/">router7</a>,
which runs on PCs.</p>
<p>The update process for both of these builds is entirely automated, meaning new
Linux kernel releases are automatically tested and merged, but recently the
continuous integration testing <a href="https://github.com/rtr7/kernel/pull/434">failed to automatically merge Linux
6‚Ä§7</a> ‚Äî this article is about tracking
down the root cause of that failure.</p>
<h2 id="background-info-on-the-bootloader">Background info on the bootloader</h2>
<p>gokrazy started out targeting only the Raspberry Pi, where you configure the
bootloader with a plain text file on a FAT partition, so we did not need to
include our own UEFI/MBR bootloader.</p>
<p>When I ported gokrazy to work on PCs in BIOS mode, I decided against complicated
solutions like GRUB ‚Äî I really wasn‚Äôt looking to maintain a GRUB package. Just
keeping GRUB installations working on my machines is enough work. The fact that
GRUB consists of many different files (modules) that can go out of sync really
does not appeal to me.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">For UEFI, there is <a href="https://en.wikipedia.org/wiki/Systemd-boot">systemd-boot</a>,
which comes as a single-file UEFI program, easy to include. That‚Äôs how gokrazy
supports UEFI boot. Unfortunately, the PC Engines apu2c4 does not support UEFI,
so I also needed an MBR solution.</div>
  </div>
</aside>

<p>Instead, I went with Sebastian Plotz‚Äôs <a href="https://sebastian-plotz.blogspot.com/2012/07/1.html">Minimal Linux
Bootloader</a> because it fits
entirely into the <a href="https://en.wikipedia.org/wiki/Master_boot_record">Master Boot Record
(MBR)</a> and does not require
any files. In bootloader lingo, this is a stage1-only bootloader. You don‚Äôt even
need a C compiler to compile its (Assembly) code. It seemed simple enough to
integrate: just write the bootloader code into the first sector of the gokrazy
disk image; done. The bootloader had its last release in 2012, so no need for
updates or maintenance.</p>
<p>You can‚Äôt really implement booting a kernel <strong>and</strong> parsing text configuration
files in <a href="https://en.wikipedia.org/wiki/Master_boot_record#Sector_layout">446
bytes</a> of 16-bit
8086 assembly instructions, so to tell the bootloader where on disk to load the
kernel code and kernel command line from, gokrazy writes the disk offset
(<a href="https://en.wikipedia.org/wiki/Logical_block_addressing">LBA</a>) of <code>vmlinuz</code> and
<code>cmdline.txt</code> to the last bytes of the bootloader code. Because gokrazy
generates the FAT partition, we know there is never any fragmentation, so the
bootloader does not need to understand the FAT file system.</p>
<h2 id="symptom">Symptom</h2>
<p>The symptom was that the <code>rtr7/kernel</code> <a href="https://github.com/rtr7/kernel/pull/434">pull request
#434</a> for updating to Linux 6.7 failed.</p>
<p>My continuous integration tests run in two environments: a physical embedded PC
from <a href="https://pcengines.ch/">PC Engines</a> (apu2c4) in my living room, and a
virtual QEMU PC. Only the QEMU test failed.</p>
<p>On the physical PC Engines apu2c4, the pull request actually passed the boot
test. It would be wrong to draw conclusions like ‚Äúthe issue only affects QEMU‚Äù
from this, though, as later attempts to power on the apu2c4 showed the device
boot-looping. I made a mental note that <em>something is different</em> about how the
problem affects the two environments, but both are affected, and decided to
address the failure in QEMU first, then think about the PC Engines failure some
more.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">Later in the investigation I found out that this was because the
physical continuous integration setup didn‚Äôt <a href="https://github.com/gokrazy/gokrazy/issues/243">disable kexec
yet</a>, so it wasn‚Äôt actually
exercising BIOS boot via the Master Boot Record.</div>
  </div>
</aside>

<p>In QEMU, the output I see is:</p>
<pre tabindex="0"><code>SeaBIOS (version Arch Linux 1.16.3-1-1)

iPXE (http://ipxe.org) 00:03.0 C900 PCI2.10 PnP PMM+06FD3360+06F33360 C900

Booting from Hard Disk...
</code></pre><p>Notably, the kernel doesn‚Äôt even seem to start ‚Äî no ‚ÄúDecompressing linux‚Äù
message is printed, the boot just hangs. I tried enabling debug output in
SeaBIOS and <a href="https://github.com/rtr7/router7/issues/83#issuecomment-1890354927">eventually succeeded, but only with an older QEMU
version</a>:</p>
<pre tabindex="0"><code>Booting from Hard Disk...
Booting from 0000:7c00
In resume (status=0)
In 32bit resume
Attempting a hard reboot
</code></pre><p>This doesn‚Äôt tell me anything unfortunately.</p>
<p>Okay, so something about introducing Linux 6.7 into my setup breaks MBR boot.</p>
<p>I figured using <a href="https://opensource.com/article/22/11/git-bisect">Git Bisection</a>
should identify the problematic change within a few iterations, so I cloned the
currently working Linux 6.6 source code, applied the router7 config and compiled
it.</p>
<p>To my surprise, even my self-built Linux 6.6 kernel would not boot! üò≤</p>
<p>Why does the router7 build work when built inside the Docker container, but not
when built on my Linux installation? I decided to rebase the Docker container
from Debian 10 (buster, from 2019) to Debian 12 (bookworm, from 2023) and that
resulted in a non-booting kernel, too!</p>
<p>We have two triggers: building Linux 6.7 or building older Linux, but in newer
environments.</p>
<h2 id="meta-following-along">Meta: Following Along</h2>
<details>
<summary>(Contains spoilers) Instructions for following along</summary>
<p>First, check out the <code>rtr7/kernel</code> repository and undo <a href="#mitigation">the mitigation</a>:</p>
<pre tabindex="0"><code>% mkdir -p go/src/github.com/rtr7/
% cd go/src/github.com/rtr7/
% git clone --depth=1 https://github.com/rtr7/kernel
% cd kernel
% sed -i &#39;s,CONFIG_KERNEL_ZSTD,#CONFIG_KERNEL_ZSTD,g&#39; cmd/rtr7-build-kernel/config.addendum.txt
% go run ./cmd/rtr7-rebuild-kernel
# takes a few minutes to compile Linux
% ls -l vmlinuz
-rw-r--r-- 1 michael michael 15885312 2024-01-28 16:18 vmlinuz
</code></pre><p>Now, you can either create a new gokrazy instance, replace the kernel and
configure the gokrazy instance to use <code>rtr7/kernel</code>:</p>
<pre tabindex="0"><code>% gok -i mbr new
% gok -i mbr add .
% gok -i mbr edit
# Adjust to contain:
    &#34;KernelPackage&#34;: &#34;github.com/rtr7/kernel&#34;,
    &#34;FirmwarePackage&#34;: &#34;github.com/rtr7/kernel&#34;,
    &#34;EEPROMPackage&#34;: &#34;&#34;,
</code></pre><p>‚Ä¶or you skip these steps and extract <a href="gokrazy-mbr.tar.bz2">my already prepared
config</a> to <code>~/gokrazy/mbr</code>.</p>
<p>Then, build the gokrazy disk image and start it with QEMU:</p>
<pre tabindex="0"><code>% GOARCH=amd64 gok -i mbr overwrite \
  --full /tmp/gokr-boot.img \
  --target_storage_bytes=1258299392
% qemu-system-i386 \
  -nographic \
  -drive file=/tmp/gokr-boot.img,format=raw
</code></pre></details>
<h2 id="updowngrade-versions">Up/Downgrade Versions</h2>
<p>Unlike application programs, the Linux kernel doesn‚Äôt depend on shared libraries
at runtime, so the dependency footprint is a little smaller than usual. The most
significant dependencies are the components of the build environment, like the C
compiler or the linker.</p>
<p>So let‚Äôs look at the software versions of the known-working (Debian 10)
environment and the smallest change we can make to that (upgrading to Debian
11):</p>
<ul>
<li>Debian 10 (buster) contains gcc-8 (8.3.0-6) and binutils 2.31.1-16.</li>
<li>Debian 11 (bullseye) contains gcc-10 (10.2.1-6) and binutils 2.35.2-2.</li>
</ul>
<p>To figure out if the problem is triggered by GCC, binutils, or something else
entirely, I checked:</p>
<p>Debian 10 (buster) with its <code>gcc-8</code>, but with <code>binutils 2.35</code> from bullseye
still works. (Checked by updating <code>/etc/apt/sources.list</code>, then upgrading only
the <code>binutils</code> package.)</p>
<p>Debian 10 (buster), but with <code>gcc-10</code> and <code>binutils 2.35</code> results in a
non-booting kernel.</p>
<p>So it seems like upgrading from GCC 8 to GCC 10 triggers the issue.</p>
<p>Instead of working with a Docker container and Debian‚Äôs packages, you could also
use <a href="https://en.wikipedia.org/wiki/Nix_(package_manager)">Nix</a>. The instructions
aren‚Äôt easy, but I <a href="https://github.com/rtr7/router7/issues/83#issuecomment-1885612487">used
<code>nix-shell</code></a>
to quickly try out GCC 8 (works), GCC 9 (works) and GCC 10 (kernel doesn‚Äôt boot)
on my machine.</p>
<h2 id="new-hypothesis">New Hypothesis</h2>
<p>To recap, we have two triggers: building Linux 6.7 or building older Linux, but
with GCC 10.</p>
<p>Two theories seemed most plausible to me at this point: Either a change in GCC
10 (possibly enabled by another change in Linux 6.7) is the problem, or the size
of the kernel is the problem.</p>
<p>To verify the file size hypothesis, I padded a known-working <code>vmlinuz</code> file to
the size of a known-broken <code>vmlinuz</code>:</p>
<pre tabindex="0"><code>% ls -l vmlinuz
% dd if=/dev/zero bs=108352 count=1 &gt;&gt; vmlinuz
</code></pre><p>But, even though it had the same file size as the known-broken kernel, the
padded kernel booted!</p>
<p>So I ruled out kernel size as a problem and started researching significant
changes in GCC 10.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">This is an incorrect conclusion! The mistake I made here was that I padded the
kernel on the file level, but the boot loader ignores the file system entirely
and takes the size from the <strong>kernel header</strong>, which I did not update.</div>
  </div>
</aside>

<p>I read that GCC 10 <a href="https://lore.kernel.org/lkml/20200422192113.GG26846@zn.tnic/t/">changed behavior with regards to stack
protection</a>.</p>
<p>Indeed, building the kernel with Debian 11 (bullseye), but with
<code>CONFIG_STACKPROTECTOR=n</code> makes it boot. So, I suspected that our bootloader
does not set up the stack correctly, or similar.</p>
<p>I sent an email to Sebastian Plotz, the author of the Minimal Linux Bootloader,
to ask if he knew about any issues with his bootloader, or if stack protection
seems like a likely issue with his bootloader to him.</p>
<p>To my surprise (it has been over 10 years since he published the bootloader!) he
actually replied: He hadn‚Äôt received any problem reports regarding his
bootloader, but didn‚Äôt really understand how stack protection would be related.</p>
<h2 id="debugging-with-qemu">Debugging with QEMU</h2>
<p>At this point, we have isolated at least one trigger for the problem, and
exhausted the easy techniques of upgrading/downgrading surrounding software
versions and asking upstream.</p>
<p>It‚Äôs time for a <strong>Tooling Level Up</strong>! Without a debugger you can only poke into
the dark, which takes time and doesn‚Äôt result in thorough
explanations. Particularly in this case, I think it is very likely that any
source modifications could have introduced subtle issues. So let‚Äôs reach for a
debugger!</p>
<p>Luckily, QEMU comes with built-in support for the GDB debugger. Just add the <code>-s -S</code> flags to your QEMU command to make QEMU stop execution (<code>-s</code>) and set up a
GDB stub (<code>-S</code>) listening on <code>localhost:1234</code>.</p>
<p>If you wanted to debug the Linux kernel, you could connect GDB to QEMU right
away, but for debugging a boot loader we need an extra step, because the boot
loader runs in <a href="https://en.wikipedia.org/wiki/Real_mode">Real Mode</a>, but QEMU‚Äôs
GDB integration rightfully defaults to the more modern Protected Mode.</p>
<p>When GDB is not configured correctly, it decodes addresses and registers with
the wrong size, which throws off the entire disassembly ‚Äî compare GDB‚Äôs
output with our assembly source:</p>
<pre tabindex="0"><code>(gdb) b *0x7c00
(gdb) c
(gdb) x/20i $pc                         ; [expected (bootloader.asm)]
=&gt; 0x7c00: cli                          ; =&gt; 0x7c00: cli
   0x7c01: xor    %eax,%eax             ;    0x7c01: xor %ax,%ax
   0x7c03: mov    %eax,%ds              ;    0x7c03: mov %ax,%ds
   0x7c05: mov    %eax,%ss              ;    0x7c05: mov %ax,%ss
   0x7c07: mov    $0xb87c00,%esp        ;    0x7c07: mov $0x7c00,%sp
   0x7c0c: adc    %cl,-0x47990440(%esi) ;    0x7c0a: mov $0x1000,%ax
   0x7c12: add    %eax,(%eax)           ;    0x7c0d: mov %ax,%es
   0x7c14: add    %al,(%eax)            ;    0x7c0f: sti
   0x7c16: xor    %ebx,%ebx
</code></pre><p>So we need to ensure we use <code>qemu-system-i386</code> (<code>qemu-system-x86_64</code> prints
<code>Remote 'g' packet reply is too long</code>) and <a href="https://stackoverflow.com/questions/32955887/how-to-disassemble-16-bit-x86-boot-sector-code-in-gdb-with-x-i-pc-it-gets-tr">configure the GDB target
architecture to 16-bit
8086</a>:</p>
<pre tabindex="0"><code>(gdb) set architecture i8086
(gdb) target remote localhost:1234
</code></pre><p>Unfortunately, the above doesn‚Äôt actually work in QEMU 2.9 and newer:
<a href="https://gitlab.com/qemu-project/qemu/-/issues/141">https://gitlab.com/qemu-project/qemu/-/issues/141</a>.</p>
<p>On the web, people are working around this bug by <a href="https://gist.github.com/MatanShahar/1441433e19637cf1bb46b1aa38a90815">using a modified <code>target.xml</code>
file</a>. I
tried this, but must have made a mistake ‚Äî I thought modifying <code>target.xml</code>
didn‚Äôt help, but when I wrote this article, I found that it does actually seem
to work. Maybe I didn‚Äôt use <code>qemu-system-i386</code> but the <code>x86_64</code> variant or
something like that.</p>
<h2 id="using-an-older-qemu">Using an older QEMU</h2>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">As I wrote in the previous paragraph, using an older QEMU might not be necessary
if the <code>target.xml</code> workaround works for you. I decided to leave this section in
because I wanted to showcase the general technique.</div>
  </div>
</aside>

<p>It is typically an exercise in frustration to get older software to compile in newer environments.</p>
<p>It‚Äôs much easier to use an older environment to run old software.</p>
<p>By querying <code>packages.debian.org</code>, we can see the <a href="https://packages.debian.org/search?keywords=qemu-system-x86&amp;searchon=names&amp;suite=all&amp;section=all">QEMU versions included in
current and previous Debian
versions</a>.</p>
<p>Unfortunately, the oldest listed version (QEMU 3.1 in Debian 10 (buster)) isn‚Äôt
old enough. By querying <code>snapshot.debian.org</code>, we can see that <a href="https://snapshot.debian.org/binary/qemu-system-x86/">Debian 9
(stretch) contained QEMU
2.8</a>.</p>
<p>So let‚Äôs run Debian 9 ‚Äî the easiest way I know is to use Docker:</p>
<pre tabindex="0"><code>% docker run --net=host -v /tmp:/tmp -ti debian:stretch
</code></pre><p>Unfortunately, the <code>debian:stretch</code> Docker container does not work out of the
box anymore, because its <code>/etc/apt/sources.list</code> points to the <code>deb.debian.org</code>
CDN, which only serves current versions and no longer serves <code>stretch</code>.</p>
<p>So we need to update the <code>sources.list</code> file to point to
<code>archive.debian.org</code>. To correctly install QEMU you need both entries, the
<code>debian</code> line and the <code>debian-security</code> line, because the Docker container has
packages from <code>debian-security</code> installed and gets confused when these are
missing from the package list:</p>
<pre tabindex="0"><code>root@650a2157f663:/# cat &gt; /etc/apt/sources.list &lt;&lt;&#39;EOT&#39;
deb http://archive.debian.org/debian/ stretch contrib main non-free
deb http://archive.debian.org/debian-security/ stretch/updates main
EOT
root@650a2157f663:/# apt update
</code></pre><p>Now we can just install QEMU as usual and start it to debug our boot process:</p>
<pre tabindex="0"><code>root@650a2157f663:/# apt install qemu-system-x86
root@650a2157f663:/# qemu-system-i386 \
  -nographic \
  -drive file=/tmp/gokr-boot.img,format=raw \
  -s -S
</code></pre><p>Now let‚Äôs start GDB and set a breakpoint on address <code>0x7c00</code>, which is <a href="https://retrocomputing.stackexchange.com/a/21957">the
address to which the BIOS loades the MBR
code</a> and starts execution:</p>
<pre tabindex="0"><code>% gdb
(gdb) set architecture i8086
The target architecture is set to &#34;i8086&#34;.
(gdb) target remote localhost:1234
Remote debugging using localhost:1234
0x0000fff0 in ?? ()
(gdb) break *0x7c00
Breakpoint 1 at 0x7c00
(gdb) continue
Continuing.

Breakpoint 1, 0x00007c00 in ?? ()
(gdb)
</code></pre><h2 id="debug-symbols">Debug symbols</h2>
<p>Okay, so we have GDB attached to QEMU and can step through assembly
instructions. Let‚Äôs start debugging!?</p>
<p>Not so fast. There is another Tooling Level Up we need first: debug
symbols. Yes, even for a Minimal Linux Bootloader, which doesn‚Äôt use any
libraries or local variables. Having proper names for functions, as well as line
numbers, will be hugely helpful in just a second.</p>
<p>Before debug symbols, I would directly build the bootloader using <code>nasm bootloader.asm</code>, but to end up with a symbol file for GDB, we need to instruct
<code>nasm</code> to generate an ELF file with debug symbols, then use <code>ld</code> to link it and
finally use <code>objcopy</code> to copy the code out of the ELF file again.</p>
<p>After <a href="https://github.com/gokrazy/internal/commit/d29c615f07b8e2632e2178b77d2d3d43dec9d46c">commit
d29c615</a>
in <code>gokrazy/internal/mbr</code>, I have <code>bootloader.elf</code>.</p>
<p>Back in GDB, we can load the symbols using the <code>symbol-file</code> command:</p>
<pre tabindex="0"><code>(gdb) set architecture i8086
The target architecture is set to &#34;i8086&#34;.
(gdb) target remote localhost:1234
Remote debugging using localhost:1234
0x0000fff0 in ?? ()
(gdb) symbol-file bootloader.elf
Reading symbols from bootloader.elf...
(gdb) break *0x7c00
Breakpoint 1 at 0x7c00: file bootloader.asm, line 48.
(gdb) continue
Continuing.

Breakpoint 1, ?? () at bootloader.asm:48
48		cli
(gdb)
</code></pre><h2 id="automation-with-gdbinit">Automation with .gdbinit</h2>
<p>At this point, we need 4 commands each time we start GDB. We can automate these
by writing them to a <code>.gdbinit</code> file:</p>
<pre tabindex="0"><code>% cat &gt; .gdbinit &lt;&lt;&#39;EOT&#39;
set architecture i8086
target remote localhost:1234
symbol-file bootloader.elf
break *0x7c00
EOT

% gdb
The target architecture is set to &#34;i8086&#34;.
0x0000fff0 in ?? ()
Breakpoint 1 at 0x7c00: file bootloader.asm, line 48.
(gdb) 
</code></pre><h2 id="understanding-program-flow">Understanding program flow</h2>
<p>The easiest way to understand program flow seems to be to step through the program.</p>
<p>But Minimal Linux Bootloader (MLB) contains loops that run through thousands of
iterations. You can‚Äôt use gdb‚Äôs <code>stepi</code> command with that.</p>
<p>Because MLB only contains a few functions, I eventually realized that placing a
breakpoint on each function would be the quickest way to understand the
high-level program flow:</p>
<pre tabindex="0"><code>(gdb) b read_kernel_setup
Breakpoint 2 at 0x7c38: file bootloader.asm, line 75.
(gdb) b check_version
Breakpoint 3 at 0x7c56: file bootloader.asm, line 88.
(gdb) b read_protected_mode_kernel
Breakpoint 4 at 0x7c8f: file bootloader.asm, line 105.
(gdb) b read_protected_mode_kernel_2
Breakpoint 5 at 0x7cd6: file bootloader.asm, line 126.
(gdb) b run_kernel
Breakpoint 6 at 0x7cff: file bootloader.asm, line 142.
(gdb) b error
Breakpoint 7 at 0x7d51: file bootloader.asm, line 190.
(gdb) b reboot
Breakpoint 8 at 0x7d62: file bootloader.asm, line 204.
</code></pre><p>With the working kernel, we get the following transcript:</p>
<pre tabindex="0"><code>(gdb)
Continuing.

Breakpoint 2, read_kernel_setup () at bootloader.asm:75
75		xor	eax, eax
(gdb)
Continuing.

Breakpoint 3, check_version () at bootloader.asm:88
88		cmp	word [es:0x206], 0x204		; we need protocol version &gt;= 2.04
(gdb)
Continuing.

Breakpoint 4, read_protected_mode_kernel () at bootloader.asm:105
105		mov	edx, [es:0x1f4]			; edx stores the number of bytes to load
(gdb)
Continuing.

Breakpoint 5, read_protected_mode_kernel_2 () at bootloader.asm:126
126		mov	eax, edx
(gdb)
Continuing.

Breakpoint 6, run_kernel () at bootloader.asm:142
142		cli
(gdb)
</code></pre><p>With the non-booting kernel, we get:</p>
<pre tabindex="0"><code>(gdb) c
Continuing.

Breakpoint 1, ?? () at bootloader.asm:48
48		cli
(gdb)
Continuing.

Breakpoint 2, read_kernel_setup () at bootloader.asm:75
75		xor	eax, eax
(gdb)
Continuing.

Breakpoint 3, check_version () at bootloader.asm:88
88		cmp	word [es:0x206], 0x204		; we need protocol version &gt;= 2.04
(gdb)
Continuing.

Breakpoint 4, read_protected_mode_kernel () at bootloader.asm:105
105		mov	edx, [es:0x1f4]			; edx stores the number of bytes to load
(gdb)
Continuing.

Breakpoint 1, ?? () at bootloader.asm:48
48		cli
(gdb)
</code></pre><p>Okay! Now we see that the bootloader starts loading the kernel from disk into
RAM, but doesn‚Äôt actually get far enough to call <code>run_kernel</code>, meaning the
problem isn‚Äôt with stack protection, with loading a working command line or with
anything <em>inside</em> the Linux kernel.</p>
<p>This lets us rule out a large part of the problem space. We now know that we can
focus entirely on the bootloader and why it cannot load the Linux kernel into
memory.</p>
<p>Let‚Äôs take a closer look‚Ä¶</p>
<h2 id="wait-this-isnt-gdb">Wait, this isn‚Äôt GDB!</h2>
<p>In the example above, using breakpoints was sufficient to narrow down the problem.</p>
<p>You might think we used GDB, and it looked like this:</p>















<a href="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-text.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-text_hufb947737200a71a40def7b55daedda4a_651685_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-text_hufb947737200a71a40def7b55daedda4a_651685_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-text_hufb947737200a71a40def7b55daedda4a_651685_600x0_resize_q75_box.jpg"
  
  width="600"
  height="589"
  style="

border: 0;

"
  
  loading="lazy"></a>



<p>But that‚Äôs not GDB! It‚Äôs an easy mistake to make. After all, GDB starts up with
just a text prompt, and as you can see from the example above, we can just enter
text and achieve a good result.</p>
<p>To see the real GDB, you need to start it up fully, meaning including its user
interface.</p>
<p>You can either use GDB‚Äôs text user interface (TUI), or a graphical user
interface for gdb, such as the one available in Emacs.</p>
<h3 id="the-gdb-text-mode-user-interface-tui">The GDB text-mode user interface (TUI)</h3>
<p>You‚Äôre already familiar with the <code>architecture</code>, <code>target</code> and <code>breakpoint</code>
commands from above. To also set up the text-mode user interface, we run a few
<code>layout</code> commands:</p>
<pre tabindex="0"><code>(gdb) set architecture i8086
(gdb) target remote localhost:1234
(gdb) symbol-file bootloader.elf
(gdb) layout split
(gdb) layout src
(gdb) layout regs
(gdb) break *0x7c00
(gdb) continue
</code></pre><p>The <code>layout split</code> command loads the text-mode user interface and splits the
screen into a register window, disassembly window and command window.</p>
<p>With <code>layout src</code> we disregard the disassembly window in favor of a source
listing window. Both are in assembly language in our case, but the source
listing contains comments as well.</p>
<p>The <code>layout src</code> command also got rid of the register window, which we‚Äôll get
back using <code>layout regs</code>. I‚Äôm not sure if there‚Äôs an easier way.</p>
<p>The result looks like this:</p>















<a href="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-featured_hucd7e1463fcc59a2458cbdaeb4c4f836a_674116_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-featured_hucd7e1463fcc59a2458cbdaeb4c4f836a_674116_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-featured_hucd7e1463fcc59a2458cbdaeb4c4f836a_674116_600x0_resize_q75_box.jpg"
  
  width="600"
  height="583"
  style="

border: 0;

"
  
  loading="lazy"></a>



<p>The source window will highlight the next line of code that will be executed. On
the left, the <code>B+</code> marker indicates an enabled breakpoint, which will become
helpful with multiple breakpoints. Whenever a register value changes, the
register and its new value will be highlighted.</p>
<p>The up and down arrow keys scroll the source window.</p>
<p>Use <code>C-x o</code> to switch between the windows.</p>
<p>If you‚Äôre familiar with Emacs, you‚Äôll recognize the keyboard shortcut. But as an
Emacs user, you might prefer the GDB Emacs user interface:</p>
<h3 id="the-gdb-emacs-user-interface-m-x-gdb">The GDB Emacs user interface (M-x gdb)</h3>
<p>This is <code>M-x gdb</code> with <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/GDB-User-Interface-Layout.html"><code>gdb-many-windows</code>
enabled</a>:</p>















<a href="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-emacs.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-emacs_huea0ff23d44f02f4aa1fe1640e7e9fb8a_801503_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-emacs_huea0ff23d44f02f4aa1fe1640e7e9fb8a_801503_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2024-02-11-minimal-linux-bootloader-debugging-story/2024-01-21-gdb-emacs_huea0ff23d44f02f4aa1fe1640e7e9fb8a_801503_600x0_resize_q75_box.jpg"
  
  width="600"
  height="584"
  style="

border: 0;

"
  
  loading="lazy"></a>



<h2 id="debugging-the-failing-loop">Debugging the failing loop</h2>
<p>Let‚Äôs take a look at the loop that we know the bootloader is entering, but not
leaving (neither <code>read_protected_mode_kernel_2</code> nor <code>run_kernel</code> are ever called):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#002070;font-weight:bold">read_protected_mode_kernel:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">edx</span>, [<span style="color:#60add5">es</span>:<span style="color:#40a070">0x1f4</span>]              <span style="color:#60a0b0;font-style:italic">; edx stores the number of bytes to load
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">shl</span>  <span style="color:#60add5">edx</span>, <span style="color:#40a070">4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#002070;font-weight:bold">.loop:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">cmp</span>  <span style="color:#60add5">edx</span>, <span style="color:#40a070">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">je</span>   <span style="color:#60add5">run_kernel</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">cmp</span>  <span style="color:#60add5">edx</span>, <span style="color:#40a070">0xfe00</span>                  <span style="color:#60a0b0;font-style:italic">; less than 127*512 bytes remaining?
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">jb</span>   <span style="color:#60add5">read_protected_mode_kernel_2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">eax</span>, <span style="color:#40a070">0x7f</span>                    <span style="color:#60a0b0;font-style:italic">; load 127 sectors (maximum)
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">xor</span>  <span style="color:#60add5">bx</span>, <span style="color:#60add5">bx</span>                       <span style="color:#60a0b0;font-style:italic">; no offset
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">cx</span>, <span style="color:#40a070">0x2000</span>                   <span style="color:#60a0b0;font-style:italic">; load temporary to 0x20000
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">esi</span>, <span style="color:#60add5">current_lba</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">call</span> <span style="color:#60add5">read_from_hdd</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">cx</span>, <span style="color:#40a070">0x7f00</span>                   <span style="color:#60a0b0;font-style:italic">; move 65024 bytes (127*512 byte)
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">call</span> <span style="color:#60add5">do_move</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">sub</span>  <span style="color:#60add5">edx</span>, <span style="color:#40a070">0xfe00</span>                  <span style="color:#60a0b0;font-style:italic">; update the number of bytes to load
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">add</span>  <span style="color:#60add5">word</span> [<span style="color:#60add5">gdt.dest</span>], <span style="color:#40a070">0xfe00</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">adc</span>  <span style="color:#60add5">byte</span> [<span style="color:#60add5">gdt.dest</span><span style="">+</span><span style="color:#40a070">2</span>], <span style="color:#40a070">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">jmp</span>  <span style="color:#60add5">short</span> <span style="color:#60add5">read_protected_mode_kernel.loop</span>
</span></span></code></pre></div><p>The comments explain that the code loads chunks of FE00h == 65024 (127*512)
bytes at a time.</p>
<p>Loading means calling <code>read_from_hdd</code>, then <code>do_move</code>. Let‚Äôs take a look at <code>do_move</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-asm" data-lang="asm"><span style="display:flex;"><span><span style="color:#002070;font-weight:bold">do_move:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">push</span> <span style="color:#60add5">edx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">push</span> <span style="color:#60add5">es</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">xor</span>  <span style="color:#60add5">ax</span>, <span style="color:#60add5">ax</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">es</span>, <span style="color:#60add5">ax</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">ah</span>, <span style="color:#40a070">0x87</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">mov</span>  <span style="color:#60add5">si</span>, <span style="color:#60add5">gdt</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">int</span>  <span style="color:#40a070">0x15</span>     <span style="color:#60a0b0;font-style:italic">; line 182
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>    <span style="color:#06287e">jc</span>   <span style="color:#60add5">error</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">pop</span>  <span style="color:#60add5">es</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">pop</span>  <span style="color:#60add5">edx</span>
</span></span><span style="display:flex;"><span>    <span style="color:#06287e">ret</span>
</span></span></code></pre></div><p><code>int 0x15</code> is a call to the BIOS Service Interrupt, which will dispatch the call
based on <code>AH == 87H</code> to the <a href="http://www.techhelpmanual.com/222-int_15h_87h__move_memory_block.html">Move Memory Block
(techhelpmanual.com)</a>
function.</p>
<p>This function moves the specified amount of memory (65024 bytes in our case)
from source/destination addresses specified in a Global Descriptor Table (GDT)
record.</p>
<p>We can use GDB to show the addresses of each of <code>do_move</code>‚Äôs memory move calls by
telling it to stop at line 182 (the <code>int 0x15</code> instruction) and print the GDT
record‚Äôs destination descriptor:</p>
<pre tabindex="0"><code>(gdb) break 182
Breakpoint 2 at 0x7d49: file bootloader.asm, line 176.

(gdb) command 2
Type commands for breakpoint(s) 2, one per line.
End with a line saying just &#34;end&#34;.
&gt;x/8bx gdt+24
&gt;end

(gdb) continue
Continuing.

Breakpoint 1, ?? () at bootloader.asm:48
42		cli

(gdb)
Continuing.

Breakpoint 2, do_move () at bootloader.asm:182
182		int	0x15
0x7d85:	0xff	0xff	0x00	0x00	0x10	0x93	0x00	0x00

(gdb)
Continuing.

Breakpoint 2, do_move () at bootloader.asm:182
182		int	0x15
0x7d85:	0xff	0xff	0x00	0xfe	0x10	0x93	0x00	0x00

(gdb)
</code></pre><p>The destination address is stored in byte <code>2..4</code>. Remember to read these little
endian entries ‚Äúback to front‚Äù.</p>
<ul>
<li>
<p>Address #1 is <code>0x100000</code>.</p>
</li>
<li>
<p>Address #2 is <code>0x10fe00</code>.</p>
</li>
</ul>
<p>If we press Return long enough, we eventually end up here:</p>
<pre tabindex="0"><code>Breakpoint 2, do_move () at bootloader.asm:182
182		int	0x15
0x7d85:	0xff	0xff	0x00	0x1e	0xff	0x93	0x00	0x00
(gdb)
Continuing.

Breakpoint 2, do_move () at bootloader.asm:182
182		int	0x15
0x7d85:	0xff	0xff	0x00	0x1c	0x00	0x93	0x00	0x00

(gdb)
Continuing.

Breakpoint 1, ?? () at bootloader.asm:48
42		cli
(gdb)

Program received signal SIGTRAP, Trace/breakpoint trap.
0x000079b0 in ?? ()
(gdb)
</code></pre><p>Now that execution left the bootloader, let‚Äôs take a look at the last <code>do_move</code>
call parameters: We notice that the destination address overflowed its 24 byte
data type:</p>
<ul>
<li>Address #y is <code>0xff1e00</code></li>
<li>Address #z is <code>0x001c00</code></li>
</ul>
<h2 id="root-cause">Root cause</h2>
<p>At this point I reached out to Sebastian again to ask him if there was an
(undocumented) fundamental architectural limit to his Minimal Linux Bootloader ‚Äî
with 24 bit addresses, you can address at most 16 MB of memory.</p>
<p>He replied explaining that he didn‚Äôt know of this limit either! He then linked
to <a href="http://www.techhelpmanual.com/222-int_15h_87h__move_memory_block.html">Move Memory Block
(techhelpmanual.com)</a>
as proof for the 24 bit limit.</p>
<h3 id="speculation">Speculation</h3>
<p>So, is it impossible to load larger kernels into memory from Real Mode? I‚Äôm not
sure.</p>
<p>The current bootloader code prepares a GDT in which addresses are 24 bits long
at most. But note that the techhelpmanual.com documentation that Sebastian
referenced is apparently for the <a href="https://en.wikipedia.org/wiki/Intel_80286">Intel
286</a> (a 16 bit CPU), and some of the
GDT bytes are declared reserved.</p>
<p>Today‚Äôs CPUs are <a href="https://en.wikipedia.org/wiki/I386">Intel 386</a>-compatible (a
32 bit CPU), which seems to use one of the formerly reserved bytes to represent
bit <code>24..31</code> of the address, meaning we might be able to pass 32 bit addresses
to BIOS functions in a GDT after all!</p>
<p>I wasn‚Äôt able to find clear authoritative documentation on the Move Memory Block
API on 386+, or whether BIOS functions in general are just expected to work with 32 bit addresses.</p>
<p>But Microsoft‚Äôs 1989 <a href="https://github.com/MikeyG/himem/blob/e041532abee44d663067dc6c2b782e459081fa14/oemsrc/xm386.asm#L12">HIMEM.SYS source contains a
struct</a>
that documents this 32-bit descriptor usage. A more modern reference is this
<a href="https://sys.cs.fau.de/extern/lehre/ws23/bs/uebung/seminar/boot.pdf">Operating Systems Class from FAU
2023</a> (page
71/72).</p>
<p>Hence I‚Äôm <em>thinking</em> that most BIOS implementations should actually support 32
bit addresses for their Move Memory Block implementation ‚Äî provided you fill the
descriptor accordingly.</p>
<p>If that doesn‚Äôt work out, there‚Äôs also <a href="https://www.os2museum.com/wp/a-brief-history-of-unreal-mode/">‚ÄúUnreal
Mode‚Äù</a>, which
allows using up to 4 GB in Real Mode, but is a change that is a lot more
complicated. See also <a href="https://blogsystem5.substack.com/p/beyond-the-1-mb-barrier-in-dos">Julio Merino‚Äôs ‚ÄúBeyond the 1 MB barrier in DOS‚Äù
post</a> to get
an idea of the amount of code needed.</p>
<h3 id="update-a-fix">Update: a fix!</h3>
<p><a href="https://lobste.rs/s/kaj3c2/minimal_linux_bootloader_debugging#c_ybraf4">Lobsters reader abbeyj pointed
out</a>
that the following code change should fix the truncation and result in a GDT
with all address bits in the right place:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-diff" data-lang="diff"><span style="display:flex;"><span><span style="color:#a00000">--- i/mbr/bootloader.asm
</span></span></span><span style="display:flex;"><span><span style="color:#a00000"></span><span style="color:#00a000">+++ w/mbr/bootloader.asm
</span></span></span><span style="display:flex;"><span><span style="color:#00a000"></span><span style="color:#800080;font-weight:bold">@@ -119,6 +119,7 @@ read_protected_mode_kernel:
</span></span></span><span style="display:flex;"><span><span style="color:#800080;font-weight:bold"></span> 	sub	edx, 0xfe00			; update the number of bytes to load
</span></span><span style="display:flex;"><span> 	add	word [gdt.dest], 0xfe00
</span></span><span style="display:flex;"><span> 	adc	byte [gdt.dest+2], 0
</span></span><span style="display:flex;"><span><span style="color:#00a000">+	adc	byte [gdt.dest+5], 0
</span></span></span><span style="display:flex;"><span><span style="color:#00a000"></span> 	jmp	short read_protected_mode_kernel.loop
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span> read_protected_mode_kernel_2:
</span></span></code></pre></div><p>‚Ä¶and indeed, in my first test this seems to fix the problem! It‚Äôll take me a
little while to clean this up and submit it. You can follow <a href="https://github.com/gokrazy/gokrazy/issues/248">gokrazy issue
#248</a> if you‚Äôre interested.</p>
<h2 id="bonus-reading-bios-source">Bonus: reading BIOS source</h2>
<p>There are actually a couple of BIOS implementations that we can look into to get
a better understanding of how Move Memory Block works.</p>
<p>We can look at <a href="https://en.wikipedia.org/wiki/DOSBox">DOSBox</a>, an open source
DOS emulator. Its <a href="https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/0_74_3/src/ints/bios.cpp#l663">Move Memory Block
implementation</a>
does seem to support 32 bit addresses:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>PhysPt dest	<span style="color:#666">=</span> (<span style="color:#06287e">mem_readd</span>(data<span style="color:#666">+</span><span style="color:#40a070">0x1A</span>) <span style="color:#666">&amp;</span> <span style="color:#40a070">0x00FFFFFF</span>) <span style="color:#666">+</span>
</span></span><span style="display:flex;"><span>              (<span style="color:#06287e">mem_readb</span>(data<span style="color:#666">+</span><span style="color:#40a070">0x1E</span>)<span style="color:#666">&lt;&lt;</span><span style="color:#40a070">24</span>);
</span></span></code></pre></div><p>Another implementation is <a href="https://www.seabios.org/SeaBIOS">SeaBIOS</a>. Contrary
to DOSBox, SeaBIOS is not just used in emulation: The PC Engines apu uses
coreboot with SeaBIOS. QEMU also uses SeaBIOS.</p>
<p><a href="https://github.com/qemu/seabios/blob/ea1b7a0733906b8425d948ae94fba63c32b1d425/src/system.c#L72">The SeaBIOS <code>handle_1587</code> source
code</a>
is a little harder to follow, because it requires knowledge of Real Mode
assembly. The way I read it, SeaBIOS doesn‚Äôt truncate or otherwise modify the
descriptors and just passes them to the CPU. On 386 or newer, 32 bit addresses
should work.</p>
<h2 id="mitigation">Mitigation</h2>
<p>While it‚Äôs great to understand the limitation we‚Äôre running into, I wanted to
unblock the pull request as quickly as possible, so I needed a quick mitigation
instead of investigating if <a href="#speculation">my speculation</a> can be developed into
a proper fix.</p>
<p>When I started router7, we didn‚Äôt support loadable kernel modules, so everything
had to be compiled into the kernel. We now do support loadable kernel modules,
so I could have moved functionality into modules.</p>
<p>Instead, I found an even easier quick fix: <a href="https://github.com/rtr7/kernel/commit/304a623297fe3b7ae303811ac097c01fcca901e0">switching from gzip to zstd
compression</a>. This
saved about 1.8 MB and will buy us some time to implement a proper fix while
unblocking automated new Linux kernel version merges.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I wanted to share this debugging story because it shows a couple of interesting lessons:</p>
<ol>
<li>
<p>Being able to run older versions of various parts of your software stack is a
very valuable debugging tool. It helped us isolate a trigger for the bug
(using an older GCC) and it helped us set up a debugging environment (using
an older QEMU).</p>
</li>
<li>
<p>Setting up a debugger can be annoying (symbol files, learning the UI) but
it‚Äôs <em>so worth it</em>.</p>
</li>
<li>
<p>Be on the lookout for wrong turns during debugging. Write down every
conclusion and challenge it.</p>
</li>
<li>
<p>The BIOS can seem mysterious and ‚Äútoo low level‚Äù but there are many blog
posts, lectures and tutorials. You can also just read open-source BIOS code
to understand it much better.</p>
</li>
</ol>
<p>Enjoy poking at your BIOS!</p>
<h2 id="appendix-resources">Appendix: Resources</h2>
<p>I found the following resources helpful:</p>
<ul>
<li><a href="https://0xax.gitbook.io/linux-insides/summary/booting/linux-bootstrap-1">linux-insides: From bootloader to kernel</a></li>
<li><a href="https://www.pcjs.org/documents/books/mspl13/msdos/encyclopedia/section2/">The MS-DOS Encyclopedia</a></li>
<li><a href="https://www.youtube.com/watch?v=0q6Ujn_zNH8">Ben Eater: A simple BIOS for my breadboard computer (22 minutes)</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[systemd: enable indefinite service restarts]]></title>
    <link href="https://michael.stapelberg.ch/posts/2024-01-17-systemd-indefinite-service-restarts/"/>
    <id>https://michael.stapelberg.ch/posts/2024-01-17-systemd-indefinite-service-restarts/</id>
    <published>2024-01-17T20:58:14+01:00</published>
    <content type="html"><![CDATA[<p>When a service fails to start up enough times in a row, systemd gives up on it.</p>
<p>On servers, this isn‚Äôt what I want ‚Äî in general it‚Äôs helpful for automated
recovery if daemons are restarted indefinitely. As long as you don‚Äôt have
circular dependencies between services, all your services will eventually come
up after transient failures, without having to specify dependencies.</p>
<p>This is particularly useful because specifying dependencies on the systemd level
introduces footguns: when interactively stopping individual services, systemd
also stops the dependents. And then you need to remember to restart the
dependent services later, which is easy to forget.</p>
<h2 id="enabling-indefinite-restarts-for-a-service">Enabling indefinite restarts for a service</h2>
<p>To make systemd restart a service indefinitely, I first like to create a drop-in
config file like so:</p>
<pre tabindex="0"><code>cat &gt; /etc/systemd/system/restart-drop-in.conf &lt;&lt;&#39;EOT&#39;
[Unit]
StartLimitIntervalSec=0

[Service]
Restart=always
RestartSec=1s
EOT
</code></pre><p>Then, I can enable the restart behavior for individual services like
<code>prometheus-node-exporter</code>, without having to modify their <code>.service</code> files
(which needs manual effort when updating):</p>
<pre tabindex="0"><code>cd /etc/systemd/system
mkdir prometheus-node-exporter.service.d
cd prometheus-node-exporter.service.d
ln -s ../restart-drop-in.conf
systemctl daemon-reload
</code></pre><h2 id="changing-the-defaults-for-all-services">Changing the defaults for all services</h2>
<p>If most of your services set <code>Restart=always</code> or <code>Restart=on-failure</code>, you can
change the system-wide defaults for <code>RestartSec</code> and <code>StartLimitIntervalSec</code>
like so:</p>
<pre tabindex="0"><code>mkdir /etc/systemd/system.conf.d
cat &gt; /etc/systemd/system.conf.d/restartdefaults.conf &lt;&lt;&#39;EOT&#39;
[Manager]
DefaultRestartSec=1s
DefaultStartLimitIntervalSec=0
EOT
systemctl daemon-reload
</code></pre><h2 id="what-do-the-default-settings-do">What do the default settings do?</h2>
<p>So why do we need to change these settings to begin with?</p>
<p>The default systemd settings (as of systemd 255) are:</p>
<pre tabindex="0"><code>DefaultRestartSec=100ms
DefaultStartLimitIntervalSec=10s
DefaultStartLimitBurst=5
</code></pre><p>This means that services which specify <code>Restart=always</code> are restarted 100ms
after they crash, and if the service crashes more than 5 times in 10 seconds,
systemd does not attempt to restart the service anymore.</p>
<p>It‚Äôs easy to see that for a service which takes, say, 100ms to crash, for
example because it can‚Äôt bind on its listening IP address, this means:</p>
<table>
<thead>
<tr>
<th>time</th>
<th>event</th>
</tr>
</thead>
<tbody>
<tr>
<td>T+0</td>
<td>first start</td>
</tr>
<tr>
<td>T+100ms</td>
<td>first crash</td>
</tr>
<tr>
<td>T+200ms</td>
<td>second start</td>
</tr>
<tr>
<td>T+300ms</td>
<td>second crash</td>
</tr>
<tr>
<td>T+400ms</td>
<td>third start</td>
</tr>
<tr>
<td>T+500ms</td>
<td>third crash</td>
</tr>
<tr>
<td>T+600ms</td>
<td>fourth start</td>
</tr>
<tr>
<td>T+700ms</td>
<td>fourth crash</td>
</tr>
<tr>
<td>T+800ms</td>
<td>fifth start</td>
</tr>
<tr>
<td>T+900ms</td>
<td>fifth crash within 10s</td>
</tr>
<tr>
<td>T+1s</td>
<td>systemd gives up</td>
</tr>
</tbody>
</table>
<h2 id="why-does-systemd-give-up-by-default">Why does systemd give up by default?</h2>
<p>I‚Äôm not sure. If I had to speculate, I would guess the developers wanted to
prevent laptops running out of battery too quickly because one CPU core is
permanently busy just restarting some service that‚Äôs crashing in a tight loop.</p>
<p>That same goal could be achieved with a more relaxed <code>DefaultRestartSec=</code> value,
though: With <code>DefaultRestartSec=5s</code>, for example, we would sufficiently space
out these crashes over time.</p>
<p>There is <a href="https://github.com/systemd/systemd/issues/30804">some recent discussion
upstream</a> regarding changing
the default. Let‚Äôs see where the discussion goes.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[My 2023 all-flash ZFS NAS (Network Storage) build]]></title>
    <link href="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/"/>
    <id>https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/</id>
    <published>2023-10-25T18:03:14+02:00</published>
    <content type="html"><![CDATA[<p>For over 10 years now, I run two self-built NAS (Network Storage) devices which serve media (currently via Jellyfin) and run daily backups of all my PCs and servers.</p>
<p>In this article, I describe my goals, which hardware I picked for my new build (and why) and how I set it up.</p>
<h2 id="design-goals">Design Goals</h2>
<p>I use my network storage devices primarily for archival (daily backups), and secondarily as a media server.</p>
<p>There are days when I don‚Äôt consume any media (TV series and movies) from my NAS, because I have my music collection mirrored to another server that‚Äôs running 24/7 anyway. In total, my NAS runs for a few hours in some evenings, and for about an hour (daily backups) in the mornings.</p>
<p>This usage pattern is distinctly different than, for example, running a NAS as a file server for collaborative video editing that needs to be available 24/7.</p>
<p>The goals of my NAS setup are:</p>
<ol>
<li>Save power: each NAS build only runs when needed.
<ul>
<li>They must support Wake-on-LAN or <a href="/posts/2022-10-09-remote-power-button/">similar (ESP32 remote power button)</a>.</li>
<li>Scheduling of backups is done separately, on a Raspberry Pi with <a href="https://gokrazy.org/">gokrazy</a>.</li>
<li>Convenient <a href="https://github.com/stapelberg/regelwerk/commit/8b81d7a808b1d76a0e96bdb4ab43964623d133c4">power off (tied to our all-lights-out button)</a> and power on (with <a href="https://github.com/stapelberg/zkj-nas-tools/blob/master/webwake/webwake.go">webwake</a>).</li>
</ul>
</li>
<li>Use Off-the-shelf hardware and software.
<ul>
<li>When hardware breaks, I can get replacements from the local PC store the same day.</li>
<li>Even when only the data disk(s) survive, I should be able to access my data when booting a standard live Linux system.</li>
<li>Minimal application software risk: I want to minimize risk for manual screw-ups or software bugs, meaning I use the venerable rsync for my backup needs (not Borg, restic, or similar).</li>
<li>Minimal system software risk: I use reliable file systems with the minimal feature set ‚Äî no LVM or btrfs snapshots, no ZFS replication, etc. To achieve redundancy, I don‚Äôt use a cluster file system with replication, instead I synchronize my two NAS builds using rsync, without the <code>--delete</code> flag.</li>
</ul>
</li>
<li>Minimal failure domains: when one NAS fails, the other one keeps working.
<ul>
<li>Having N+1 redundancy here takes the stress out of repairing your NAS.</li>
<li>I run each NAS in a separate room, so that accidents like fires or spilled drinks only affect one machine.</li>
</ul>
</li>
</ol>
<h4 id="file-system-zfs">File System: ZFS</h4>
<p>In this specific build, I am trying out <a href="https://en.wikipedia.org/wiki/ZFS">ZFS</a>. Because I have two NAS builds
running, it is easy to change one variable of the system (which file system to
use) in one build, without affecting the other build.</p>
<p>My main motivation for using ZFS instead of <a href="https://en.wikipedia.org/wiki/Ext4"><code>ext4</code></a> is that ZFS does data checksumming, whereas ext4 only checksums metadata and the journal, but not data at rest. With large enough datasets, the chance of bit flips increases significantly, and I would prefer to know about them so that I can restore the affected files from another copy.</p>
<h2 id="hardware">Hardware</h2>
<p>Each of the two storage builds has (almost) the same components. This makes it easy to diagnose one with the help of the other. When needed, I can swap out components of the second build to temporarily repair the first one, or vice versa.</p>















<a href="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/IMG_1974.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/IMG_1974_hubee9c905cc3b7237e7c96518cbb38b46_1156723_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/IMG_1974_hubee9c905cc3b7237e7c96518cbb38b46_1156723_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/IMG_1974_hubee9c905cc3b7237e7c96518cbb38b46_1156723_600x0_resize_q75_box.jpg"
  alt="photo of the Network Storage PC from the side, showing the Noctua case fan and CPU cooler, data disks, PSU and cables" title="photo of the Network Storage PC from the side, showing the Noctua case fan and CPU cooler, data disks, PSU and cables"
  width="600"
  height="450"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h3 id="base-components">Base Components</h3>
<table>
<thead>
<tr>
<th>Price</th>
<th>Type</th>
<th>Article</th>
<th>Remark</th>
</tr>
</thead>
<tbody>
<tr>
<td>114 CHF</td>
<td>mainboard</td>
<td><a href="https://www.digitec.ch/en/s1/product/asrock-b450-gaming-itxac-am4-amd-b450-mini-itx-motherboards-9385702">AsRock B450 Gaming ITX/ac</a></td>
<td>Mini ITX</td>
</tr>
<tr>
<td>80 CHF</td>
<td>cpu</td>
<td><a href="https://www.heise.de/preisvergleich/amd-athlon-3000g-yd3000c6m2ofh-yd3000c6fhmpk-a2174924.html?hloc=at&amp;hloc=de">AMD Athlon 3000G</a></td>
<td>35W TDP, GPU</td>
</tr>
<tr>
<td>65 CHF</td>
<td>cpu cooler</td>
<td><a href="https://www.digitec.ch/de/s1/product/noctua-nh-l12s-70-mm-cpu-kuehler-6817433">Noctua NH-L12S</a></td>
<td>silent!</td>
</tr>
<tr>
<td>58 CHF</td>
<td>power supply</td>
<td><a href="https://www.digitec.ch/en/s1/product/silverstone-power-supply-st30sf-300w-sfx-300-w-power-supply-pc-5988297">Silverstone ST30SF 300W SFX</a></td>
<td>SFX form factor</td>
</tr>
<tr>
<td>51 CHF</td>
<td>case</td>
<td><a href="https://www.digitec.ch/en/s1/product/silverstone-sst-sg05bb-lite-mini-itx-mini-dtx-pc-case-3525365">Silverstone SST-SG05BB-Lite</a></td>
<td>Mini ITX</td>
</tr>
<tr>
<td>48 CHF</td>
<td>system disk</td>
<td><a href="https://www.digitec.ch/en/s1/product/wd-red-sn700-250-gb-m2-2280-ssd-17688689">WD Red SN700 250GB</a></td>
<td>M.2 NVMe</td>
</tr>
<tr>
<td>32 CHF</td>
<td>case fan</td>
<td><a href="https://www.digitec.ch/en/s1/product/noctua-nf-s12a-uln-120mm-1x-pc-fans-2451401">Noctua NF-S12A ULN</a></td>
<td>silent 120mm</td>
</tr>
<tr>
<td>28 CHF</td>
<td>ram</td>
<td><a href="https://www.digitec.ch/en/s1/product/gskill-value-1-x-8gb-2400-mhz-ddr4-ram-dimm-ram-11056524">8 GB DDR4 Value RAM (F4-2400C15-8GNT)</a></td>
<td></td>
</tr>
</tbody>
</table>
<p>The total price of 476 CHF makes this not a cheap build.</p>
<p>But, I think each component is well worth its price. Here‚Äôs my thinking regarding the components:</p>
<ul>
<li>Why not a cheaper <strong>system disk</strong>? I wanted to use an M.2 NVMe disk so that I could mount it on the bottom of the mainboard instead of having to mount another SATA disk in the already-crowded case. Instead of chosing the cheapest M.2 disk I could find, I went with WD Red as a brand I recognize. While it‚Äôs not a lot of effort to re-install the system disk, it‚Äôs still annoying and something I want to avoid if possible. If spending 20 bucks saves me one disk swap + re-install, that‚Äôs well worth it for me!</li>
<li>Why not skip the <strong>system disk</strong> entirely and install on the data disks? That makes the system harder to (re-)install, and easier to make manual errors when recovering the system. I like to physically disconnect the data disks while re-installing a NAS, for example. (I‚Äôm a fan of simple precautions that prevent drastic mistakes!)</li>
<li>Why not a cheaper <strong>CPU cooler</strong>? In <a href="/posts/2019-10-23-nas/">one of my earlier NAS builds</a>, I used a (cheaper) passive CPU fan, which was directly in the air stream of the Noctua 120mm case fan. This setup was spec&rsquo;ed for the CPU I used, and yet said CPU died as the only CPU to die on me in many many years. I want a reliable CPU fan, but also an absolutely silent build, so I went with the Noctua CPU cooler.</li>
<li>Why not skip the <strong>case fan</strong>, or go with the Silverstone-supplied one? You might argue that the airflow of the CPU cooler is sufficient for this entire build. Maybe that‚Äôs true, but I don‚Äôt want to risk it. Also, there are 3 disks (two data disks and one system disk) that can benefit from additional airflow.</li>
<li>Regarding the <strong>CPU</strong>, I chose the cheapest AMD CPU for Socket AM4, with a 35W TDP and built-in graphics. The built-in graphics means I can connect an HDMI monitor for setup and troubleshooting, without having to use the mainboard‚Äôs valuable one and only PCIe slot.
<br>
<br>
Unfortunately, AMD CPUs with 35W TDP are not readily available right now. My tip is to look around for a bit, and maybe buy a used one. Chose either the predecessor Athlon 200GE, or the newer generation Ryzen APU series, whichever you can get your hands on.</li>
<li>Regarding the <strong>mainboard</strong>, I went with the AsRock Mini ITX series, which have served me well over the years. I started with an <a href="https://www.asrock.com/mb/AMD/AM1H-itx/">AsRock AM1H-ITX</a> in 2016, then bought two <a href="https://www.digitec.ch/en/s1/product/asrock-ab350-gaming-itxac-am4-amd-b350-mini-itx-motherboards-7022839">AsRock AB350 Gaming ITX/ac</a> in 2019, and recently an <a href="https://www.digitec.ch/en/s1/product/asrock-b450-gaming-itxac-am4-amd-b450-mini-itx-motherboards-9385702">AsRock B450 Gaming ITX/ac</a>.</li>
</ul>
<p>As a disclaimer: the two builds I use are <em>very similar</em> to the component list above, with the following differences:</p>
<ol>
<li>On storage2, I use an old AMD Ryzen 5 5600X CPU instead of the listed Athlon 3000G. The extra performance isn‚Äôt needed, and the lack of integrated graphics is annoying. But, I had the CPU lying around and didn‚Äôt want it to go to waste.</li>
<li>On storage3, I use an old AMD Athlon 200GE CPU on an <a href="https://www.digitec.ch/en/s1/product/asrock-ab350-gaming-itxac-am4-amd-b350-mini-itx-motherboards-7022839">AsRock AB350</a> mainboard.</li>
</ol>
<p>I didn‚Äôt describe the <em>exact</em> builds I use because a component list is more useful if the components on it are actually available :-).</p>
<h3 id="16-tb-ssd-data-disks">16 TB SSD Data Disks</h3>
<p>It used to be that Solid State Drives (SSDs) were just way too expensive compared to spinning hard disks when talking about terabyte sizes, so I used to put the largest single disk drive I could find into each NAS build: I started with 8 TB disks, then upgraded to 16 TB disks later.</p>
<p>Luckily, the price of flash storage has come down quite a bit: the <a href="https://www.digitec.ch/en/s1/product/samsung-870-qvo-8000-gb-25-ssd-13388185">Samsung SSD 870 QVO (8 TB)</a> costs ‚Äúonly‚Äù 42 CHF per TB. For a total of 658 CHF, I can get 16 TB of flash storage in 2 drives:</p>















<a href="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-22-samsung-870qvo-featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-22-samsung-870qvo-featured_hu799c805b17c89c62874113693200acea_520811_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-22-samsung-870qvo-featured_hu799c805b17c89c62874113693200acea_520811_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-22-samsung-870qvo-featured_hu799c805b17c89c62874113693200acea_520811_600x0_resize_q75_box.jpg"
  alt="two samsung 870 QVO disks" title="two samsung 870 QVO disks"
  width="600"
  height="338"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>Of course, spinning hard disks are at 16 CHF per TB, so going all-flash is over 3x as expensive.</p>
<p>I decided to pay the premium to get a number of benefits:</p>
<ul>
<li>My NAS devices are quieter because there are no more spinning disks in them. This gives me more flexibility in where to physically locate each storage machine.</li>
<li>My daily backups run quicker, meaning each NAS needs to be powered on for less time. The effect was actually quite pronounced, because figuring out which files need backing up requires a lot of random disk access. My backups used to take about 1 hour, and now finish in less than 20 minutes.</li>
<li>The quick access times of SSDs solve the last remaining wrinkle in my backup scheme: deleting backups and measuring used disk space is finally fast!</li>
</ul>
<h3 id="power-usage">Power Usage</h3>
<p>The choice of CPU, Mainboard and Network Card all influence the total power usage of the system. Here are a couple of measurements to give you a rough idea of the power usage:</p>
<table>
<thead>
<tr>
<th>build</th>
<th>CPU</th>
<th>main board</th>
<th>network card</th>
<th>idle</th>
<th>load</th>
</tr>
</thead>
<tbody>
<tr>
<td>s2</td>
<td>5600X</td>
<td><a href="https://www.digitec.ch/en/s1/product/asrock-b450-gaming-itxac-am4-amd-b450-mini-itx-motherboards-9385702">B450</a></td>
<td>10G: Mellanox ConnectX-3</td>
<td>26W</td>
<td>60W</td>
</tr>
<tr>
<td>s3</td>
<td>200GE</td>
<td><a href="https://www.digitec.ch/en/s1/product/asrock-ab350-gaming-itxac-am4-amd-b350-mini-itx-motherboards-7022839">AB350</a></td>
<td>10G: <a href="https://www.fs.com/products/135978.html">FS Intel 82599</a></td>
<td>28W</td>
<td>50W</td>
</tr>
<tr>
<td>s3</td>
<td>200GE</td>
<td><a href="https://www.digitec.ch/en/s1/product/asrock-ab350-gaming-itxac-am4-amd-b350-mini-itx-motherboards-7022839">AB350</a></td>
<td>1G onboard</td>
<td>23W</td>
<td>40W</td>
</tr>
</tbody>
</table>
<p>These values were measured using a <a href="https://mystrom.ch/de/wifi-switch/">myStrom WiFi Switch</a>.</p>
<h2 id="operating-system">Operating System</h2>
<h3 id="previously-coreos">Previously: CoreOS</h3>
<p>Before this build, I ran my NAS using Docker containers on <a href="https://en.wikipedia.org/wiki/Container_Linux">CoreOS (later renamed to Container Linux)</a>, which was a light-weight Linux distribution focused on containers. There are two parts about CoreOS that I liked most.</p>
<p>The most important part was that CoreOS updated automatically, using an A/B updating scheme, just like I do in <a href="https://gokrazy.org/">gokrazy</a>. I want to run as many of my devices as possible with A/B updates.</p>
<p>The other bit I like is that the configuration is very clearly separated from the OS. I managed the configuration (a <a href="https://cloud-init.io/">cloud-init YAML file</a>) on my main PC, so when swapping out the NAS system disk with a blank disk, I could just plug my config file into the CoreOS installer, and be done.</p>
<p>When CoreOS was bought by Red Hat and merged into Project Atomic, there wasn‚Äôt a good migration path and cloud-init wasn‚Äôt supported anymore. As a short-term solution, I switched from CoreOS to Flatcar Linux, a spiritual successor.</p>
<h3 id="now-ubuntu-server">Now: Ubuntu Server</h3>
<p>For this build, I wanted to try out ZFS. I always got the impression that ZFS was a pain to run because its kernel modules are not included in the upstream Linux kernel source.</p>
<p>Then, in 2016, Ubuntu decided to include ZFS by default. There are a couple of other Linux distributions on which ZFS seems easy enough to run, like Gentoo, Arch Linux or NixOS.</p>
<p>I wanted to spend my ‚Äúinnovation tokens‚Äù on ZFS, and keep the rest boring and similar to what I already know and work with, so I chose Ubuntu Server over NixOS. It‚Äôs similar enough to Debian that I don‚Äôt need to re-learn.</p>
<p>Luckily, the migration path from Flatcar‚Äôs cloud-init config to Ubuntu Server is really easy: just copy over parts of the cloud-config until you‚Äôre through the entire thing. It‚Äôs like a checklist!</p>
<h3 id="maybe-later-gokrazy">Maybe later? gokrazy</h3>
<p>In the future, it might be interesting to build a NAS setup using <a href="https://gokrazy.org">gokrazy</a>. In particular since we now can <a href="https://gokrazy.org/packages/docker-containers/">run Docker containers on gokrazy</a>, which makes running Samba or Jellyfin quite easy!</p>
<p>Using gokrazy instead of Ubuntu Server would get rid of a lot of moving parts. The current blocker is that ZFS is not available on gokrazy. Unfortunately that‚Äôs not easy to change, in particular also from a licensing perspective.</p>
<h2 id="setup">Setup</h2>
<h3 id="uefi">UEFI</h3>
<p>I changed the following UEFI settings:</p>
<ul>
<li>
<p>Advanced ‚Üí ACPI Configuration ‚Üí PCIE Devices Power On: Enabled</p>
<ul>
<li>This setting is needed (but not sufficient) for Wake On LAN (WOL). You also need to enable WOL in your operating system.</li>
</ul>
</li>
<li>
<p>Advanced ‚Üí Onboard Devices Configuration ‚Üí Restore on AC/Power Loss: Power On</p>
<ul>
<li>This setting ensures the machine turns back on after a power loss. Without it, WOL might not work after a power loss.</li>
</ul>
</li>
</ul>
<h3 id="operating-system-1">Operating System</h3>
<h4 id="network-preparation">Network preparation</h4>
<p>I like to configure static IP addresses for devices that are a permanent part of my network.</p>
<p>I have come to prefer configuring static addresses as static DHCP leases in my router, because then the address remains the same no matter which operating system I boot ‚Äî whether it‚Äôs the installed one, or a live USB stick for debugging.</p>
<h4 id="ubuntu-server">Ubuntu Server</h4>
<ol>
<li>
<p>Download Ubuntu Server from <a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a></p>
<ul>
<li>I initially let the setup program install Docker, but that‚Äôs a mistake. The setup program will get you Docker from snap (not apt), which <a href="https://stackoverflow.com/questions/52526219/docker-mkdir-read-only-file-system">can‚Äôt work with the whole file system</a>.</li>
</ul>
</li>
<li>
<p>Disable swap:</p>
<ul>
<li><code>swapoff -a</code></li>
<li><code>$EDITOR /etc/fstab</code> # delete the swap line</li>
</ul>
</li>
<li>
<p>Automatically load the corresponding sensors kernel module for the mainboard so that the Prometheus node exporter picks up temperature values and fan speed values:</p>
<ul>
<li><code>echo nct6775 | sudo tee /etc/modules</code></li>
</ul>
</li>
<li>
<p>Enable <a href="https://help.ubuntu.com/community/AutomaticSecurityUpdates">unattended upgrades</a>:</p>
<ul>
<li>
<p><code>dpkg-reconfigure -plow unattended-upgrades</code></p>
</li>
<li>
<p>Edit <code>/etc/apt/apt.conf.d/50unattended-upgrades</code> ‚Äî I like to make the following changes:</p>
<pre tabindex="0"><code>Unattended-Upgrade::MinimalSteps &#34;true&#34;;
Unattended-Upgrade::Mail &#34;michael@example.net&#34;;
Unattended-Upgrade::MailReport &#34;only-on-error&#34;;
Unattended-Upgrade::Automatic-Reboot &#34;true&#34;;
Unattended-Upgrade::Automatic-Reboot-Time &#34;08:00&#34;;
Unattended-Upgrade::SyslogEnable &#34;true&#34;;
</code></pre></li>
</ul>
</li>
</ol>
<h3 id="network">Network</h3>
<h4 id="tailscale-mesh-vpn">Tailscale Mesh VPN</h4>
<p>I have come to like Tailscale. It‚Äôs a mesh VPN (data flows directly between the machines) that allows me access to and from my PCs, servers and storage machines from anywhere.</p>
<p>Specifically, I followed the <a href="https://tailscale.com/download/linux/ubuntu-2204">install Tailscale on Ubuntu 22.04 guide</a>.</p>
<h4 id="prometheus-node-exporter">Prometheus Node Exporter</h4>
<p>For monitoring, I have an existing Prometheus setup. To add a new machine to my setup, I need to configure it as a new target on my Prometheus server. In addition, I need to set up Prometheus on the new machine.</p>
<p>First, I installed the Prometheus node exporter using <code>apt install prometheus-node-exporter</code>.</p>
<p>Then, I modified <code>/etc/default/prometheus-node-exporter</code> to only listen on the Tailscale IP address:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#bb60d5">ARGS</span><span style="color:#666">=</span><span style="color:#4070a0">&#34;--web.listen-address=100.85.3.16:9100&#34;</span>
</span></span></code></pre></div><p>Lastly, I added a systemd override to ensure the node exporter keeps trying to start until tailscale is up: the command <code>systemctl edit prometheus-node-exporter</code> opens an editor, and I configured the override like so:</p>
<pre tabindex="0"><code># /etc/systemd/system/prometheus-node-exporter.service.d/override.conf
[Unit]
# Allow infinite restarts, even within a short time.
StartLimitIntervalSec=0

[Service]
RestartSec=1
</code></pre><h4 id="static-ipv6-address">Static IPv6 address</h4>
<p>Similar to the static IPv4 address, I like to give my NAS a static IPv6 address as well. This way, I don‚Äôt need to reconfigure remote systems when I (sometimes temporarily) switch my NAS to a different network card with a different MAC address. Of course, this point becomes moot if I ever switch all my backups to Tailscale.</p>
<p>Ubuntu Server comes with Netplan by default, but I don‚Äôt know Netplan and don‚Äôt want to use it.</p>
<p>To switch to <code>systemd-networkd</code>, I ran:</p>
<pre tabindex="0"><code>apt remove --purge netplan.io
systemctl enable --now systemd-networkd
</code></pre><p>Then, I created a <code>systemd-networkd</code> config file with a static IPv6 token, resulting in a predictable IPv6 address:</p>
<pre tabindex="0"><code>$EDITOR /etc/systemd/network/enp.network
</code></pre><p>My config file looks like this:</p>
<pre tabindex="0"><code>[Match]
Name=enp*

[Network]
DHCP=yes
IPv6Token=0:0:0:0:10::253
IPv6AcceptRouterAdvertisements=yes
</code></pre><h4 id="ipv6-firewall-setup">IPv6 firewall setup</h4>
<p>An easy way to configure Linux‚Äôs <code>netfilter</code> firewall is to <code>apt install iptables-persistent</code>. That package takes care of saving firewall rules on shutdown and restoring them on the next system boot.</p>
<p>My rule setup is very simple: allow ICMP (IPv6 needs it), then set up <code>ACCEPT</code> rules for the traffic I expect, and <code>DROP</code> the rest.</p>
<p>Here‚Äôs my resulting <code>/etc/iptables/rules.v6</code> from such a setup:</p>
<details>
<summary>
<code>/etc/iptables/rules.v6</code>
</summary>
<pre tabindex="0"><code># Generated by ip6tables-save v1.4.14 on Fri Aug 26 19:57:51 2016
*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -p ipv6-icmp -m comment --comment &#34;IPv6 needs ICMPv6 to work&#34; -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -m comment --comment &#34;Allow packets for outgoing connections&#34; -j ACCEPT
-A INPUT -s fe80::/10 -d fe80::/10 -m comment --comment &#34;Allow link-local traffic&#34; -j ACCEPT
-A INPUT -s 2001:db8::/64 -m comment --comment &#34;local traffic&#34; -j ACCEPT
-A INPUT -p tcp -m tcp --dport 22 -m comment --comment &#34;SSH&#34; -j ACCEPT
COMMIT
# Completed on Fri Aug 26 19:57:51 2016
</code></pre></details>
<h3 id="encrypted-zfs">Encrypted ZFS</h3>
<p>Before you can use ZFS, you need to install the ZFS tools using <code>apt install zfsutils-linux</code>.</p>
<p>Then, we create a zpool that spans both SSDs:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>zpool create <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -o <span style="color:#bb60d5">ashift</span><span style="color:#666">=</span><span style="color:#40a070">12</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  srv <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  /dev/disk/by-id/ata-Samsung_SSD_870_QVO_8TB_S5SSNF0TC06121Z <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  /dev/disk/by-id/ata-Samsung_SSD_870_QVO_8TB_S5SSNF0TC06787P
</span></span></code></pre></div><p>The <code>-o ashift=12</code> ensures <a href="https://wiki.archlinux.org/title/ZFS#Advanced_Format_disks">proper alignment</a> on disks with a sector size of either 512B or 4KB.</p>
<p>On that zpool, we now create our datasets:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#666">(</span><span style="color:#007020">echo</span> -n on-device-secret <span style="color:#666">&amp;&amp;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span> wget -qO - https://autounlock.zekjur.net:8443/nascrypto<span style="color:#666">)</span> | zfs create <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -o <span style="color:#bb60d5">encryption</span><span style="color:#666">=</span>on <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -o <span style="color:#bb60d5">compression</span><span style="color:#666">=</span>off <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -o <span style="color:#bb60d5">atime</span><span style="color:#666">=</span>off <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -o <span style="color:#bb60d5">keyformat</span><span style="color:#666">=</span>passphrase <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  -o <span style="color:#bb60d5">keylocation</span><span style="color:#666">=</span>file:///dev/stdin <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  srv/data
</span></span></code></pre></div><p>The key I‚Äôm piping into <code>zfs create</code> is constructed from two halves: the on-device secret and the remote secret, which is a setup I‚Äôm using to implement an automated crypto unlock that is remotely revokable. See the next section for the corresponding <code>unlock.service</code>.</p>
<p>I repeated this same command (adjusting the dataset name) for each dataset: I currently have one for <code>data</code> and one for <code>backup</code>, just so that the used disk space of each major use case is separately visible:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>df -h /srv /srv/backup /srv/data   
</span></span><span style="display:flex;"><span>Filesystem      Size  Used Avail Use% Mounted on
</span></span><span style="display:flex;"><span>srv             4,2T  128K  4,2T   1% /srv
</span></span><span style="display:flex;"><span>srv/backup      8,1T  3,9T  4,2T  49% /srv/backup
</span></span><span style="display:flex;"><span>srv/data         11T  6,4T  4,2T  61% /srv/data
</span></span></code></pre></div><h4 id="zfs-maintenance">ZFS maintenance</h4>
<p>To detect errors on your disks, ZFS has a feature called ‚Äúscrubbing‚Äù. I don‚Äôt think I need to scrub more often than monthly, but <a href="https://wiki.archlinux.org/title/ZFS#Scrubbing">maybe your scrubbing requirements are different</a>.</p>
<p>I enabled monthly scrubbing on my zpool <code>srv</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>systemctl <span style="color:#007020">enable</span> --now zfs-scrub-monthly@srv.timer
</span></span></code></pre></div><p>On this machine, a scrub takes a little over 4 hours and keeps the disks busy:</p>
<pre tabindex="0"><code>  scan: scrub in progress since Wed Oct 11 16:32:05 2023
	808G scanned at 909M/s, 735G issued at 827M/s, 10.2T total
	0B repaired, 7.01% done, 03:21:02 to go
</code></pre><p>We can confirm by looking at the Prometheus Node Exporter metrics:</p>















<a href="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-11-grafana-scrub.png"><img
  srcset="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-11-grafana-scrub_huab242c6c68f4e18b70199053338a4d4f_420340_1200x0_resize_box_3.png 2x,https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-11-grafana-scrub_huab242c6c68f4e18b70199053338a4d4f_420340_1800x0_resize_box_3.png 3x"
  src="https://michael.stapelberg.ch/posts/2023-10-25-my-all-flash-zfs-network-storage-build/2023-10-11-grafana-scrub_huab242c6c68f4e18b70199053338a4d4f_420340_600x0_resize_box_3.png"
  alt="screenshot of a Grafana dashboard showing Prometheus Node Exporter metrics" title="screenshot of a Grafana dashboard showing Prometheus Node Exporter metrics"
  width="600"
  height="226"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>The other maintenance-related setting I changed is to enable automated TRIM:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>zpool <span style="color:#007020">set</span> <span style="color:#bb60d5">autotrim</span><span style="color:#666">=</span>on srv
</span></span></code></pre></div><h4 id="auto-crypto-unlock">Auto Crypto Unlock</h4>
<p>To automatically unlock the encrypted datasets at boot, I‚Äôm using a custom <code>unlock.service</code> systemd service file.</p>
<p>My <code>unlock.service</code> constructs the crypto key from two halves: the on-device secret and the remote secret that‚Äôs downloaded over HTTPS.</p>
<p>This way, my NAS can boot up automatically, but in an emergency I can remotely stop this mechanism.</p>
<details>
<summary>
My unlock.service
</summary>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Description</span><span style="color:#666">=</span><span style="color:#4070a0">unlock hard drive</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Wants</span><span style="color:#666">=</span><span style="color:#4070a0">network.target</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">After</span><span style="color:#666">=</span><span style="color:#4070a0">systemd-networkd-wait-online.service</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Before</span><span style="color:#666">=</span><span style="color:#4070a0">samba.service</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Type</span><span style="color:#666">=</span><span style="color:#4070a0">oneshot</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">RemainAfterExit</span><span style="color:#666">=</span><span style="color:#4070a0">yes</span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Wait until the host is actually reachable.</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/bin/sh -c &#34;c=0; while [ $c -lt 5 ]; do /bin/ping6 -n -c 1 autounlock.zekjur.net &amp;&amp; break; c=$((c+1)); sleep 1; done&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/bin/sh -c &#34;(echo -n secret &amp;&amp; wget --retry-connrefused -qO - https://autounlock.zekjur.net:8443/nascrypto) | zfs load-key srv/data&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/bin/sh -c &#34;(echo -n secret &amp;&amp; wget --retry-connrefused -qO - https://autounlock.zekjur.net:8443/nascrypto) | zfs load-key srv/backup&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/bin/sh -c &#34;zfs mount srv/data&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/bin/sh -c &#34;zfs mount srv/backup&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">WantedBy</span><span style="color:#666">=</span><span style="color:#4070a0">multi-user.target</span>
</span></span></code></pre></div></details>
<h3 id="backup">Backup</h3>
<p>For the last 10 years, I have been doing my backups using <code>rsync</code>.</p>
<p>Each machine pushes an incremental backup of its entire root file system (and any mounted file systems that should be backed up, too) to the backup destination (storage2/3).</p>
<p>All the machines I‚Äôm backing up run Linux and the <code>ext4</code> file system. I verified that my backup destination file systems support all the features of the backup source file system that I care about, i.e. extended attributes and POSIX ACLs.</p>
<p>The scheduling of backups is done by ‚Äú<a href="https://github.com/stapelberg/zkj-nas-tools/tree/master/dornroeschen">dornr√∂schen</a>‚Äù, a Go program that wakes up the backup sources and destination machines and starts the backup by triggering a command via SSH.</p>
<h4 id="ssh-configuration">SSH configuration</h4>
<p>The backup scheduler establishes an SSH connection to the backup source.</p>
<p>On the backup source, I authorized the scheduler like so, meaning it will run <a href="https://github.com/stapelberg/zkj-nas-tools/blob/master/dornroeschen/backup-remote.pl"><code>/root/backup.pl</code></a> when connecting:</p>
<pre tabindex="0"><code>command=&#34;/root/backup.pl&#34;,no-port-forwarding,no-X11-forwarding ssh-ed25519 AAAAC3Nzainvalidkey backup-scheduler
</code></pre><p>backup.pl runs <code>rsync</code>, which establishes another SSH connection, this time from the backup source to the backup destination.</p>
<p>On the backup destination (storage2/3), I authorize the backup source‚Äôs SSH public key to run <a href="https://manpages.debian.org/rrsync.1"><code>rrsync(1)</code></a>
, a script that only permits running <code>rsync</code> in the specified directory:</p>
<pre tabindex="0"><code>command=&#34;/usr/bin/rrsync /srv/backup/server.zekjur.net&#34;,no-port-forwarding,no-X11-forwarding ssh-ed25519 AAAAC3Nzainvalidkey server.zekjur.net
</code></pre><h4 id="signaling-readiness-after-wake-up">Signaling Readiness after Wake-Up</h4>
<p>I found it easiest to signal readiness by starting an empty HTTP server gated on <code>After=unlock.service</code> in systemd:</p>
<details>
<summary><code>/etc/systemd/system/healthz.service</code></summary>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Description</span><span style="color:#666">=</span><span style="color:#4070a0">nginx for /srv health check</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Wants</span><span style="color:#666">=</span><span style="color:#4070a0">network.target</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">After</span><span style="color:#666">=</span><span style="color:#4070a0">unlock.service</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Requires</span><span style="color:#666">=</span><span style="color:#4070a0">unlock.service</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">StartLimitInterval</span><span style="color:#666">=</span><span style="color:#4070a0">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Restart</span><span style="color:#666">=</span><span style="color:#4070a0">always</span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># https://itectec.com/unixlinux/restarting-systemd-service-on-dependency-failure/</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">/bin/sh -c &#39;systemctl is-active docker.service&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Stay on the same major version in the hope that nginx never decides to break</span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># the config file syntax (or features) without doing a major version bump.</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">/usr/bin/docker pull nginx:1</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">-/usr/bin/docker kill nginx-healthz</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">-/usr/bin/docker rm -f nginx-healthz</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/usr/bin/docker run </span>\
</span></span><span style="display:flex;"><span><span style="color:#4070a0">  --name nginx-healthz </span>\
</span></span><span style="display:flex;"><span><span style="color:#4070a0">  --publish 10.0.0.253:8200:80 </span>\
</span></span><span style="display:flex;"><span><span style="color:#4070a0">  --log-driver=journald </span>\
</span></span><span style="display:flex;"><span><span style="color:#4070a0">nginx:1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">WantedBy</span><span style="color:#666">=</span><span style="color:#4070a0">multi-user.target</span>
</span></span></code></pre></div></details>
<p>My <a href="https://github.com/stapelberg/zkj-nas-tools/blob/master/wake/wake.go"><code>wake</code></a> program then polls that port and returns once the server is up, i.e. the file system has been unlocked and mounted.</p>
<h4 id="auto-shutdown">Auto Shutdown</h4>
<p>Instead of explicitly triggering a shutdown from the scheduler program, I run ‚Äúdramaqueen‚Äù, which shuts down the machine after 10 minutes, but will be inhibited while a backup is running. Optionally, shutting down can be inhibited while there are active samba sessions.</p>
<details>
<summary><code>/etc/systemd/system/dramaqueen.service</code></summary>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-systemd" data-lang="systemd"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Unit]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Description</span><span style="color:#666">=</span><span style="color:#4070a0">dramaqueen</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">After</span><span style="color:#666">=</span><span style="color:#4070a0">docker.service</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Requires</span><span style="color:#666">=</span><span style="color:#4070a0">docker.service</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Service]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">Restart</span><span style="color:#666">=</span><span style="color:#4070a0">always</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">StartLimitInterval</span><span style="color:#666">=</span><span style="color:#4070a0">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># Always pull the latest version (bleeding edge).</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">-/usr/bin/docker pull stapelberg/dramaqueen</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">-/usr/bin/docker rm -f dramaqueen</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">/usr/bin/docker create --name dramaqueen stapelberg/dramaqueen</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">/usr/bin/docker cp dramaqueen:/usr/bin/dramaqueen /tmp/</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStartPre</span><span style="color:#666">=</span><span style="color:#4070a0">/usr/bin/docker rm -f dramaqueen</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">ExecStart</span><span style="color:#666">=</span><span style="color:#4070a0">/tmp/dramaqueen -net_command=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">[Install]</span>
</span></span><span style="display:flex;"><span><span style="color:#4070a0">WantedBy</span><span style="color:#666">=</span><span style="color:#4070a0">multi-user.target</span>
</span></span></code></pre></div></details>
<h4 id="enabling-wake-on-lan">Enabling Wake-on-LAN</h4>
<p>Luckily, the network driver of the onboard network card supports WOL by
default. If that‚Äôs not the case for your network card, see <a href="https://wiki.archlinux.org/title/Wake-on-LAN">the Arch wiki
Wake-on-LAN article</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I have been running a PC-based few-large-disk Network Storage setup for years at this point, and I am very happy with all the properties of the system. I expect to run a very similar setup for years to come.</p>
<p>The low-tech approach to backups of using rsync has worked well ‚Äî without changes ‚Äî for years, and I don‚Äôt see rsync going away anytime soon.</p>
<p>The upgrade to all-flash is really nice in terms of random access time (for incremental backups) and to eliminate one of the largest sources of noise from my builds.</p>
<p>ZFS seems to work fine so far and is well-integrated into Ubuntu Server.</p>
<h4 id="related-options">Related Options</h4>
<p>There are solutions for almost everyone‚Äôs NAS needs. This build obviously hits my personal sweet spot, but your needs and preferences might be different!</p>
<p>Here are a couple of related solutions:</p>
<ul>
<li>If you would like a more integrated solution, you could take a look at <a href="https://www.heise.de/ratgeber/Einplatinencomputer-Odroid-H3-als-NAS-und-Heimserver-einrichten-7496088.html">the Odroid H3 (Celeron)</a>.</li>
<li>If you‚Äôre okay with less compute power, but want more power efficiency, you could use an ARM64-based Single Board Computer.</li>
<li>If you want to buy a commercial solution, buy a device from qnap and fill it with SSD disks.
<ul>
<li>There are even commercial M.2 flash storage devices like the <a href="https://www.jeffgeerling.com/blog/2023/first-look-asustors-new-12-bay-all-m2-nvme-ssd-nas">ASUSTOR Flashstor</a> becoming available! If not for the ‚Äúoff the shelf hardware‚Äù goal of my build, this would probably be the most interesting commercial alternative to me.</li>
</ul>
</li>
<li>If you want more compute power, consider a Thin Client (perhaps used) instead of a Single Board Computer.
<ul>
<li><a href="https://www.servethehome.com/">ServeTheHome</a> has a nice series called Project TinyMiniMicro (<a href="https://www.servethehome.com/introducing-project-tinyminimicro-home-lab-revolution/">introduction</a>, <a href="https://www.servethehome.com/tag/tinyminimicro/">blog posts</a>)</li>
<li>If you‚Äôre a heise+ subscriber, <a href="https://www.heise.de/ratgeber/Schlank-guenstig-stromsparend-NAS-mit-Thin-Client-im-Eigenbau-7546763.html">they have a (German) article about building a NAS from a thin client</a>.</li>
</ul>
</li>
<li>Very similar to thin clients is the Intel NUC (‚ÄúNext Unit of Computing‚Äù): <a href="https://www.golem.de/news/nuc-12-pro-test-mini-kraftpakete-fuers-buero-und-mediacenter-2303-172992.html">(German) article comparing different NUC 12 devices</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Can Dell‚Äôs 6K monitor beat their 8K monitor?]]></title>
    <link href="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/"/>
    <id>https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/</id>
    <published>2023-07-03T20:47:00+02:00</published>
    <content type="html"><![CDATA[<p>For the last 10 years, I have been interested in hi-DPI monitors, and recently I
read about an interesting new monitor: <a href="https://www.dell.com/de-ch/shop/dell-ultrasharp-32-6k-monitor-u3224kba/apd/210-bhnx/monitore-und-monitorzubeh%C3%B6r">Dell‚Äôs 32-inch 6K monitor
(U3224KBA)</a>,
a productivity monitor that offers plenty of modern connectivity options like
DisplayPort 2, HDMI 2 and Thunderbolt 4.</p>
<p>My current monitor is a <a href="/posts/2017-12-11-dell-up3218k/">Dell 32-inch 8K monitor
(UP3218K)</a>, which has a brilliant picture, but
a few annoying connectivity limitations and quirks ‚Äî it needs two (!)
DisplayPort cables on a GPU with MST support, meaning that in practice, it only
works with nVidia graphics cards.</p>
<p>I was curious to try out the new 6K monitor to see if it would improve the
following points:</p>
<ul>
<li>Does the 6K monitor work well with most (all?) of my PCs and laptops?</li>
<li>Is 6K resolution enough, or would I miss the 8K resolution?</li>
<li>Is a matte screen the better option compared to the 8K monitor‚Äôs glossy finish?</li>
<li>Do the built-in peripherals work with Linux out of the box?</li>
</ul>
<p>I read <a href="https://www.heise.de/tests/32-Zoll-Display-mit-6K-und-USB-C-Dock-Dell-UltraSharp-U3224KBA-im-Test-9189751.html">a review on
heise+</a>
(also included in their c&rsquo;t magazine), but the review can‚Äôt answer these
subjective questions of mine.</p>
<p>So I ordered one and tried it out!</p>















<a href="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/IMG_2383_featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/IMG_2383_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_1638957_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/IMG_2383_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_1638957_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/IMG_2383_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_1638957_600x0_resize_q75_box.jpg"
  
  width="600"
  height="450"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h2 id="compatibility">Compatibility</h2>
<p>The native resolution of this monitor is 6144x3456 pixels.</p>
<p>To drive that resolution at 60 Hz, about 34 Gbps of data rate is needed.</p>
<p>DisplayPort 1.4a only offers a data rate of 25 Gbps, so your hardware and driver
need to support <a href="https://en.wikipedia.org/wiki/Display_Stream_Compression">Display Stream Compression
(DSC)</a> to reach the
full resolution at 60 Hz. I tried using DisplayPort 2.0, which supports 77 Gbps
of data rate, but the only GPU I have that supports DisplayPort 2 is the Intel
A380, which I could not get to work well with this monitor (see the next
section).</p>
<p>HDMI 2.1 offers 42 Gbps of data rate, but in my setup, the link would still
always use DSC.</p>
<p>Here are the combinations I have successfully tried:</p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Cable</th>
<th>OS / Driver</th>
<th>Resolution</th>
</tr>
</thead>
<tbody>
<tr>
<td>MacBook Air M1</td>
<td>TB 3</td>
<td>macOS 13.4.1</td>
<td>native @ 60 Hz,<br> 8.1Gbps</td>
</tr>
<tr>
<td>GeForce RTX 4070<br>(DisplayPort 1.4a)</td>
<td>mDP-DP</td>
<td>Windows 11 21H2</td>
<td>native @ 60 Hz,<br> 12Gbps DSC</td>
</tr>
<tr>
<td>GeForce RTX 4070</td>
<td>mDP-DP</td>
<td>Linux 6.3<br>nVidia 535.54.03</td>
<td>native @ 60 Hz,<br> 8.1Gbps DSC</td>
</tr>
<tr>
<td>GeForce RTX 4070<br>(HDMI 2.1a)</td>
<td>HDMI</td>
<td>Windows 11 21H2</td>
<td>native @ 60 Hz,<br> 8.1Gbps DSC</td>
</tr>
<tr>
<td>GeForce RTX 4070</td>
<td>HDMI</td>
<td>Linux 6.3<br>nVidia 535.54.03</td>
<td>native @ 60 Hz,<br> 6Gbps 3CH DSC</td>
</tr>
<tr>
<td>GeForce RTX 3060</td>
<td>HDMI</td>
<td>Linux 6.3<br>nVidia 535.54.03</td>
<td>native @ 60 Hz,<br> 6Gbps 3CH DSC</td>
</tr>
<tr>
<td>ThinkPad X1 Extreme</td>
<td>TB 4</td>
<td>Linux 6.3<br>nVidia 535.54.03</td>
<td>native @ 60 Hz,<br> 8.1Gbps DSC</td>
</tr>
</tbody>
</table>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content"><strong>Note:</strong> on the ThinkPad X1 Extreme, I had to <a href="https://docs.fedoraproject.org/en-US/quick-docs/how-to-set-nvidia-as-primary-gpu-on-optimus-based-laptops/">set the nVidia GPU as primary
GPU</a>. When
the nVidia GPU is available, but routed through the Intel GPU, the native
resolution can be configured, but without hardware acceleration applications
like Chrome or Firefox are unusably slow.</div>
  </div>
</aside>

<p>The MacBook Air is the only device in my test that reaches full resolution
without using DSC.</p>
<h2 id="compatibility-issues">Compatibility issues</h2>
<p>Let‚Äôs talk about the combinations that did not work well.</p>
<h3 id="too-old-nvidia-driver--5355403-not-at-native-resolution">Too old nVidia driver (&lt; 535.54.03): not at native resolution</h3>
<p>You need a quite recent version of the nVidia driver, as they <strong>just recently</strong>
<a href="https://github.com/NVIDIA/open-gpu-kernel-modules/discussions/238">shipped support for
DSC</a> at high
resolutions. I successfully used DSC with 535.54.03.</p>
<p>With the ‚Äúolder‚Äù 530.41.03, I could only select 6016x3384 at 60 Hz, which is not
the native resolution of 6144x3456 at 60 Hz.</p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Cable</th>
<th>OS / Driver</th>
<th>Resolution</th>
</tr>
</thead>
<tbody>
<tr>
<td>GeForce RTX 4070<br>(DisplayPort 1.4a)</td>
<td>mDP-DP</td>
<td>Linux 6.3<br>nVidia 530.41.03</td>
<td>native @ 30 Hz only,<br> 6016x3384@60</td>
</tr>
<tr>
<td>GeForce RTX 4070<br>(HDMI 2.1a)</td>
<td>HDMI</td>
<td>Linux 6.3<br>nVidia 530.41.03</td>
<td>native @ 30 Hz only,<br> 6016x3384@60</td>
</tr>
</tbody>
</table>
<h3 id="intel-gpu-no-picture-or-only-4k">Intel GPU: no picture or only 4K?!</h3>
<p>I was so excited when Intel announced that they are entering the graphics card
business. With all the experience and driver support for their integrated
graphics, I hoped for good Linux support.</p>
<p>Unfortunately, the Intel A380 I bought months ago continues to disappoint.</p>
<p>I could not get the 6K monitor to work at any resolution higher than 4K, not
even under Windows. Worse, when connecting the monitor using DisplayPort, I
wouldn‚Äôt get a picture at all (in Linux)!</p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Cable</th>
<th>OS / Driver</th>
<th>Resolution</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASRock Intel A380<br>(DisplayPort 2.0)</td>
<td>mDP-DP</td>
<td>Windows 11 21H2<br>Intel 31.0.101.4502</td>
<td>only 4K @ 60 Hz</td>
</tr>
<tr>
<td>ASRock Intel A380<br>(HDMI 2.0b)</td>
<td>HDMI</td>
<td>Windows 11 21H2<br>Intel 31.0.101.4502</td>
<td>only 4K @ 60 Hz</td>
</tr>
<tr>
<td>ASRock Intel A380<br>(DisplayPort 2.0)</td>
<td>mDP-DP</td>
<td>Linux 6.4</td>
<td>no picture in Xorg!</td>
</tr>
<tr>
<td>ASRock Intel A380<br>(HDMI 2.0b)</td>
<td>HDMI</td>
<td>Linux 6.4</td>
<td>only 4K @ 60 Hz</td>
</tr>
</tbody>
</table>
<h3 id="resume">No picture after resume from suspend-to-RAM</h3>
<p>I suspend my PC to RAM at least once per day, sometimes even more often.</p>
<p>With my current 8K monitor, I have nailed the suspend/wakeup procedure. With the
help of a smart plug, I‚Äôm automatically turning the monitor off (on suspend) and
on (on wakeup). After a couple of seconds of delay, I configure the correct
resolution using <code>xrandr</code>.</p>
<p>I had hoped that the 6K monitor would make any sort of intricate automation
superfluous.</p>
<p>Unfortunately, when I resumed my PC, I noticed that the monitor would not show a
picture at all! I had to log in from my laptop via SSH to change the resolution
with <code>xrandr</code> to 4K, then power the monitor off and on again, then change
resolution back to the native 6K.</p>
<h2 id="scaling">Scaling</h2>
<p>Once you have a physical connection established, how do you configure your
computer? With 6K at 32 inches, you‚Äôll need to enable some kind of scaling in
order to comfortably read text.</p>
<p>This section shows what options Linux and macOS offer.</p>
<h3 id="i3-x11">i3 (X11)</h3>
<p>Just like many other programs on Linux, you configure i3‚Äôs scaling by <a href="https://wiki.archlinux.org/title/HiDPI#X_Resources">setting
the <code>Xft.dpi</code> X
resource</a>. The default is 96
dpi, so to get 200% scaling, set <code>Xft.dpi: 192</code>.</p>
<p>Personally, I found 240% scaling more comfortable, i.e. <code>Xft.dpi: 230</code>.</p>
<p>This corresponds to a logical resolution of 2560x1440 pixels.</p>
<h3 id="gnome-wayland">GNOME (Wayland)</h3>
<p>I figured I‚Äôd also give Wayland a shot, so I ran GNOME in Fedora 38 on my
ThinkPad X1 Extreme.</p>
<p>Here‚Äôs what the settings app shows in its ‚ÄúDisplays‚Äù tab:</p>















<a href="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/Screenshot%20from%202023-07-02%2012-25-57.png"><img
  srcset="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/Screenshot%20from%202023-07-02%2012-25-57_hu2cabb68d8c47fd27ed6a38a3c2c68dd8_125601_1200x0_resize_box_3.png 2x,https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/Screenshot%20from%202023-07-02%2012-25-57_hu2cabb68d8c47fd27ed6a38a3c2c68dd8_125601_1800x0_resize_box_3.png 3x"
  src="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/Screenshot%20from%202023-07-02%2012-25-57_hu2cabb68d8c47fd27ed6a38a3c2c68dd8_125601_600x0_resize_box_3.png"
  
  width="600"
  height="415"
  style="

border: 0;

"
  
  loading="lazy"></a>



<p>I tried <a href="https://www.omglinux.com/how-to-enable-fractional-scaling-fedora/">enabling fractional
scaling</a>, but
then GNOME froze until I disconnected the Dell monitor.</p>
<h3 id="macos">macOS</h3>
<p>When connecting the monitor to my MacBook Air M1 (2020), it defaults to a
logical resolution of 3072x1728, i.e. 200% scaling.</p>















<a href="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/2023-07-02-macOS-displays.png"><img
  srcset="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/2023-07-02-macOS-displays_hubf6579ec96f99144ce4f6a52859f99df_573205_1200x0_resize_box_3.png 2x,https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/2023-07-02-macOS-displays_hubf6579ec96f99144ce4f6a52859f99df_573205_1800x0_resize_box_3.png 3x"
  src="https://michael.stapelberg.ch/posts/2023-07-03-dell-u3224kba-32-inch-6k-monitor/2023-07-02-macOS-displays_hubf6579ec96f99144ce4f6a52859f99df_573205_600x0_resize_box_3.png"
  
  width="600"
  height="617"
  style="

border: 0;

"
  
  loading="lazy"></a>



<p>For comparison, with <a href="https://www.apple.com/studio-display/">Apple‚Äôs (5K) Studio
Display</a>, the default setting is
2560x1440 (200% scaling), or 2880x1620 (‚ÄúMore Space‚Äù, 177% scaling).</p>
<h2 id="observations">Observations</h2>
<h3 id="matte-screen">Matte screen</h3>
<p>I remember the uproar when Lenovo introduced ThinkPads with glossy screens. At
the time, I thought I prefer matte screens, but over the years, I heard that
glossy screens are getting better and better, and consumers typically prefer
them for their better picture quality.</p>
<p>The 8K monitor I‚Äôm using has a glossy screen on which reflections are quite
visible. The MacBook Air‚Äôs screen shows fewer reflections in comparison.</p>
<p>Dell‚Äôs 6K monitor offers me a nice opportunity to see which option I prefer.</p>
<p>Surprisingly, I found that I don‚Äôt like the matte screen better!</p>
<p>It‚Äôs hard to describe, but somehow the picture seems more ‚Äúdull‚Äù, or less bright
(independent of the actual brightness of the monitor), or more toned down. The
colors don‚Äôt pop as much.</p>
<h3 id="philosophical-question-peripherals-powered-on-by-default">Philosophical question: peripherals powered on by default?</h3>
<p>One thing that I did not anticipate beforehand is the difference in how
peripherals are treated when they are built into the monitor vs. when they are
plugged into a USB hub.</p>
<p>I like to have my peripherals off-by-default, with ‚Äúon‚Äù being the exceptional
state. In fact, I leave my microphone disconnected and only plug its USB cable
in when I need it. I also recently realized that I want sound to only be played
on headphones, so I disconnected my normal speakers in favor of my Bluetooth
dongle.</p>
<p>The 6K monitor, on the other hand, has all of its peripherals on-by-default, and
bright red LEDs light up when the speaker or microphone is muted.</p>
<p>This is the opposite of how I want my peripherals to behave, but of course I
understand why Dell developed the monitor with on-by-default peripherals.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Let‚Äôs go back to the questions I started the article with and answer them one by one:</p>
<ol>
<li>
<p>Does the 6K monitor work well with most (all?) of my PCs and laptops?</p>
<p>‚Üí <strong>Answer:</strong> The 6K monitor works a lot better than the 8K monitor, but that‚Äôs a
low bar to clear. I would still call the 6K monitor finicky. Even when you
run a latest-gen GPU with latest drivers, the monitor does not reliably show
a picture after a suspend/resume cycle.</p>
</li>
<li>
<p>Is 6K resolution enough, or would I miss the 8K resolution?</p>
<p>‚Üí <strong>Answer:</strong> I had really hoped that 6K would turn out to be enough, but the
difference to 8K is visible with the bare eye. Just like 200% scaling is a
nice step up from working at 96 dpi, 300% scaling (what I use on 8K) is
another noticeable step up.</p>
</li>
<li>
<p>Is a matte screen the better option compared to the 8K monitor‚Äôs glossy finish?</p>
<p>‚Üí <strong>Answer:</strong> While I don‚Äôt like the reflections in Dell‚Äôs 8K monitor, the
picture quality is undeniably better compared to a matte screen. The 6K
monitor just doesn‚Äôt look as good, and it‚Äôs not just about the difference in
text sharpness.</p>
</li>
<li>
<p>Do the built-in peripherals work with Linux out of the box?</p>
<p>‚Üí <strong>Answer:</strong> Yes, as far as I can tell. The webcam works fine with the
generic <code>uvcvideo</code> USB webcam driver, the microphone and speakers work out of
the box. I have not tested the presence sensor.</p>
</li>
</ol>
<p>So, would I recommend the monitor? Depends on what you‚Äôre using as your current
monitor and as the device you want to connect!</p>
<p>If you‚Äôre coming from a 4K display, the 6K resolution will be a nice step
up. Connecting a MacBook Air M1 or newer is a great experience. If you want to
connect PCs, be sure to use a new-enough nVidia GPU with latest drivers. Even
under these ideal conditions, you might run into quirks like the <a href="#resume">no picture
after resume</a> problem. If you don‚Äôt mind early adopter pains like that,
and are looking for a monitor that includes peripherals, go for it!</p>
<p>For me, switching from my 8K monitor would be a downgrade without enough
benefits.</p>
<p>The ideal monitor for me would be a mixture between Dell‚Äôs 8K and 6K models:</p>
<ul>
<li>8K resolution
<ul>
<li>‚Ä¶but with more modern connectivity options (one cable! works out of the box!).</li>
</ul>
</li>
<li>without built-in peripherals like webcam, microphone and speaker
<ul>
<li>‚Ä¶but with the USB KVM switch concept (monitor input coupled to USB upstream).</li>
</ul>
</li>
<li>glossy finish for best picture quality
<ul>
<li>‚Ä¶but with fewer reflections.</li>
</ul>
</li>
</ul>
<p>Maybe they‚Äôll develop an updated version of the 8K monitor at some point?</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[gokrazy: instance-centric configuration released üéâ]]></title>
    <link href="https://michael.stapelberg.ch/posts/2023-01-15-gokrazy-instance-centric-config/"/>
    <id>https://michael.stapelberg.ch/posts/2023-01-15-gokrazy-instance-centric-config/</id>
    <published>2023-01-15T19:38:00+01:00</published>
    <content type="html"><![CDATA[<p><a href="https://gokrazy.org/">gokrazy</a> is an appliance platform for Go programs: with
just a few commands, you can deploy your Go program(s) on a Raspberry Pi or a
(typically small) PC.</p>
<p>I‚Äôm excited to let you know that gokrazy now comes with a re-designed <code>gok</code>
command line tool and gokrazy instance configuration mechanism!</p>
<h2 id="context-gokrazy-in-a-few-words">Context: gokrazy in a few words</h2>
<img src="gokrazy-logo.png" align="right" width="200" style="margin-left: 1.5em" alt="gokrazy logo">
<p>The traditional way to run Go software on a Raspberry Pi would be to install
Raspbian or some other Linux distribution onto the SD card, copy over your
program(s) and then maintain that installation (do regular updates).</p>
<p>I thought it would be nicer to run my Raspberry Pis such that <strong>only Go
software</strong> is run by the Linux kernel on it, without any traditional Linux
distribution programs like package managers or even the usual <a href="https://en.wikipedia.org/wiki/GNU_Core_Utilities">GNU Core
Utilities</a>.</p>
<p>gokrazy builds Go programs into a read-only SquashFS root file system
image. When that image is started on a Raspberry Pi, a minimal init system
supervises the Go programs, and a DHCP and NTP client configure the IP address
and synchronize the time, respectively. After the first installation, all
subsequent updates can be done over the network, with an A/B partitioning
scheme.</p>
<p>I use gokrazy to, for example:</p>
<ul>
<li>
<p><a href="https://github.com/stapelberg/scan2drive">Scan incoming paper mail into PDF files on Google
Drive</a>.</p>
</li>
<li>
<p>Connect to the internet using <a href="https://router7.org/">router7, my small home internet
router</a> written in Go, running on a <a href="/posts/2021-07-10-linux-25gbit-internet-router-pc-build/">fast router PC
build</a> that handles a
<a href="/posts/2022-04-23-fiber7-25gbit-upgrade/">25 Gbit/s Fiber To The Home
connection</a>.</p>
</li>
<li>
<p><a href="/posts/2021-01-10-mqtt-introduction/">Automate the lights in my home</a>, and
<a href="https://github.com/stapelberg/hmgo">control and monitor the heating</a>.</p>
</li>
<li>
<p>Offer <a href="https://gokrazy.org/packages/tailscale/">Tailscale access</a> to a
Raspberry Pi Zero 2 W in my home network to then send Wake On Lan (WOL)
packets before SSH&rsquo;ing into my normally-suspended computers. See also my post
<a href="/posts/2022-08-27-out-of-band-remote-console/">DIY out-of-band management: remote console server
(2022)</a>.</p>
</li>
</ul>
<h2 id="before-and-after">Before and after</h2>
<p>Previously, the concept of gokrazy instance configuration was only a
convention. Each gokrazy build was created using the <code>gokr-packer</code> CLI tool, and
configured by the packer‚Äôs command-line flags, parameters, config files in
<code>~/.config</code> and per-package config files in the current directory
(e.g. <code>flags/github.com/gokrazy/breakglass/flags.txt</code>).</p>
<p>Now, all gokrazy commands and tools understand the <code>--instance</code> flag (or <code>-i</code>
for short), which determines the directory from which the <a href="https://gokrazy.org/userguide/instance-config/">Instance
Config</a> is read. For a gokrazy
instance named ‚Äúhello‚Äù, the default directory is <code>~/gokrazy/hello</code>, which
contains the <code>config.json</code> file.</p>
<h2 id="example-creating-an-instance-for-a-go-working-copy">Example: creating an instance for a Go working copy</h2>
<p>Let‚Äôs say I have <a href="https://github.com/evcc-io/evcc">the evcc repository</a> cloned
as <code>~/src/evcc</code>. evcc is an electric vehicle charge controller with PV
integration, written in Go.</p>
<p>Now I want to run <code>evcc</code> on my Raspberry Pi using gokrazy. First, I create a new
instance:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>% gok -i evcc new
</span></span><span style="display:flex;"><span>gokrazy instance configuration created in /home/michael/gokrazy/evcc/config.json
</span></span><span style="display:flex;"><span><span style="color:#666">(</span>Use <span style="color:#4070a0">&#39;gok -i evcc edit&#39;</span> to edit the configuration interactively.<span style="color:#666">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Use <span style="color:#4070a0">&#39;gok -i evcc add&#39;</span> to add packages to this instance
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>To deploy this gokrazy instance, see <span style="color:#4070a0">&#39;gok help overwrite&#39;</span>
</span></span></code></pre></div><p>Now let‚Äôs add our working copy of <code>evcc</code> to the instance:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>% gok -i evcc add .
</span></span><span style="display:flex;"><span>2023/01/15 18:55:39 Adding the following package to gokrazy instance <span style="color:#4070a0">&#34;evcc&#34;</span>:
</span></span><span style="display:flex;"><span>  Go package  : github.com/evcc-io/evcc
</span></span><span style="display:flex;"><span>  in Go module: github.com/evcc-io/evcc
</span></span><span style="display:flex;"><span>  in <span style="color:#007020">local</span> dir: /tmp/evcc
</span></span><span style="display:flex;"><span>2023/01/15 18:55:39 Creating gokrazy builddir <span style="color:#007020;font-weight:bold">for</span> package github.com/evcc-io/evcc
</span></span><span style="display:flex;"><span>2023/01/15 18:55:39 Creating go.mod with replace directive
</span></span><span style="display:flex;"><span>go: creating new go.mod: module gokrazy/build/github.com/evcc-io/evcc
</span></span><span style="display:flex;"><span>2023/01/15 18:55:39 Adding package to gokrazy config
</span></span><span style="display:flex;"><span>2023/01/15 18:55:39 All <span style="color:#007020;font-weight:bold">done</span>! Next, use <span style="color:#4070a0">&#39;gok overwrite&#39;</span> <span style="color:#666">(</span>first deployment<span style="color:#666">)</span>, <span style="color:#4070a0">&#39;gok update&#39;</span> <span style="color:#666">(</span>following deployments<span style="color:#666">)</span> or <span style="color:#4070a0">&#39;gok run&#39;</span> <span style="color:#666">(</span>run on running instance temporarily<span style="color:#666">)</span>
</span></span></code></pre></div><p>We might want to monitor this Raspberry Pi‚Äôs stats later, so let‚Äôs add the
Prometheus node exporter to our gokrazy instance, too:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>% gok -i evcc add github.com/prometheus/node_exporter
</span></span><span style="display:flex;"><span>2023/01/15 19:04:05 Adding github.com/prometheus/node_exporter as a <span style="color:#666">(</span>non-local<span style="color:#666">)</span> package to gokrazy instance evcc
</span></span><span style="display:flex;"><span>2023/01/15 19:04:05 Creating gokrazy builddir <span style="color:#007020;font-weight:bold">for</span> package github.com/prometheus/node_exporter
</span></span><span style="display:flex;"><span>2023/01/15 19:04:05 Creating go.mod before calling go get
</span></span><span style="display:flex;"><span>go: creating new go.mod: module gokrazy/build/github.com/prometheus/node_exporter
</span></span><span style="display:flex;"><span>2023/01/15 19:04:05 running <span style="color:#666">[</span>go get github.com/prometheus/node_exporter@latest<span style="color:#666">]</span>
</span></span><span style="display:flex;"><span>go: downloading github.com/prometheus/node_exporter v1.5.0
</span></span><span style="display:flex;"><span><span style="color:#666">[</span>‚Ä¶<span style="color:#666">]</span>
</span></span><span style="display:flex;"><span>2023/01/15 19:04:07 Adding package to gokrazy config
</span></span></code></pre></div><p>It‚Äôs time to insert an SD card (<code>/dev/sdx</code>), which we will overwrite with a
gokrazy build:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>% gok -i evcc overwrite --full /dev/sdx
</span></span></code></pre></div><p>See <a href="https://gokrazy.org/quickstart/">gokrazy quickstart</a> for more detailed instructions.</p>
<h2 id="automation">Automation</h2>
<p>The new <code>gok</code> subcommands (<code>add</code>, <code>update</code>, etc.) are much easier to manage than
long <code>gokr-packer</code> command lines.</p>
<p>The new <a href="https://gokrazy.org/userguide/automation/">Automation page</a> shows how
to automate common tasks, be it daily updates via <code>cron</code>, or automated building
in Continuous Integration environments like GitHub Actions.</p>
<h2 id="migration">Migration</h2>
<p>Are you already a gokrazy user? If so, see <a href="https://gokrazy.org/userguide/migration-guide/">the Instance Config Migration
Guide</a> for how to switch from
the old <code>gokr-packer</code> tool to the new <code>gok</code> command.</p>
<h2 id="feedback--questions">Feedback / Questions?</h2>
<p>If you have any questions, please feel free to reach out at <a href="https://github.com/gokrazy/gokrazy/discussions">gokrazy GitHub
Discussions</a> üëã</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[DIY out-of-band management: remote power button]]></title>
    <link href="https://michael.stapelberg.ch/posts/2022-10-09-remote-power-button/"/>
    <id>https://michael.stapelberg.ch/posts/2022-10-09-remote-power-button/</id>
    <published>2022-10-09T16:27:00+02:00</published>
    <content type="html"><![CDATA[<p>I was pleasantly surprised by how easy it was to make it possible to push a PC‚Äôs
power button remotely via MQTT by wiring up an ESP32 microcontroller, a MOSFET,
a resistor, and a few jumper wires.</p>
<p>While a commercial solution like IPMI offers many more features like remote
serial, or remote image mounting, this DIY solution feels really magical, and
has great price performance if all you need is power management.</p>















<a href="https://michael.stapelberg.ch/posts/2022-10-09-remote-power-button/IMG_1085_featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2022-10-09-remote-power-button/IMG_1085_featured_huf7f7db33074cb268ff172c7a33b2b9a7_1568716_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2022-10-09-remote-power-button/IMG_1085_featured_huf7f7db33074cb268ff172c7a33b2b9a7_1568716_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2022-10-09-remote-power-button/IMG_1085_featured_huf7f7db33074cb268ff172c7a33b2b9a7_1568716_600x0_resize_q75_box.jpg"
  alt="The inside of a PC case, where an ESP32 micro controller on an Adafruit Perma-Proto bread board is mounted inside the case and wired up to the mainboard with jumper wires for remote power control" title="The inside of a PC case, where an ESP32 micro controller on an Adafruit Perma-Proto bread board is mounted inside the case and wired up to the mainboard with jumper wires for remote power control"
  width="600"
  height="450"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<h2 id="motivation">Motivation</h2>
<p>To save power, I want to shut down my <a href="/posts/2019-10-23-nas/">network storage PC</a> when it isn‚Äôt currently needed.</p>
<p>For this plan to work out, my daily backup automation needs to be able to turn on the network storage PC, and power it back off when done.</p>
<p>Usually, I implement that via <a href="https://en.wikipedia.org/wiki/Wake-on-LAN">Wake On LAN
(WOL)</a>. But, for this particular
machine, I don‚Äôt have an ethernet network link, I only <a href="/posts/2020-08-09-fiber-link-home-network/">have a fiber
link</a>. Unfortunately, it seems like
none of the 3 different 10 Gbit/s network cards I tested has functioning Wake On
LAN, and when I asked on Twitter, none of my followers had ever seen functioning
WOL on any 10 Gbit/s card. I suppose it‚Äôs not a priority for the typical target
audience of these network cards, which go into always-on servers.</p>
<p>I didn‚Äôt want to run an extra 10 Gbit/s switch just for WOL over an ethernet
connection, because switches like the MikroTik CRS305-1G-4S+IN consume at least
10W. As the network storage PC only consumes about 20W overall, I wanted a more
power-efficient option.</p>
<h2 id="hardware-and-wiring">Hardware and Wiring</h2>
<p>The core of this DIY remote power button is a WiFi-enabled micro controller such
as the ESP32. To power the micro controller, I use the 5V standby power on the
mainboard‚Äôs USB 2.0 pin headers, which is also available when the PC is turned
off and only the power supply (PSU) is turned on. A micro controller with an
on-board 5V voltage regulator is convenient for this.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">I verified the 5V standby power with a multimeter in DC power measurement
mode. Some embedded machines don‚Äôt have always-on 5V standby power, even if they
use an ATX power supply!</div>
  </div>
</aside>

<p>Aside from the micro controller, we also need a transistor or logic-level MOSFET
to simulate a push of the power button, and a resistor to control the
transistor. An opto coupler is not needed, since the ESP32 is powered from the
mainboard, not from a separate power supply.</p>
<p>The mainboard‚Äôs front panel header contains a <code>POWERBTN#</code> signal (3.3V), and a
<code>GND</code> signal. When connecting a typical PC case power button to the header, you
don‚Äôt need to pay attention to the polarity. This is because the power button
just physically connects the two signals.</p>
<p>In our case, the polarity matters, because we need the 3.3V on the transistor‚Äôs
drain pin, otherwise we won‚Äôt be able to control the transistor via its base
pin. The <code>POWERBTN#</code> 3.3V signal is typically labeled <code>+</code> on the mainboard (or
in the manual), whereas <code>GND</code> is labeled <code>-</code>. If you are unsure, double-check
the voltage using a multimeter.</p>
<h2 id="bill-of-materials">Bill of Materials</h2>
<ul>
<li>WiFi-enabled microcontroller with 5V power input, e.g. the <a href="https://docs.platformio.org/en/latest/boards/espressif32/pico32.html#board-espressif32-pico32">Espressif ESP32
Pico
Kit</a></li>
<li>transistor or logic-level MOSFET for working with 3.3V, e.g. <a href="https://www.digikey.com/en/products/detail/onsemi/2N7000/244278">2N7000
(‚Üídigikey)</a></li>
<li>1K resistor for controlling the transistor,
e.g. <a href="https://www.digikey.com/en/products/detail/stackpole-electronics-inc/CF14JT1K00/1741314">CF14JT1K00</a></li>
<li>a bread board and/or case for mounting, e.g. <a href="https://www.adafruit.com/product/571">Adafruit
Perma-Proto</a>.</li>
</ul>
<h2 id="schematic">Schematic</h2>
<p><a href="2022-10-08-remote-power-button.svg"><img src="2022-10-08-remote-power-button.svg" width="100%"></a></p>
<h2 id="software-esphome">Software: ESPHome</h2>
<p>I wanted a quick solution (with ideally no custom firmware development) and was
already familiar with <a href="https://esphome.io/">ESPHome</a>, which turns out to very
easily implement the functionality I wanted :)</p>
<p>In addition to a standard ESPHome configuration, I have added the following
lines to make the GPIO pin available through MQTT, and make it a momentary
switch instead of a toggle switch, so that it briefly presses the power button
and doesn‚Äôt hold the power button:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#062873;font-weight:bold">switch</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span>- <span style="color:#062873;font-weight:bold">platform</span>:<span style="color:#bbb"> </span>gpio<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">pin</span>:<span style="color:#bbb"> </span><span style="color:#40a070">25</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">id</span>:<span style="color:#bbb"> </span>powerbtn<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">name</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;powerbtn&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">restore_mode</span>:<span style="color:#bbb"> </span>ALWAYS_OFF<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">on_turn_on</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span>- <span style="color:#062873;font-weight:bold">delay</span>:<span style="color:#bbb"> </span>500ms<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span>- <span style="color:#062873;font-weight:bold">switch.turn_off</span>:<span style="color:#bbb"> </span>powerbtn<span style="color:#bbb">
</span></span></span></code></pre></div><p>I have elided the full configuration for brevity, but you can click here to see it:</p>
<details>
<summary>full ESPHome YAML configuration</summary>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#062873;font-weight:bold">esphome</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">name</span>:<span style="color:#bbb"> </span>poweresp<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">esp32</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">board</span>:<span style="color:#bbb"> </span>pico32<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">framework</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">type</span>:<span style="color:#bbb"> </span>arduino<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#60a0b0;font-style:italic"># Enable logging</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">logger</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">mqtt</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">broker</span>:<span style="color:#bbb"> </span><span style="color:#40a070">10.0.0.54</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">ota</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">password</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">wifi</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">ssid</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;essid&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">password</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;secret&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#60a0b0;font-style:italic"># Enable fallback hotspot (captive portal) in case wifi connection fails</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span><span style="color:#062873;font-weight:bold">ap</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">ssid</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;Poweresp Fallback Hotspot&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">password</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;secret2&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">captive_portal</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb"></span><span style="color:#062873;font-weight:bold">switch</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">  </span>- <span style="color:#062873;font-weight:bold">platform</span>:<span style="color:#bbb"> </span>gpio<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">pin</span>:<span style="color:#bbb"> </span><span style="color:#40a070">25</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">id</span>:<span style="color:#bbb"> </span>powerbtn<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">name</span>:<span style="color:#bbb"> </span><span style="color:#4070a0">&#34;powerbtn&#34;</span><span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">restore_mode</span>:<span style="color:#bbb"> </span>ALWAYS_OFF<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span><span style="color:#062873;font-weight:bold">on_turn_on</span>:<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span>- <span style="color:#062873;font-weight:bold">delay</span>:<span style="color:#bbb"> </span>500ms<span style="color:#bbb">
</span></span></span><span style="display:flex;"><span><span style="color:#bbb">    </span>- <span style="color:#062873;font-weight:bold">switch.turn_off</span>:<span style="color:#bbb"> </span>powerbtn<span style="color:#bbb">
</span></span></span></code></pre></div></details>
<p>For the first flash, I used:</p>
<pre tabindex="0"><code>docker run --rm \
  -v &#34;${PWD}&#34;:/config \
  --device=/dev/ttyUSB0 \
  -it \
  esphome/esphome \
    run poweresp.yaml
</code></pre><p>To update over the network after making changes (serial connection no longer needed), I used:</p>
<pre tabindex="0"><code>docker run --rm \
  -v &#34;${PWD}&#34;:/config \
  -it \
  esphome/esphome \
    run poweresp.yaml
</code></pre><p>In case you want to learn more about the relevant ESPHome concepts, here are a
few pointers:</p>
<ul>
<li><a href="https://esphome.io/components/wifi.html">https://esphome.io/components/wifi.html</a> might need to set <code>use_address</code></li>
<li><a href="https://esphome.io/components/switch/index.html">https://esphome.io/components/switch/index.html</a>
<ul>
<li>and <a href="https://esphome.io/components/switch/gpio.html">https://esphome.io/components/switch/gpio.html</a></li>
</ul>
</li>
<li><a href="https://esphome.io/components/mqtt.html">https://esphome.io/components/mqtt.html</a></li>
</ul>
<h2 id="integration-into-automation">Integration into automation</h2>
<p>To push the power button remotely from Go, I‚Äôm using the following code:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#007020;font-weight:bold">func</span> <span style="color:#06287e">pushMainboardPower</span>(mqttBroker, clientID <span style="color:#902000">string</span>) <span style="color:#902000">error</span> {
</span></span><span style="display:flex;"><span>	opts <span style="color:#666">:=</span> mqtt.<span style="color:#06287e">NewClientOptions</span>().<span style="color:#06287e">AddBroker</span>(mqttBroker)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> hostname, err <span style="color:#666">:=</span> os.<span style="color:#06287e">Hostname</span>(); err <span style="color:#666">==</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		clientID <span style="color:#666">+=</span> <span style="color:#4070a0">&#34;@&#34;</span> <span style="color:#666">+</span> hostname
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	opts.<span style="color:#06287e">SetClientID</span>(clientID)
</span></span><span style="display:flex;"><span>	opts.<span style="color:#06287e">SetConnectRetry</span>(<span style="color:#007020;font-weight:bold">true</span>)
</span></span><span style="display:flex;"><span>	mqttClient <span style="color:#666">:=</span> mqtt.<span style="color:#06287e">NewClient</span>(opts)
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> token <span style="color:#666">:=</span> mqttClient.<span style="color:#06287e">Connect</span>(); token.<span style="color:#06287e">Wait</span>() <span style="color:#666">&amp;&amp;</span> token.<span style="color:#06287e">Error</span>() <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;connecting to MQTT: %v&#34;</span>, token.<span style="color:#06287e">Error</span>())
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">const</span> topic = <span style="color:#4070a0">&#34;poweresp/switch/powerbtn/command&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">const</span> qos = <span style="color:#40a070">0</span> <span style="color:#60a0b0;font-style:italic">// at most once (no re-transmissions)
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span>	<span style="color:#007020;font-weight:bold">const</span> retained = <span style="color:#007020;font-weight:bold">false</span>
</span></span><span style="display:flex;"><span>	token <span style="color:#666">:=</span> mqttClient.<span style="color:#06287e">Publish</span>(topic, qos, retained, <span style="color:#007020">string</span>(<span style="color:#4070a0">&#34;on&#34;</span>))
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">if</span> token.<span style="color:#06287e">Wait</span>() <span style="color:#666">&amp;&amp;</span> token.<span style="color:#06287e">Error</span>() <span style="color:#666">!=</span> <span style="color:#007020;font-weight:bold">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#007020;font-weight:bold">return</span> fmt.<span style="color:#06287e">Errorf</span>(<span style="color:#4070a0">&#34;publishing to MQTT: %v&#34;</span>, token.<span style="color:#06287e">Error</span>())
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020;font-weight:bold">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>I hope this small project write-up is useful to others in a similar situation!</p>
<p>If you need more features than that, check out the next step on the feature and
complexity ladder: <a href="https://pikvm.org/">PiKVM</a> or
<a href="https://tinypilotkvm.com/">TinyPilot</a>. See also <a href="https://www.jeffgeerling.com/blog/2021/raspberry-pi-kvms-compared-tinypilot-and-pi-kvm-v3">this comparison by Jeff
Geerling</a>.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[DIY out-of-band management: remote console server]]></title>
    <link href="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/"/>
    <id>https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/</id>
    <published>2022-08-27T14:40:00+02:00</published>
    <content type="html"><![CDATA[<p>For the guest WiFi at an event that eventually fell through, we wanted to tunnel
all the traffic through my internet connection via my home router.</p>
<p>Because the event is located in another country, many hours of travel away,
there are a couple of scenarios where remote control of my home router can be a
life-saver. For example, should my home router crash, remotely turning power off
and on again gets the event back online.</p>
<p>But, power-cycling a machine is a pretty big hammer. For some cases, like
locking yourself out with a configuration mistake, a more precise tool like a
remote serial console might be nicer.</p>
<p>In this article, I‚Äôll present two cheap and pragmatic DIY out-of-band management
solutions that I have experimented with in the last couple of weeks and wanted
to share:</p>
<ul>
<li><a href="#power-only">Variant 1: Remote Power Management only</a></li>
<li><a href="#remote-console">Variant 2: a full Remote Console Server</a></li>
</ul>
<p>You can easily start with the first variant and upgrade it into the second
variant later.</p>
<h2 id="power-only">Variant 1: Remote Power Management</h2>
<h3 id="architecture-diagram">Architecture Diagram</h3>
<p>Here is the architecture of the system at a glance. The right-hand side is the
existing router I want to control, the left-hand side shows the out of band
management system:</p>




<a href="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/2022-07-02-power-mgmt-architecture.svg"><img
  src="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/2022-07-02-power-mgmt-architecture.svg"
  
  style="

border: 1px solid #000;

margin-right: 1rem"
  
  loading="lazy"></a>


<p>Let‚Äôs go through the hardware components from top to bottom.</p>
<h3 id="hardware-4g-wifi-router-out-of-band-network">Hardware: 4G WiFi Router (Out Of Band Network)</h3>
<p>The easiest way to have another network connection for projects like this one is
the <a href="https://www.digitec.ch/en/s1/product/digitec-iot-test-sim-card-data-flat-30-days-unlimited-10-mbits-sim-card-11689214?supplier=406802">digitec iot
subscription</a>. They
offer various different options, and their cheapest one, a 0.4 Mbps flatrate for
4 CHF per month, is sufficient for our use-case.</p>
<p>A convenient way of making the digitec iot subscription available to other
devices is to use a mobile WiFi router such as the <a href="https://www.digitec.ch/en/s1/product/tp-link-m7350-routers-5615329?supplier=406802">TP-Link M7350 4G/LTE Mobile
Wi-Fi
router</a>
(68 CHF). You can power it via USB, and it has a built-in battery that will last
for a few hours.</p>















<a href="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0484.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0484_hu855bbe0a9c47ac557e5b09db74fa3b06_1361683_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0484_hu855bbe0a9c47ac557e5b09db74fa3b06_1361683_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0484_hu855bbe0a9c47ac557e5b09db74fa3b06_1361683_600x0_resize_q75_box.jpg"
  alt="TP-Link M7350 4G/LTE Mobile Wi-Fi router connected to digitec iot" title="TP-Link M7350 4G/LTE Mobile Wi-Fi router connected to digitec iot"
  width="600"
  height="450"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>By default, the device turns itself off after a while when it thinks it is
unused, which is undesired for us ‚Äî if the smart plug drops out of the WiFi, we
don‚Äôt want the whole system to go offline. You can turn off this behavior in the
web interface under <code>Advanced ‚Üí Power Saving ‚Üí Power Saving Mode</code>.</p>
<h3 id="hardware-wifi-smart-plug">Hardware: WiFi Smart Plug</h3>
<p>With the out of band network connection established, all you need to remotely
toggle power is a smart plug such as the <a href="https://itead.cc/product/sonoff-s26-wifi-smart-plug/">Sonoff S26 WiFi Smart
Plug</a>.</p>
<p>The simplest setup is to connect the Smart Plug to the 4G router via WiFi, and
control it using Sonoff‚Äôs mobile app via Sonoff‚Äôs cloud.</p>
<h4 id="non-cloud-solution">Non-cloud solution</h4>
<p>Alternatively, if you want to avoid the Sonoff cloud, the device comes with a
‚ÄúDIY mode‚Äù, but <a href="https://twitter.com/zekjur/status/1321949087160258562">the DIY mode wouldn‚Äôt work reliably for
me</a> when I tried
it. Instead, I flashed the <a href="https://tasmota.github.io/docs/">Open Source Tasmota
firmware</a> and connected it to a self-hosted
MQTT server via the internet.</p>
<p>Of course, now your self-hosted MQTT server is a single point of failure, but
perhaps you prefer that over the Sonoff cloud being a single point of failure.</p>
<h2 id="remote-console">Variant 2: Remote Console Server</h2>
<p>Turning power off and on remotely is a great start, but what if you need actual
remote access to a system? In my case, I‚Äôm using a <a href="https://en.wikipedia.org/wiki/Serial_port">serial
port</a> to see log messages and run a
shell on my router. This is also called a ‚Äúserial console‚Äù, and any device that
allows accessing a serial console without sitting physically in front of the
serial port is called a ‚Äúremote console server‚Äù.</p>
<p>Commercially available remote console servers typically offer lots of ports (up
to 48) and cost lots of money (many thousand dollars or equivalent), because
their target application is to be installed in a rack full of machines in a lab
or data center. A few years ago, I built
<a href="https://freetserv.github.io/">freetserv</a>, an open source, open hardware
solution for this problem.</p>
<p>For the use-case at hand, we only need a single serial console, so we‚Äôll do it
with a Raspberry Pi.</p>
<h3 id="architecture-diagram-1">Architecture Diagram</h3>
<p>The architecture for this variant looks similar to the other variant, but adds
the <em>consrv</em> Raspberry Pi Zero 2 W and a USB-to-serial adapter:</p>




<a href="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/2022-06-19-consrv_architecture.svg"><img
  src="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/2022-06-19-consrv_architecture.svg"
  
  style="

border: 1px solid #000;

margin-right: 1rem"
  
  loading="lazy"></a>


<h3 id="hardware-raspberry-pi-zero-2-w">Hardware: Raspberry Pi Zero 2 W</h3>
<p>We‚Äôll use a <a href="https://www.raspberrypi.com/products/raspberry-pi-zero-2-w/">Raspberry Pi Zero 2
W</a> as our console
server. While the device is a little slower than a Raspberry Pi 3 B, it is still
plenty fast enough for providing a serial console, and it only consumes 0.8W of
power (see <a href="https://gokrazy.org/platforms/">gokrazy ‚Üí Supported platforms</a> for
a comparison):</p>















<a href="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0767_featured.jpg"><img
  srcset="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0767_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_860347_1200x0_resize_q75_box.jpg 2x,https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0767_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_860347_1800x0_resize_q75_box.jpg 3x"
  src="https://michael.stapelberg.ch/posts/2022-08-27-out-of-band-remote-console/IMG_0767_featured_hu855bbe0a9c47ac557e5b09db74fa3b06_860347_600x0_resize_q75_box.jpg"
  alt="Raspberry Pi Zero 2 W with USB hub, ethernet and serial" title="Raspberry Pi Zero 2 W with USB hub, ethernet and serial"
  width="600"
  height="600"
  style="

border: 1px solid #000;

"
  
  loading="lazy"></a>



<p>If the Pi Zero 2 W is not available, you can try using any other <a href="https://gokrazy.org/platforms/">Raspberry Pi
supported by gokrazy</a>, or even an older Pi Zero
with the <a href="https://gokrazy.org/platforms/#community-supported-raspberry-pi-os-32-bit-kernelfirmware">community-supported Pi OS 32-bit
kernel</a>
(I didn‚Äôt test that).</p>
<p>Our Pi will have at least two tasks:</p>
<ol>
<li>With a USB-to-serial adapter, the Pi will provide a serial console.</li>
<li>The Pi will run <a href="https://tailscale.com/">Tailscale</a> mesh networking, which
will transparently use either the wired network or fail over to the Out Of
Band network. Tailscale also frees us from setting up port forwardings,
dynamic DNS or anything like that.</li>
<li>Optionally, the Pi can run a local MQTT server if you want to avoid the
Sonoff cloud.</li>
</ol>
<h3 id="hardware-usb-to-serial-adapter">Hardware: USB-to-serial adapter</h3>
<p>You can use any USB-to-serial adapter supported by Linux. Personally, I like the
<a href="https://www.adafruit.com/product/2264">Adafruit FT232H adapter</a>, which I like
to <a href="https://twitter.com/zekjur/status/1256879027266224128">re-program with FTDI‚Äôs FT_Prog so that it has a unique serial
number</a>.</p>
<p>In my router, I plugged in an <a href="https://twitter.com/zekjur/status/1443461234930634755">Longshine LCS-6321M serial PCIe
card</a> to add a serial
port. Before you ask: no, <a href="https://twitter.com/zekjur/status/1439612800561819649">using USB serial consoles for the kernel
console</a> does not cut it.</p>
<h3 id="hardware-usb-ethernet-adapter">Hardware: USB ethernet adapter</h3>
<p>Because we not only want this Raspberry Pi to be available via the Out Of Band
network (via WiFi), but also on the regular home network, we need a USB ethernet
adapter.</p>
<p>Originally I was going to use the Waveshare ETH-USB-HUB-BOX: Ethernet / USB HUB
BOX for Raspberry Pi Zero Series, but it <a href="https://twitter.com/zekjur/status/1538582804224782337">turned out to be
unreliable</a>.</p>
<p>Instead, I‚Äôm now connecting a USB hub (as the Pi Zero 2 W has only one USB
port), a <a href="https://www.linksys.com/support-product?sku=USB3GIG">Linksys USB3GIG</a>
network adapter I had lying around, and my USB-to-serial adapter.</p>
<h3 id="gokrazy-setup">gokrazy setup</h3>
<p>Just like in the <a href="https://gokrazy.org/quickstart/">gokrazy quickstart</a>, we‚Äôre
going to create a directory for this gokrazy instance:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#bb60d5">INSTANCE</span><span style="color:#666">=</span>gokrazy/consrv
</span></span><span style="display:flex;"><span>mkdir -p ~/<span style="color:#70a0d0">${</span><span style="color:#bb60d5">INSTANCE</span>?<span style="color:#70a0d0">}</span>
</span></span><span style="display:flex;"><span><span style="color:#007020">cd</span> ~/<span style="color:#70a0d0">${</span><span style="color:#bb60d5">INSTANCE</span>?<span style="color:#70a0d0">}</span>
</span></span><span style="display:flex;"><span>go mod init consrv
</span></span></code></pre></div><p>You could now directly run <code>gokr-packer</code>, but personally, I like putting the
<code>gokr-packer</code> command into a
<a href="https://en.wikipedia.org/wiki/Make_(software)#Makefile"><code>Makefile</code></a> right away:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-makefile" data-lang="makefile"><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># The consrv hostname resolves to the device‚Äôs Tailscale IP address,
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"># once Tailscale is set up.
</span></span></span><span style="display:flex;"><span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#bb60d5">PACKER</span> <span style="color:#666">:=</span> gokr-packer -hostname<span style="color:#666">=</span>consrv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#bb60d5">PKGS</span> <span style="color:#666">:=</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/breakglass <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/timestamps <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/serial-busybox <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/stat/cmd/gokr-webstat <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/stat/cmd/gokr-stat <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/mkfs <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/gokrazy/wifi <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	tailscale.com/cmd/tailscaled <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	tailscale.com/cmd/tailscale <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>	github.com/mdlayher/consrv/cmd/consrv
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#06287e">all</span><span style="color:#666">:</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#06287e">.PHONY</span><span style="color:#666">:</span> update overwrite
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#06287e">update</span><span style="color:#666">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#70a0d0">${</span><span style="color:#bb60d5">PACKER</span><span style="color:#70a0d0">}</span> -update<span style="color:#666">=</span>yes <span style="color:#70a0d0">${</span><span style="color:#bb60d5">PKGS</span><span style="color:#70a0d0">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#06287e">overwrite</span><span style="color:#666">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#70a0d0">${</span><span style="color:#bb60d5">PACKER</span><span style="color:#70a0d0">}</span> -overwrite<span style="color:#666">=</span>/dev/sdx <span style="color:#70a0d0">${</span><span style="color:#bb60d5">PKGS</span><span style="color:#70a0d0">}</span>
</span></span></code></pre></div><p>For the initial install, plug the SD card into your computer, put its device
name into the <code>overwrite</code> target, and run <code>make overwrite</code>.</p>
<p>For subsequent changes, you can use <code>make update</code>.</p>
<h3 id="tailscale">Tailscale</h3>
<p>Tailscale is a peer-to-peer mesh VPN, meaning we can use it to connect to our
<code>consrv</code> Raspberry Pi from anywhere in the world, without having to set up port
forwardings, dynamic DNS, or similar.</p>
<p>As an added bonus, Tailscale also transparently fails over between connections,
so while the fast ethernet/fiber connection works, Tailscale uses that,
otherwise it uses the Out Of Band network.</p>
<p>Follow <a href="https://gokrazy.org/packages/tailscale/">the gokrazy guide on Tailscale</a>
to include the device in your Tailscale mesh VPN.</p>
<h3 id="wifi-internet-connection-and-dual-homing">WiFi internet connection and dual homing</h3>
<p>Setup WiFi:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir -p extrafiles/github.com/gokrazy/wifi/etc
</span></span><span style="display:flex;"><span>cat <span style="color:#4070a0">&#39;{&#34;ssid&#34;: &#34;oob&#34;, &#34;psk&#34;: &#34;secret&#34;}&#39;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  &gt; extrafiles/github.com/gokrazy/wifi/etc/wifi.json
</span></span></code></pre></div><p><code>consrv</code> should use the Out Of Band mobile uplink to reach the internet. At the
same time, it should still be usable from my home network, too, to make gokrazy
updates go quickly.</p>
<p>We accomplish this using route priorities.</p>
<p>I arranged for the WiFi interface to have higher route priority (5) than the
ethernet interface (typically 1, but 11 in our setup thanks to the
<code>-extra_route_priority=10</code> flag):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir -p flags/github.com/gokrazy/gokrazy/cmd/dhcp
</span></span><span style="display:flex;"><span><span style="color:#007020">echo</span> <span style="color:#4070a0">&#39;-extra_route_priority=10&#39;</span> <span style="color:#4070a0;font-weight:bold">\
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0;font-weight:bold"></span>  &gt; flags/github.com/gokrazy/gokrazy/cmd/dhcp/flags.txt
</span></span><span style="display:flex;"><span>make update
</span></span></code></pre></div><p>Now, <code>tailscale netcheck</code> shows an IPv4 address belonging to Sunrise, the mobile
network provider behind the digitec iot subscription.</p>
<h3 id="the-consrv-console-server">The consrv Console Server</h3>
<p><a href="https://github.com/mdlayher/consrv"><code>consrv</code></a> is an SSH serial console server
written in Go that Matt Layher and I developed. If you‚Äôre curious, you can watch
the two of us creating it in this twitch stream recording:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube-nocookie.com/embed/1g46ei9aBH0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>The installation of <code>consrv</code> consists of two steps.</p>
<p>Step 1 is done: we already included <code>consrv</code> in the <code>Makefile</code> earlier in
<a href="#gokrazy-setup">gokrazy setup</a>.</p>
<p>So, we only need to configure the desired serial ports in <code>consrv.toml</code> (in
<a href="https://gokrazy.org/userguide/package-config/#extrafiles">gokrazy extrafiles</a>):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>mkdir -p extrafiles/github.com/mdlayher/consrv/cmd/consrv/etc/consrv
</span></span><span style="display:flex;"><span>cat &gt; extrafiles/github.com/mdlayher/consrv/cmd/consrv/etc/consrv/consrv.toml <span style="color:#4070a0">&lt;&lt;&#39;EOT&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">[server]
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">address = &#34;:2222&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">[[devices]]
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">serial = &#34;01716A92&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">name = &#34;router7&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">baud = 115200
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">logtostdout = true
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">[[identities]]
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">name = &#34;michael&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">public_key = &#34;ssh-ed25519 AAAAC3‚Ä¶ michael@midna&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#4070a0">EOT</span>
</span></span></code></pre></div><p>Run <code>make update</code> to deploy the configuration to your device.</p>
<p>If everything is set up correctly, we can now start a serial console session via
SSH:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>midna% ssh -p 2222 router7@consrv.lan
</span></span><span style="display:flex;"><span>Warning: Permanently added &#39;[consrv.lan]:2222&#39; (ED25519) to the list of known hosts.
</span></span><span style="display:flex;"><span>consrv&gt; opened serial connection &#34;router7&#34;: path: &#34;/dev/ttyUSB0&#34;, serial: &#34;01716A92&#34;, baud: 115200
</span></span><span style="display:flex;"><span>2022/06/19 20:50:47 dns.go:175: probe results: [{upstream: [2001:4860:4860::8888]:53, rtt: 999.665¬µs} {upstream: [2001:4860:4860::8844]:53, rtt: 2.041079ms} {upstream: 8.8.8.8:53, rtt: 2.073279ms} {upstream: 8.8.4.4:53, rtt: 16.200959ms}]
</span></span><span style="display:flex;"><span>[‚Ä¶]
</span></span></code></pre></div><p>I‚Äôm using the <code>logtostdout</code> option to make <code>consrv</code> continuously read the serial
port and send it to <code>stdout</code>, which gokrazy in turn <a href="https://gokrazy.org/userguide/remotesyslog/">sends via remote
syslog</a> to the <a href="https://github.com/gokrazy/syslogd">gokrazy syslog
daemon</a>, running on another machine. You
could also run it on the same machine if you want to log to file.</p>
<aside class="admonition note">
  <div class="note-container">
    <div class="note-icon" style="width: 20px; height: 20px">
      <svg id="exclamation-icon" width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;">
    <path d="M0,0L24,0L24,24L0,24L0,0Z" style="fill:none;"/>
    <g transform="matrix(1.2,0,0,1.2,-2.4,-2.4)">
        <path d="M12,2C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22C17.52,22 22,17.52 22,12C22,6.48 17.52,2 12,2ZM13,17L11,17L11,15L13,15L13,17ZM13,13L11,13L11,7L13,7L13,13Z" style="fill-rule:nonzero;"/>
    </g>
</svg>

    </div>
    <div class="admonition-content">There is an <a href="https://github.com/mdlayher/consrv/issues/3">open issue in
<code>consrv</code></a> regarding the failure
mode when a serial adapter disappears. Currently, <code>consrv</code> hangs until you try
to send something, then must be restarted. A workaround is available in the
GitHub issue.</div>
  </div>
</aside>

<h3 id="controlling-tasmota-from-breakglass">Controlling Tasmota from breakglass</h3>
<p>You can use <a href="https://github.com/gokrazy/breakglass"><code>breakglass</code></a> to
interactively log into your gokrazy installation.</p>
<p>If you flashed your Smart Plug with Tasmota, you can easily turn power on from a
breakglass shell by directly calling Tasmota‚Äôs HTTP API with <code>curl</code>:</p>
<pre tabindex="0"><code>% breakglass consrv
consrv# curl -v -X POST --data &#39;cmnd=power on&#39; http://tasmota_68462f-1583/cm
</code></pre><p>The original Sonoff firmware offers a DIY mode which should also offer an HTTP
API, but the <a href="https://twitter.com/zekjur/status/1321949087160258562">DIY mode did not work in my
tests</a>. Hence, I‚Äôm only
describing how to do it with Tasmota.</p>
<h3 id="optional-local-mqtt-server">Optional: Local MQTT Server</h3>
<p>Personally, I like having the Smart Plug available both on the local network
(via Tasmota‚Äôs HTTP API) and via the internet with an external MQTT server. That
way, even if either option fails, I still have a way to toggle power remotely.</p>
<p>But, maybe you want to obtain usage stats by listening to MQTT or similar, and
you don‚Äôt want to use an extra server for this. In that situation, you can
easily run a local MQTT server on your Pi.</p>
<p>In the gokrazy <code>Makefile</code>, add
<a href="https://github.com/fhmq/hmq"><code>github.com/fhmq/hmq</code></a> to the list of packages to
install, and configure Tasmota to connect to <code>consrv</code> on port 1883.</p>
<p>To check that everything is working, use <code>mosquitto_sub</code> from another machine:</p>
<pre tabindex="0"><code>midna% mosquitto_sub --verbose -h consrv.monkey-turtle.ts.net -t &#39;#&#39;
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>digitec‚Äôs IOT mobile internet subscription makes remote power management
delightfully easy with a smart plug and 4G WiFi router, and affordable
enough. The subscription is flexible enough that you can decide to only book it
while you‚Äôre traveling.</p>
<p>We can elevate the whole setup in functionality (but also complexity) by
combining Tailscale, consrv and gokrazy, running on a Raspberry Pi Zero 2 W, and
connecting a USB-to-serial adapter.</p>
<p>If you need more features than that, check out the next step on the feature and
complexity ladder: <a href="https://pikvm.org/">PiKVM</a> or
<a href="https://tinypilotkvm.com/">TinyPilot</a>. See also <a href="https://www.jeffgeerling.com/blog/2021/raspberry-pi-kvms-compared-tinypilot-and-pi-kvm-v3">this comparison by Jeff
Geerling</a>.</p>
<h2 id="appendix-a-unstable-apple-usb-ethernet-adapter">Appendix A: Unstable Apple USB ethernet adapter</h2>
<p>The first USB ethernet adapter I tried was the <a href="https://www.artcomputer.ch/b2c_en/apple-usb-ethernet-adapter-a00004961/">Apple USB Ethernet
Adapter</a>.</p>
<p>Unfortunately, after a few days of uptime, I experienced the following kernel
driver crash (with the <code>asix</code> Linux driver), and the link remained down until I
rebooted.</p>
<p>I then switched to a <a href="https://www.linksys.com/support-product?sku=USB3GIG">Linksys
USB3GIG</a> network adapter
(supported by the <code>r8152</code> Linux driver) and did not see any problems with that
so far.</p>
<details>
<summary>kernel crash message (in dmesg)</summary>
<pre tabindex="0"><code>dwc2 3f980000.usb: dwc2_hc_chhltd_intr_dma: Channel 5 - ChHltd set, but reason is unknown
dwc2 3f980000.usb: hcint 0x00000002, intsts 0x04600009
dwc2 3f980000.usb: dwc2_update_urb_state_abn(): trimming xfer length
asix 1-1.4:1.0 eth0: Failed to read reg index 0x0000: -71
------------[ cut here ]------------
WARNING: CPU: 1 PID: 7588 at drivers/net/phy/phy.c:942 phy_error+0x10/0x58
Modules linked in: brcmfmac brcmutil
CPU: 1 PID: 7588 Comm: kworker/u8:2 Not tainted 5.18.3 #1
Hardware name: Raspberry Pi Zero 2 W Rev 1.0 (DT)
Workqueue: events_power_efficient phy_state_machine
pstate: 80000005 (Nzcv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)
pc : phy_error+0x10/0x58
lr : phy_state_machine+0x258/0x2b0
sp : ffff800009fe3d40
x29: ffff800009fe3d40 x28: 0000000000000000 x27: ffff6c7ac300c078
x26: ffff6c7ac300c000 x25: ffff6c7ac4390000 x24: 00000000ffffffb9
x23: 0000000000000004 x22: ffff6c7ac4019cd8 x21: ffff6c7ac4019800
x20: ffffce5c97f6f000 x19: ffff6c7ac4019800 x18: 0000000000000010
x17: 0000000400000000 x16: 0000000000000000 x15: 0000000000001007
x14: ffff800009fe3810 x13: 00000000ffffffea x12: 00000000fffff007
x11: fffffffffffe0290 x10: fffffffffffe0240 x9 : ffffce5c988e1018
x8 : c0000000fffff007 x7 : 00000000000000a8 x6 : ffffce5c98889280
x5 : 0000000000000268 x4 : ffff6c7acf392b80 x3 : ffff6c7ac4019cd8
x2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff6c7ac4019800
Call trace:
 phy_error+0x10/0x58
 phy_state_machine+0x258/0x2b0
 process_one_work+0x1e4/0x348
 worker_thread+0x48/0x418
 kthread+0xf4/0x110
 ret_from_fork+0x10/0x20
---[ end trace 0000000000000000 ]---
asix 1-1.4:1.0 eth0: Link is Down
</code></pre></details>
]]></content>
  </entry>
</feed>
